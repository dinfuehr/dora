class BytecodeWriter {
    let code: Vec[UInt8] = Vec[UInt8]();
    let constPool: Vec[ConstPoolEntry] = Vec[ConstPoolEntry]();
    let registers: Vec[BytecodeType] = Vec[BytecodeType]();
    let unresolvedJumps: Vec[UnresolvedJump] = Vec[UnresolvedJump]();
    var arguments: Int32 = 0;

    fun addRegister(ty: BytecodeType) -> BytecodeRegister {
        self.registers.push(ty);
        BytecodeRegister(self.registers.size().toInt32() - 1)
    }

    fun createLabel() -> BytecodeLabel {
        BytecodeLabel()
    }

    fun defineLabel() -> BytecodeLabel {
        BytecodeLabel().bindTo(self.code.size().toInt32())
    }

    fun bindLabel(lbl: BytecodeLabel) {
        lbl.bindTo(self.code.size().toInt32());
    }

    fun setArguments(arguments: Int32) {
        self.arguments = arguments;
    }

    fun emitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_INT32, dest, lhs, rhs);
    }

    fun emitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_INT64, dest, lhs, rhs);
    }

    fun emitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_FLOAT32, dest, lhs, rhs);
    }

    fun emitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ADD_FLOAT64, dest, lhs, rhs);
    }

    fun emitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT32, dest, lhs, rhs);
    }

    fun emitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_INT64, dest, lhs, rhs);
    }

    fun emitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_FLOAT32, dest, lhs, rhs);
    }

    fun emitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SUB_FLOAT64, dest, lhs, rhs);
    }

    fun emitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_INT32, dest, src);
    }

    fun emitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_INT64, dest, src);
    }

    fun emitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_FLOAT32, dest, src);
    }

    fun emitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NEG_FLOAT64, dest, src);
    }

    fun emitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MUL_INT32, dest, lhs, rhs);
    }

    fun emitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MUL_INT64, dest, lhs, rhs);
    }

    fun emitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MUL_FLOAT32, dest, lhs, rhs);
    }

    fun emitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MUL_FLOAT64, dest, lhs, rhs);
    }

    fun emitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_INT32, dest, lhs, rhs);
    }

    fun emitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_INT64, dest, lhs, rhs);
    }

    fun emitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_FLOAT32, dest, lhs, rhs);
    }

    fun emitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_DIV_FLOAT64, dest, lhs, rhs);
    }

    fun emitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MOD_INT32, dest, lhs, rhs);
    }

    fun emitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_MOD_INT64, dest, lhs, rhs);
    }

    fun emitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_AND_INT32, dest, lhs, rhs);
    }

    fun emitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_AND_INT64, dest, lhs, rhs);
    }

    fun emitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_OR_INT32, dest, lhs, rhs);
    }

    fun emitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_OR_INT64, dest, lhs, rhs);
    }

    fun emitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_XOR_INT32, dest, lhs, rhs);
    }

    fun emitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_XOR_INT64, dest, lhs, rhs);
    }

    fun emitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_BOOL, dest, src);
    }

    fun emitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_INT32, dest, src);
    }

    fun emitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_NOT_INT64, dest, src);
    }

    fun emitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHL_INT32, dest, lhs, rhs);
    }

    fun emitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHR_INT32, dest, lhs, rhs);
    }

    fun emitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SAR_INT32, dest, lhs, rhs);
    }

    fun emitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHL_INT64, dest, lhs, rhs);
    }

    fun emitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SHR_INT64, dest, lhs, rhs);
    }

    fun emitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_SAR_INT64, dest, lhs, rhs);
    }

    fun emitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROL_INT32, dest, lhs, rhs);
    }

    fun emitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROR_INT32, dest, lhs, rhs);
    }

    fun emitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROL_INT64, dest, lhs, rhs);
    }

    fun emitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_ROR_INT64, dest, lhs, rhs);
    }

    fun emitReinterpretFloat32AsInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_FLOAT32_AS_INT32, dest, src);
    }

    fun emitReinterpretInt32AsFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_INT32_AS_FLOAT32, dest, src);
    }

    fun emitReinterpretFloat64AsInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_FLOAT64_AS_INT64, dest, src);
    }

    fun emitReinterpretInt64AsFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_REINTERPRET_INT64_AS_FLOAT64, dest, src);
    }

    fun emitExtendByteToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_CHAR, dest, src);
    }

    fun emitExtendByteToInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_INT32, dest, src);
    }

    fun emitExtendByteToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_UINT8_TO_INT64, dest, src);
    }

    fun emitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_INT32_TO_INT64, dest, src);
    }

    fun emitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_EXTEND_CHAR_TO_INT64, dest, src);
    }

    fun emitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_CHAR_TO_INT32, dest, src);
    }

    fun emitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT32_TO_UINT8, dest, src);
    }

    fun emitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT32_TO_CHAR, dest, src);
    }

    fun emitCastInt64toUInt8(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_UINT8, dest, src);
    }

    fun emitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_CHAR, dest, src);
    }

    fun emitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CAST_INT64_TO_INT32, dest, src);
    }

    fun emitConvertInt32ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT32_TO_FLOAT32, dest, src);
    }

    fun emitConvertInt32ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT32_TO_FLOAT64, dest, src);
    }

    fun emitConvertInt64ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT64_TO_FLOAT32, dest, src);
    }

    fun emitConvertInt64ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_CONVERT_INT64_TO_FLOAT64, dest, src);
    }

    fun emitTruncateFloat32ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT32_TO_INT32, dest, src);
    }

    fun emitTruncateFloat32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT32_TO_INT64, dest, src);
    }

    fun emitTruncateFloat64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT64_TO_INT32, dest, src);
    }

    fun emitTruncateFloat64ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_TRUNCATE_FLOAT64_TO_INT64, dest, src);
    }

    fun emitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {
        self.emitReg2AndCls(BC_INSTANCE_OF, dest, src, cls);
    }

    fun emitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {
        self.emitReg1AndCls(BC_CHECKED_CAST, src, cls);
    }

    fun emitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_BOOL, dest, src);
    }

    fun emitMovByte(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_UINT8, dest, src);
    }

    fun emitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_CHAR, dest, src);
    }

    fun emitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_INT32, dest, src);
    }

    fun emitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_INT64, dest, src);
    }

    fun emitMovFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_FLOAT32, dest, src);
    }

    fun emitMovFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_FLOAT64, dest, src);
    }

    fun emitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(BC_MOV_PTR, dest, src);
    }

    fun emitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_BOOL, dest, obj, cls, field);
    }

    fun emitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_UINT8, dest, obj, cls, field);
    }

    fun emitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_CHAR, dest, obj, cls, field);
    }

    fun emitLoadFieldInt32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_INT32, dest, obj, cls, field);
    }

    fun emitLoadFieldInt64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_INT64, dest, obj, cls, field);
    }

    fun emitLoadFieldFloat32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_FLOAT32, dest, obj, cls, field);
    }

    fun emitLoadFieldFloat64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_FLOAT64, dest, obj, cls, field);
    }

    fun emitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_LOAD_FIELD_PTR, dest, obj, cls, field);
    }

    fun emitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_BOOL, src, obj, cls, field);
    }

    fun emitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_UINT8, src, obj, cls, field);
    }

    fun emitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_CHAR, src, obj, cls, field);
    }

    fun emitStoreFieldInt32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_INT32, src, obj, cls, field);
    }

    fun emitStoreFieldInt64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_INT64, src, obj, cls, field);
    }

    fun emitStoreFieldFloat32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_FLOAT32, src, obj, cls, field);
    }

    fun emitStoreFieldFloat64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_FLOAT64, src, obj, cls, field);
    }

    fun emitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {
        self.emitField(BC_STORE_FIELD_PTR, src, obj, cls, field);
    }

    fun emitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_BOOL, dest, glob);
    }

    fun emitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_UINT8, dest, glob);
    }

    fun emitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_CHAR, dest, glob);
    }

    fun emitLoadGlobalInt32(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT32, dest, glob);
    }

    fun emitLoadGlobalInt64(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT64, dest, glob);
    }

    fun emitLoadGlobalFloat32(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT32, dest, glob);
    }

    fun emitLoadGlobalFloat64(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT64, dest, glob);
    }

    fun emitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_PTR, dest, glob);
    }

    fun emitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_BOOL, src, glob);
    }

    fun emitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_UINT8, src, glob);
    }

    fun emitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_CHAR, src, glob);
    }

    fun emitStoreGlobalInt32(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT32, src, glob);
    }

    fun emitStoreGlobalInt64(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_INT64, src, glob);
    }

    fun emitStoreGlobalFloat32(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT32, src, glob);
    }

    fun emitStoreGlobalFloat64(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_FLOAT64, src, glob);
    }

    fun emitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(BC_LOAD_GLOBAL_PTR, src, glob);
    }

    fun emitPushRegister(src: BytecodeRegister) {
        self.emitReg1(BC_PUSH_REGISTER, src);
    }

    fun emitConstNil(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_NIL, dest);
    }

    fun emitConstTrue(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_TRUE, dest);
    }

    fun emitConstFalse(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_FALSE, dest);
    }

    fun emitConstZeroByte(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_UINT8, dest);
    }

    fun emitConstZeroChar(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_CHAR, dest);
    }

    fun emitConstZeroInt32(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_INT32, dest);
    }

    fun emitConstZeroInt64(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_INT64, dest);
    }

    fun emitConstZeroFloat32(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_FLOAT32, dest);
    }

    fun emitConstZeroFloat64(dest: BytecodeRegister) {
        self.emitReg1(BC_CONST_ZERO_FLOAT64, dest);
    }

    fun emitConstByte(dest: BytecodeRegister, value: UInt8) {
        self.emitReg1AndByte(BC_CONST_UINT8, dest, value);
    }

    fun emitConstChar(dest: BytecodeRegister, value: Char) {
        let idx = self.addConst(ConstPoolChar(value));
        self.emitReg1AndIdx(BC_CONST_CHAR, dest, idx);
    }

    fun emitConstInt32(dest: BytecodeRegister, value: Int32) {
        let idx = self.addConst(ConstPoolInt32(value));
        self.emitReg1AndIdx(BC_CONST_INT32, dest, idx);
    }

    fun emitConstInt64(dest: BytecodeRegister, value: Int64) {
        let idx = self.addConst(ConstPoolInt64(value));
        self.emitReg1AndIdx(BC_CONST_INT64, dest, idx);
    }

    fun emitConstFloat32(dest: BytecodeRegister, value: Float32) {
        let idx = self.addConst(ConstPoolFloat32(value));
        self.emitReg1AndIdx(BC_CONST_FLOAT32, dest, idx);
    }

    fun emitConstFloat64(dest: BytecodeRegister, value: Float64) {
        let idx = self.addConst(ConstPoolFloat64(value));
        self.emitReg1AndIdx(BC_CONST_FLOAT64, dest, idx);
    }

    fun emitConstString(dest: BytecodeRegister, value: String) {
        let idx = self.addConst(ConstPoolString(value));
        self.emitReg1AndIdx(BC_CONST_STRING, dest, idx);
    }

    fun emitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_PTR, dest, lhs, rhs);
    }

    fun emitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_PTR, dest, lhs, rhs);
    }

    fun emitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_BOOL, dest, lhs, rhs);
    }

    fun emitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_BOOL, dest, lhs, rhs);
    }

    fun emitTestEqByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_UINT8, dest, lhs, rhs);
    }

    fun emitTestNeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_UINT8, dest, lhs, rhs);
    }

    fun emitTestGtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_UINT8, dest, lhs, rhs);
    }

    fun emitTestGeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_UINT8, dest, lhs, rhs);
    }

    fun emitTestLtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_UINT8, dest, lhs, rhs);
    }

    fun emitTestLeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_UINT8, dest, lhs, rhs);
    }

    fun emitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_CHAR, dest, lhs, rhs);
    }

    fun emitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_CHAR, dest, lhs, rhs);
    }

    fun emitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_CHAR, dest, lhs, rhs);
    }

    fun emitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_CHAR, dest, lhs, rhs);
    }

    fun emitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_CHAR, dest, lhs, rhs);
    }

    fun emitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_CHAR, dest, lhs, rhs);
    }

    fun emitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_ENUM, dest, lhs, rhs);
    }

    fun emitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_ENUM, dest, lhs, rhs);
    }

    fun emitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_INT32, dest, lhs, rhs);
    }

    fun emitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_INT32, dest, lhs, rhs);
    }

    fun emitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_INT32, dest, lhs, rhs);
    }

    fun emitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_INT32, dest, lhs, rhs);
    }

    fun emitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_INT32, dest, lhs, rhs);
    }

    fun emitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_INT32, dest, lhs, rhs);
    }

    fun emitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_INT64, dest, lhs, rhs);
    }

    fun emitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_INT64, dest, lhs, rhs);
    }

    fun emitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_INT64, dest, lhs, rhs);
    }

    fun emitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_INT64, dest, lhs, rhs);
    }

    fun emitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_INT64, dest, lhs, rhs);
    }

    fun emitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_INT64, dest, lhs, rhs);
    }

    fun emitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_FLOAT32, dest, lhs, rhs);
    }

    fun emitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_EQ_FLOAT64, dest, lhs, rhs);
    }

    fun emitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_NE_FLOAT64, dest, lhs, rhs);
    }

    fun emitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GT_FLOAT64, dest, lhs, rhs);
    }

    fun emitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_GE_FLOAT64, dest, lhs, rhs);
    }

    fun emitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LT_FLOAT64, dest, lhs, rhs);
    }

    fun emitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(BC_TEST_LE_FLOAT64, dest, lhs, rhs);
    }

    fun emitAssert(value: BytecodeRegister) {
        self.emitReg1(BC_ASSERT, value);
    }

    fun emitJumpLoop(lbl: BytecodeLabel) {
        assert(lbl.isBound());
        let offset = self.code.size().toInt32() - lbl.offset();
        self.emitJmp(BC_JUMP_LOOP, offset);
    }

    fun emitJumpIfFalse(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP_IF_FALSE, BC_JUMP_IF_FALSE_CONST, Option::some[BytecodeRegister](opnd), lbl);
    }

    fun emitJumpIfTrue(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP_IF_TRUE, BC_JUMP_IF_TRUE_CONST, Option::some[BytecodeRegister](opnd), lbl);
    }

    fun emitJump(lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(BC_JUMP, BC_JUMP_CONST, Option::none[BytecodeRegister](), lbl);
    }

    fun emitInvokeDirectVoid(fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFctVoid(BC_INVOKE_DIRECT_VOID, fct, start, count);
    }

    fun emitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_BOOL, dest, fct, start, count);
    }

    fun emitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_UINT8, dest, fct, start, count);
    }

    fun emitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_CHAR, dest, fct, start, count);
    }

    fun emitInvokeDirectInt32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_INT32, dest, fct, start, count);
    }

    fun emitInvokeDirectInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_INT64, dest, fct, start, count);
    }

    fun emitInvokeDirectFloat32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_FLOAT32, dest, fct, start, count);
    }

    fun emitInvokeDirectFloat64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_FLOAT64, dest, fct, start, count);
    }

    fun emitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_DIRECT_PTR, dest, fct, start, count);
    }

    fun emitInvokeVirtualVoid(fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFctVoid(BC_INVOKE_VIRTUAL_VOID, fct, start, count);
    }

    fun emitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_BOOL, dest, fct, start, count);
    }

    fun emitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_UINT8, dest, fct, start, count);
    }

    fun emitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_CHAR, dest, fct, start, count);
    }

    fun emitInvokeVirtualInt32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_INT32, dest, fct, start, count);
    }

    fun emitInvokeVirtualInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_INT64, dest, fct, start, count);
    }

    fun emitInvokeVirtualFloat32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_FLOAT32, dest, fct, start, count);
    }

    fun emitInvokeVirtualFloat64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_FLOAT64, dest, fct, start, count);
    }

    fun emitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_VIRTUAL_PTR, dest, fct, start, count);
    }

    fun emitInvokeStaticVoid(fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFctVoid(BC_INVOKE_STATIC_VOID, fct, start, count);
    }

    fun emitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_BOOL, dest, fct, start, count);
    }

    fun emitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_UINT8, dest, fct, start, count);
    }

    fun emitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_CHAR, dest, fct, start, count);
    }

    fun emitInvokeStaticInt32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_INT32, dest, fct, start, count);
    }

    fun emitInvokeStaticInt64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_INT64, dest, fct, start, count);
    }

    fun emitInvokeStaticFloat32(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_FLOAT32, dest, fct, start, count);
    }

    fun emitInvokeStaticFloat64(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_FLOAT64, dest, fct, start, count);
    }

    fun emitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitFct(BC_INVOKE_STATIC_PTR, dest, fct, start, count);
    }

    fun emitNewObject(dest: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(BC_NEW_OBJECT, dest.value, cls.value);
    }

    fun emitRetVoid() {
        self.emitInst(BC_RET_VOID);
    }

    fun emitRetBool(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_BOOL, opnd);
    }

    fun emitRetByte(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_UINT8, opnd);
    }

    fun emitRetChar(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_CHAR, opnd);
    }

    fun emitRetInt32(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_INT32, opnd);
    }

    fun emitRetInt64(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_INT64, opnd);
    }

    fun emitRetFloat32(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_FLOAT32, opnd);
    }

    fun emitRetFloat64(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_FLOAT64, opnd);
    }

    fun emitRetPtr(opnd: BytecodeRegister) {
        self.emitReg1(BC_RET_PTR, opnd);
    }

    fun generate() -> BytecodeFunction {
        self.resolveJumps();
        let code = self.code.toArray();
        let constPool = self.constPool.toArray();
        let registers = self.registers.toArray();
        let arguments = self.arguments;
        assert(arguments.toInt64() <= registers.size());
        BytecodeFunction(code, constPool, registers, arguments)
    }

    fun resolveJumps() {
        var i = 0L;

        while i < self.unresolvedJumps.size() {
            let jump = self.unresolvedJumps.get(i);
            assert(jump.label.isBound());

            assert(jump.label.offset() > jump.inst);
            let offset = jump.label.offset() - jump.inst;

            let opcode = self.code.get(jump.inst.toInt64()).toInt32();

            if opcode == BC_WIDE {
                // wide is guaranteed to not use constant pool
                self.patchInt32(jump.target, offset);
            } else if isWide(offset) {
                // Need to update const pool entry
                let idx = self.code.get(jump.target.toInt64());
                self.constPool.set(idx.toInt64(), ConstPoolInt32(offset));
            } else {
                // Offset fits into byte, replace instruction with jump+immediate
                let opcode = if opcode == BC_JUMP_CONST {
                    BC_JUMP
                } else if opcode == BC_JUMP_IF_FALSE_CONST {
                    BC_JUMP_IF_FALSE
                } else if opcode == BC_JUMP_IF_TRUE_CONST {
                    BC_JUMP_IF_TRUE
                } else {
                    fatalError("unexpected opcode ${bytecodeName(opcode)} (${opcode})");
                    -1
                };

                self.code.set(jump.inst.toInt64(), opcode.toUInt8());
                self.code.set(jump.target.toInt64(), offset.toUInt8());
            }

            i = i + 1L;
        }
    }

    fun emitFctVoid(inst: Int32, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitVal4(inst, fct.value, start.value, count);
    }

    fun emitFct(inst: Int32, dest: BytecodeRegister, fct: FctId, start: BytecodeRegister, count: Int32) {
        self.emitVal5(inst, dest.value, fct.value, start.value, count);
    }

    fun emitJmp(inst: Int32, offset: Int32) {
        self.emitVal2(inst, offset);
    }

    fun emitJmpForward(inst: Int32, instConst: Int32, opnd: Option[BytecodeRegister], lbl: BytecodeLabel) {
        assert(!isWide(inst));
        assert(!isWide(instConst));
        let start = self.code.size().toInt32();
        var target = 0;

        if (opnd.isSome() && isWide(opnd.unwrap().value)) || isWide(self.constPool.size().toInt32()) {
            self.emitWide();
            self.emitOpcode(inst);
            if opnd.isSome() {
                self.emitInt32(opnd.unwrap().value);
            }
            target = self.code.size().toInt32();
            self.emitInt32(0);
        } else {
            self.emitOpcode(instConst);
            if opnd.isSome() {
                self.emitByte(opnd.unwrap().value);
            }
            let idx = self.addConst(ConstPoolInt32(0));
            target = self.code.size().toInt32();
            self.emitByte(idx.value);
        }

        self.unresolvedJumps.push(UnresolvedJump(start, target, lbl));
    }

    fun emitInst(inst: Int32) {
        self.emitVal1(inst);
    }

    fun addConst(entry: ConstPoolEntry) -> ConstPoolId {
        self.constPool.push(entry);
        ConstPoolId(self.constPool.size().toInt32() - 1)
    }

    fun emitReg1(inst: Int32, r1: BytecodeRegister) {
        self.emitVal2(inst, r1.value);
    }

    fun emitReg1AndIdx(inst: Int32, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitVal3(inst, r1.value, idx.value);
    }

    fun emitReg1AndByte(inst: Int32, r1: BytecodeRegister, offset: UInt8) {
        self.emitVal2(inst, r1.value);
        self.emitByte(offset.toInt32());
    }

    fun emitReg1AndCls(inst: Int32, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitVal3(inst, r1.value, cls.value);
    }

    fun emitReg2(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitVal3(inst, r1.value, r2.value);
    }

    fun emitReg2AndCls(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassDefId) {
        self.emitVal4(inst, r1.value, r2.value, cls.value);
    }

    fun emitReg3(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitVal4(inst, r1.value, r2.value, r3.value);
    }

    fun emitGlobal(inst: Int32, r1: BytecodeRegister, glob: GlobalId) {
        self.emitVal3(inst, r1.value, glob.value);
    }

    fun emitField(
        inst: Int32,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cls: ClassDefId,
        field: FieldId,
    ) {
        self.emitVal5(inst, r1.value, r2.value, cls.value, field.value);
    }

    fun emitVal1(opcode: Int32) {
        self.emitOpcode(opcode);
    }

    fun emitVal2(opcode: Int32, v1: Int32) {
        if isWide(v1) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
        }
    }

    fun emitVal3(opcode: Int32, v1: Int32, v2: Int32) {
        if isWide(v1) || isWide(v2) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
        }
    }

    fun emitVal4(opcode: Int32, v1: Int32, v2: Int32, v3: Int32) {
        if isWide(v1) || isWide(v2) || isWide(v3) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
            self.emitInt32(v3);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
        }
    }

    fun emitVal5(opcode: Int32, v1: Int32, v2: Int32, v3: Int32, v4: Int32) {
        if isWide(v1) || isWide(v2) || isWide(v3) || isWide(v4) {
            self.emitWide();
            self.emitOpcode(opcode);
            self.emitInt32(v1);
            self.emitInt32(v2);
            self.emitInt32(v3);
            self.emitInt32(v4);
        } else {
            self.emitOpcode(opcode);
            self.emitByte(v1);
            self.emitByte(v2);
            self.emitByte(v3);
            self.emitByte(v4);
        }
    }

    fun emitWide() {
        self.emitByte(BC_WIDE);
    }

    fun emitOpcode(opcode: Int32) {
        if opcode >= 255 {
            self.emitByte(255);
            assert(opcode < 512);
            self.emitByte(opcode - 255);
        } else {
            self.emitByte(opcode);
        }
    }

    fun emitByte(val: Int32) {
        assert(val >= 0 && val <= 255);
        self.code.push(val.toUInt8());
    }

    fun emitInt32(val: Int32) {
        assert(val >= 0);
        self.emitByte(val & 0xFFI);
        self.emitByte((val >>> 8) & 0xFFI);
        self.emitByte((val >>> 16) & 0xFFI);
        self.emitByte((val >>> 24) & 0xFFI);
    }

    fun patchInt32(idx: Int32, val: Int32) {
        assert(val >= 0);
        let idx = idx.toInt64();
        self.code.set(idx, (val & 0xFFI).toUInt8());
        self.code.set(idx + 1L, ((val >>> 8) & 0xFFI).toUInt8());
        self.code.set(idx + 2L, ((val >>> 16) & 0xFFI).toUInt8());
        self.code.set(idx + 3L, ((val >>> 24) & 0xFFI).toUInt8());
    }
}

fun isWide(val: Int32) -> Bool {
    val > 255
}

class BytecodeLabel {
    var off: Int32 = -1;

    fun bindTo(offset: Int32) -> BytecodeLabel {
        assert(offset >= 0);
        self.off = offset;
        self
    }

    fun isBound() -> Bool {
        self.off >= 0
    }

    fun offset() -> Int32 {
        assert(self.isBound());
        self.off
    }
}

class UnresolvedJump(let inst: Int32, let target: Int32, let label: BytecodeLabel)
