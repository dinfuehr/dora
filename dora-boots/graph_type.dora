let typeUnit: Type = Type(TypeKind::Unit);
let typeBool: Type = Type(TypeKind::Bool);
let typeUInt8: Type = Type(TypeKind::UInt8);
let typeChar: Type = Type(TypeKind::Char);
let typeInt32: Type = Type(TypeKind::Int32);
let typeInt64: Type = Type(TypeKind::Int64);
let typeFloat32: Type = Type(TypeKind::Float32);
let typeFloat64: Type = Type(TypeKind::Float64);
let typePtr: Type = Type(TypeKind::Ptr);


class Type(let kind: TypeKind) {
    fun isUnit(): Bool { return self.kind == TypeKind::Unit; }
    fun isUInt8(): Bool { return self.kind == TypeKind::UInt8; }
    fun isInt32(): Bool { return self.kind == TypeKind::Int32; }
    fun isInt64(): Bool { return self.kind == TypeKind::Int64; }
    fun isFloat32(): Bool { return self.kind == TypeKind::Float32; }
    fun isFloat64(): Bool { return self.kind == TypeKind::Float64; }
    fun isPtr(): Bool { return self.kind == TypeKind::Ptr; }

    fun isAnyFloat(): Bool {
        return self.kind == TypeKind::Float32 || self.kind == TypeKind::Float64;
    }
}

module Type {
    fun unit(): Type { return typeUnit; }
    fun bool(): Type { return typeBool; }
    fun uint8(): Type { return typeUInt8; }
    fun char(): Type { return typeChar; }
    fun int32(): Type { return typeInt32; }
    fun int64(): Type { return typeInt64; }
    fun float32(): Type { return typeFloat32; }
    fun float64(): Type { return typeFloat64; }
    fun ptr(): Type { return typePtr; }

    fun fromBytecodeType(ty: BytecodeType): Type {
        if ty.isBool() {
            Type::bool()
        } else if ty.isUInt8() {
            Type::uint8()
        } else if ty.isChar() {
            Type::char()
        } else if ty.isInt32() {
            Type::int32()
        } else if ty.isInt64() {
            Type::int64()
        } else if ty.isFloat32() {
            Type::float32()
        } else if ty.isFloat64() {
            Type::float64()
        } else if ty.isPtr() {
            Type::ptr()
        } else {
            unreachable();
            Type::unit()
        }
    }
}

impl Stringable for Type {
    fun toString(): String {
        self.kind.toString()
    }
}

enum TypeKind {
    Unit, Bool, UInt8, Char, Int32, Int64, Float32, Float64, Ptr
}

impl TypeKind {
    fun toString(): String {
        if self == TypeKind::Unit {
            "Unit"
        } else if self == TypeKind::Bool {
            "Bool"
        } else if self == TypeKind::UInt8 {
            "UInt8"
        } else if self == TypeKind::Int32 {
            "Int32"
        } else if self == TypeKind::Int64 {
            "Int64"
        } else if self == TypeKind::Float32 {
            "Float32"
        } else if self == TypeKind::Float64 {
            "Float64"
        } else if self == TypeKind::Ptr {
            "Ptr"
        } else {
            unreachable();
            ""
        }
    }
}