fun readBytecode(code: Array[UInt8], visitor: BytecodeVisitor) {
    BytecodeReader(code, visitor).read();
}

@open @abstract class BytecodeVisitor {
    @open fun visitInstruction(offset: Int32) {}

    @open fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitReinterpretFloat32AsInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretInt32AsFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretFloat64AsInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretInt64AsFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitConvertInt32ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt32ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt64ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertInt64ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitTruncateFloat32ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateFloat32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateFloat64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateFloat64ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }

    @open fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovUInt8(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovFloat32(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovFloat64(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fun visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fun visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @open fun visitConstNil(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroUInt8(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroInt32(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroInt64(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroFloat32(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroFloat64(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) { unimplemented(); }
    @open fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @open fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAssert(value: BytecodeRegister) { unimplemented(); }

    @open fun visitJumpLoop(offset: Int32) { unimplemented(); }

    @open fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { unimplemented(); }
    @open fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJump(offset: Int32) { unimplemented(); }
    @open fun visitJumpConst(idx: ConstPoolId) { unimplemented(); }

    @open fun visitInvokeDirectVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeDirect(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitInvokeVirtualVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitInvokeStaticVoid(fct: FctId) { unimplemented(); }
    @open fun visitInvokeStatic(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @open fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fun visitNewArray(dest: BytecodeRegister, cls: ClassDefId, length: BytecodeRegister) { unimplemented(); }
    
    @open fun visitNilCheck(obj: BytecodeRegister) { unimplemented(); }

    @open fun visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) { unimplemented(); }
    @open fun visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @open fun visitLoadArrayBool(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayUInt8(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayChar(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayInt32(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayInt64(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayFloat32(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayFloat64(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitLoadArrayPtr(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @open fun visitStoreArrayBool(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayUInt8(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayChar(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayInt32(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayInt64(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayFloat32(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayFloat64(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }
    @open fun visitStoreArrayPtr(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @open fun visitRetVoid() { unimplemented(); }
    @open fun visitRet(opnd: BytecodeRegister) { unimplemented(); }
}

@open @abstract class EmptyBytecodeVisitor extends BytecodeVisitor {
    @override fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitReinterpretFloat32AsInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretInt32AsFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretFloat64AsInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretInt64AsFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitConvertInt32ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt32ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt64ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertInt64ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitTruncateFloat32ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateFloat32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateFloat64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateFloat64ToInt64(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {}
    @override fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {}

    @override fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovUInt8(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovFloat32(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovFloat64(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fun visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) {}

    @override fun visitPushRegister(src: BytecodeRegister) {}

    @override fun visitConstNil(dest: BytecodeRegister) {}
    @override fun visitConstTrue(dest: BytecodeRegister) {}
    @override fun visitConstFalse(dest: BytecodeRegister) {}
    @override fun visitConstZeroUInt8(dest: BytecodeRegister) {}
    @override fun visitConstZeroChar(dest: BytecodeRegister) {}
    @override fun visitConstZeroInt32(dest: BytecodeRegister) {}
    @override fun visitConstZeroInt64(dest: BytecodeRegister) {}
    @override fun visitConstZeroFloat32(dest: BytecodeRegister) {}
    @override fun visitConstZeroFloat64(dest: BytecodeRegister) {}
    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) {}
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {}

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAssert(value: BytecodeRegister) {}

    @override fun visitJumpLoop(offset: Int32) {}

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {}
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {}
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJump(offset: Int32) {}
    @override fun visitJumpConst(idx: ConstPoolId) {}

    @override fun visitInvokeDirectVoid(fct: FctId) {}
    @override fun visitInvokeDirect(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitInvokeVirtualVoid(fct: FctId) {}
    @override fun visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitInvokeStaticVoid(fct: FctId) {}
    @override fun visitInvokeStatic(dest: BytecodeRegister, fct: FctId) {}

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) {}
    @override fun visitNewArray(dest: BytecodeRegister, cls: ClassDefId, length: BytecodeRegister) {}

    @override fun visitNilCheck(obj: BytecodeRegister) {}

    @override fun visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) {}
    @override fun visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) {}

    @override fun visitLoadArrayBool(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayUInt8(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayChar(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayInt32(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayInt64(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayFloat32(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayFloat64(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitLoadArrayPtr(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}

    @override fun visitStoreArrayBool(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayUInt8(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayChar(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayInt32(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayInt64(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayFloat32(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayFloat64(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}
    @override fun visitStoreArrayPtr(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {}

    @override fun visitRetVoid() {}
    @override fun visitRet(opnd: BytecodeRegister) {}
}

class BytecodeReader(let data: Array[UInt8], let visitor: BytecodeVisitor) {
    var pos: Int32 = 0;
    var length: Int32 = data.size().toInt32();

    fun read() {
        while self.pos < self.length {
            self.visitor.visitInstruction(self.pos);
            let wide = self.hasWideOperands();
            let opcode = self.readOpcode();
            self.readInstruction(wide, opcode);
        }
    }

    fun readInstruction(wide: Bool, opcode: Int32) {
        if opcode == BC_WIDE {
            fatalError("unexpected WIDE");

        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt32(dest, lhs, rhs);
        } else if opcode == BC_ADD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt64(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat32(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat64(dest, lhs, rhs);

        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt32(dest, lhs, rhs);
        } else if opcode == BC_SUB_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt64(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat32(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat64(dest, lhs, rhs);

        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt32(dest, src);
        } else if opcode == BC_NEG_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt64(dest, src);
        } else if opcode == BC_NEG_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat32(dest, src);
        } else if opcode == BC_NEG_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat64(dest, src);

        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt32(dest, lhs, rhs);
        } else if opcode == BC_MUL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt64(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat32(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat64(dest, lhs, rhs);

        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt32(dest, lhs, rhs);
        } else if opcode == BC_DIV_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt64(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat32(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat64(dest, lhs, rhs);

        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt32(dest, lhs, rhs);
        } else if opcode == BC_MOD_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt64(dest, lhs, rhs);

        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt32(dest, lhs, rhs);
        } else if opcode == BC_AND_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt64(dest, lhs, rhs);

        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt32(dest, lhs, rhs);
        } else if opcode == BC_OR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt64(dest, lhs, rhs);

        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt32(dest, lhs, rhs);
        } else if opcode == BC_XOR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt64(dest, lhs, rhs);

        } else if opcode == BC_NOT_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotBool(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt32(dest, src);
        } else if opcode == BC_NOT_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt64(dest, src);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt32(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt32(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt32(dest, lhs, rhs);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt32(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt32(dest, lhs, rhs);
        } else if opcode == BC_ROL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt64(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt64(dest, lhs, rhs);

        } else if opcode == BC_REINTERPRET_FLOAT32_AS_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretFloat32AsInt32(dest, src);

        } else if opcode == BC_REINTERPRET_INT32_AS_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretInt32AsFloat32(dest, src);

        } else if opcode == BC_REINTERPRET_FLOAT64_AS_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretFloat64AsInt64(dest, src);

        } else if opcode == BC_REINTERPRET_INT64_AS_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretInt64AsFloat64(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToChar(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt32(dest, src);

        } else if opcode == BC_EXTEND_UINT8_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendUInt8ToInt64(dest, src);

        } else if opcode == BC_EXTEND_INT32_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendInt32ToInt64(dest, src);

        } else if opcode == BC_EXTEND_CHAR_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendCharToInt64(dest, src);

        } else if opcode == BC_CAST_CHAR_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastCharToInt32(dest, src);

        } else if opcode == BC_CAST_INT32_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToUInt8(dest, src);

        } else if opcode == BC_CAST_INT32_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt32ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToChar(dest, src);

        } else if opcode == BC_CAST_INT64_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastInt64ToInt32(dest, src);

        } else if opcode == BC_CONVERT_INT32_TO_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt32ToFloat32(dest, src);

        } else if opcode == BC_CONVERT_INT32_TO_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt32ToFloat64(dest, src);

        } else if opcode == BC_CONVERT_INT64_TO_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt64ToFloat32(dest, src);

        } else if opcode == BC_CONVERT_INT64_TO_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertInt64ToFloat64(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT32_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloat32ToInt32(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT32_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloat32ToInt64(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT64_TO_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloat64ToInt32(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT64_TO_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloat64ToInt64(dest, src);

        } else if opcode == BC_INSTANCE_OF {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitInstanceOf(dest, src, cls);

        } else if opcode == BC_CHECKED_CAST {
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitCheckedCast(src, cls);

        } else if opcode == BC_SHL_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt64(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt64(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt64(dest, lhs, rhs);

        } else if opcode == BC_MOV_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovBool(dest, src);
        } else if opcode == BC_MOV_UINT8 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovUInt8(dest, src);
        } else if opcode == BC_MOV_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovChar(dest, src);
        } else if opcode == BC_MOV_INT32 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt32(dest, src);
        } else if opcode == BC_MOV_INT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt64(dest, src);
        } else if opcode == BC_MOV_FLOAT32{
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovFloat32(dest, src);
        } else if opcode == BC_MOV_FLOAT64 {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovFloat64(dest, src);
        } else if opcode == BC_MOV_PTR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovPtr(dest, src);

        } else if opcode == BC_LOAD_FIELD {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadField(dest, obj, cls, field);
        } else if opcode == BC_STORE_FIELD {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreField(src, obj, cls, field);

        } else if opcode == BC_LOAD_GLOBAL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobal(dest, glob);
        } else if opcode == BC_STORE_GLOBAL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobal(src, glob);

        } else if opcode == BC_PUSH_REGISTER {
            let src = self.readRegister(wide);
            self.visitor.visitPushRegister(src);

        } else if opcode == BC_CONST_NIL {
            let dest = self.readRegister(wide);
            self.visitor.visitConstNil(dest);
        } else if opcode == BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstTrue(dest);
        } else if opcode == BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstFalse(dest);
        } else if opcode == BC_CONST_ZERO_UINT8 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroUInt8(dest);
        } else if opcode == BC_CONST_ZERO_CHAR {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroChar(dest);
        } else if opcode == BC_CONST_ZERO_INT32 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt32(dest);
        } else if opcode == BC_CONST_ZERO_INT64 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt64(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT32{
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat32(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT64 {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat64(dest);
        } else if opcode == BC_CONST_UINT8 {
            let dest = self.readRegister(wide);
            let value = self.readByte().toUInt8();
            self.visitor.visitConstUInt8(dest, value);
        } else if opcode == BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstChar(dest, idx);
        } else if opcode == BC_CONST_INT32 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt32(dest, idx);
        } else if opcode == BC_CONST_INT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt64(dest, idx);
        } else if opcode == BC_CONST_FLOAT32{
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat32(dest, idx);
        } else if opcode == BC_CONST_FLOAT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat64(dest, idx);
        } else if opcode == BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstString(dest, idx);

        } else if opcode == BC_TEST_EQ_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqPtr(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNePtr(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqBool(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeBool(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtUInt8(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_UINT8 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeUInt8(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeChar(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqEnum(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeEnum(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT32 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt32(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt64(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat32(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT32{
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat32(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat64(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT64 {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat64(dest, lhs, rhs);

        } else if opcode == BC_ASSERT {
            let value = self.readRegister(wide);
            self.visitor.visitAssert(value);

        } else if opcode == BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            self.visitor.visitJumpLoop(offset);

        } else if opcode == BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfFalse(opnd, offset);
        } else if opcode == BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfFalseConst(opnd, idx);
        } else if opcode == BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfTrue(opnd, offset);
        } else if opcode == BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfTrueConst(opnd, idx);
        } else if opcode == BC_JUMP {
            let offset = self.readOffset(wide);
            self.visitor.visitJump(offset);
        } else if opcode == BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpConst(idx);

        } else if opcode == BC_INVOKE_DIRECT_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirectVoid(fct);
        } else if opcode == BC_INVOKE_DIRECT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeDirect(dest, fct);

        } else if opcode == BC_INVOKE_VIRTUAL_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtualVoid(fct);
        } else if opcode == BC_INVOKE_VIRTUAL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeVirtual(dest, fct);

        } else if opcode == BC_INVOKE_STATIC_VOID {
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStaticVoid(fct);
        } else if opcode == BC_INVOKE_STATIC {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            self.visitor.visitInvokeStatic(dest, fct);

        } else if opcode == BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitNewObject(dest, cls);
        } else if opcode == BC_NEW_ARRAY {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let length = self.readRegister(wide);
            self.visitor.visitNewArray(dest, cls, length);

        } else if opcode == BC_NIL_CHECK {
            let obj = self.readRegister(wide);
            self.visitor.visitNilCheck(obj);
        } else if opcode == BC_ARRAY_BOUND_CHECK {
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitArrayBoundCheck(arr, idx);
        } else if opcode == BC_ARRAY_LENGTH {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            self.visitor.visitArrayLength(dest, arr);

        } else if opcode == BC_LOAD_ARRAY_BOOL {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayBool(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_UINT8 {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayUInt8(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_CHAR {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayChar(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_INT32 {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayInt32(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_INT64 {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayInt64(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_FLOAT32 {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayFloat32(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_FLOAT64 {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayFloat64(dest, arr, idx);
        } else if opcode == BC_LOAD_ARRAY_PTR {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitLoadArrayPtr(dest, arr, idx);

        } else if opcode == BC_STORE_ARRAY_BOOL {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayBool(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_UINT8 {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayUInt8(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_CHAR {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayChar(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_INT32 {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayInt32(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_INT64 {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayInt64(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_FLOAT32 {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayFloat32(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_FLOAT64 {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayFloat64(src, arr, idx);
        } else if opcode == BC_STORE_ARRAY_PTR {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            self.visitor.visitStoreArrayPtr(src, arr, idx);

        } else if opcode == BC_RET_VOID {
            self.visitor.visitRetVoid();
        } else if opcode == BC_RET {
            let opnd = self.readRegister(wide);
            self.visitor.visitRet(opnd);

        } else {
            fatalError("unkown opcode ${opcode}");
        }
    }

    fun readRegister(wide: Bool): BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fun hasWideOperands(): Bool {
        let data = self.data;
        let value = data(self.pos.toInt64());

        if value.toInt32() == BC_WIDE {
            self.pos = self.pos + 1;
            true
        } else {
            false
        }
    }

    fun readOpcode(): Int32 {
        let first = self.readByte();

        if first == 255 {
            let second = self.readByte();
            second + 255
        } else {
            first
        }
    }

    fun readClassDefId(wide: Bool): ClassDefId {
        ClassDefId(self.readIndex(wide))
    }

    fun readGlobalId(wide: Bool): GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fun readFieldId(wide: Bool): FieldId {
        FieldId(self.readIndex(wide))
    }

    fun readFctId(wide: Bool): FctId {
        FctId(self.readIndex(wide))
    }

    fun readConstPoolId(wide: Bool): ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fun readOffset(wide: Bool): Int32 {
        self.readIndex(wide)
    }

    fun readIndex(wide: Bool): Int32 {
        if wide {
            self.readInt32()
        } else {
            self.readByte()
        }
    }

    fun readByte(): Int32 {
        let data = self.data;
        let value = data(self.pos.toInt64());
        self.pos = self.pos + 1;

        value.toInt32()
    }

    fun readInt32(): Int32 {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }
}
