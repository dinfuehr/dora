fun readBytecode(code: Array[Byte], visitor: BytecodeVisitor) {
    BytecodeReader(code, visitor).read();
}

@open @abstract class BytecodeVisitor {
    @open fun visitInstruction(offset: Int) {}

    @open fun visitAddInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitSubInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNegInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitMulInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitDivInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitModInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitModLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAndInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitAndLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitOrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitOrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitXorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitXorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitNotLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitShlInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitShlLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitShrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitSarLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitRolInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRolLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitRorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitReinterpretFloatAsInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretIntAsFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretDoubleAsLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitReinterpretLongAsDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitExtendByteToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendByteToInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendByteToLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendIntToLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitExtendCharToLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitCastCharToInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastIntToByte(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastIntToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastLongToByte(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastLongToChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitCastLongToInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitConvertIntToFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertIntToDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertLongToFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitConvertLongToDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitTruncateFloatToInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateFloatToLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateDoubleToInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitTruncateDoubleToLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @open fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) { unimplemented(); }

    @open fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovByte(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovInt(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovLong(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }
    @open fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) { unimplemented(); }

    @open fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldInt(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldLong(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldInt(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldLong(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @open fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @open fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalInt(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalLong(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalInt(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalLong(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }
    @open fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) { unimplemented(); }

    @open fun visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @open fun visitConstNil(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroByte(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroInt(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroLong(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroFloat(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstZeroDouble(dest: BytecodeRegister) { unimplemented(); }
    @open fun visitConstByte(dest: BytecodeRegister, value: Byte) { unimplemented(); }
    @open fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstInt(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstLong(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstFloat(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstDouble(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @open fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @open fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @open fun visitAssert(value: BytecodeRegister) { unimplemented(); }

    @open fun visitJumpLoop(offset: Int) { unimplemented(); }

    @open fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int) { unimplemented(); }
    @open fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int) { unimplemented(); }
    @open fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @open fun visitJump(offset: Int) { unimplemented(); }
    @open fun visitJumpConst(idx: ConstPoolId) { unimplemented(); }

    @open fun visitInvokeDirectVoid(fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @open fun visitInvokeVirtualVoid(fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @open fun visitInvokeStaticVoid(fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @open fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @open fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    
    @open fun visitRetVoid() { unimplemented(); }
    @open fun visitRetBool(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetByte(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetChar(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetInt(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetLong(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetFloat(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetDouble(opnd: BytecodeRegister) { unimplemented(); }
    @open fun visitRetPtr(opnd: BytecodeRegister) { unimplemented(); }
}

@open @abstract class EmptyBytecodeVisitor: BytecodeVisitor {
    @override fun visitAddInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitSubInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNegInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitMulInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitDivInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitModInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitModLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAndInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitAndLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitOrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitOrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitXorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitXorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitNotLong(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitShlInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitShlLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitShrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitSarLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitRolInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRolLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitRorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitReinterpretFloatAsInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretIntAsFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretDoubleAsLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitReinterpretLongAsDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitExtendByteToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendByteToInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendByteToLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendIntToLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitExtendCharToLong(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitCastCharToInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastIntToByte(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastIntToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastLongToByte(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastLongToChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitCastLongToInt(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitConvertIntToFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertIntToDouble(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertLongToFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitConvertLongToDouble(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitTruncateFloatToInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateFloatToLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateDoubleToInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitTruncateDoubleToLong(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) {}
    @override fun visitCheckedCast(src: BytecodeRegister, cls: ClassDefId) {}

    @override fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovByte(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovInt(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovLong(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) {}
    @override fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {}

    @override fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldInt(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldLong(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldInt(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldLong(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}
    @override fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) {}

    @override fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalInt(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalLong(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) {}
    @override fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) {}

    @override fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalInt(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalLong(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) {}
    @override fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) {}

    @override fun visitPushRegister(src: BytecodeRegister) {}

    @override fun visitConstNil(dest: BytecodeRegister) {}
    @override fun visitConstTrue(dest: BytecodeRegister) {}
    @override fun visitConstFalse(dest: BytecodeRegister) {}
    @override fun visitConstZeroByte(dest: BytecodeRegister) {}
    @override fun visitConstZeroChar(dest: BytecodeRegister) {}
    @override fun visitConstZeroInt(dest: BytecodeRegister) {}
    @override fun visitConstZeroLong(dest: BytecodeRegister) {}
    @override fun visitConstZeroFloat(dest: BytecodeRegister) {}
    @override fun visitConstZeroDouble(dest: BytecodeRegister) {}
    @override fun visitConstByte(dest: BytecodeRegister, value: Byte) {}
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstInt(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstLong(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstFloat(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstDouble(dest: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {}

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeBool(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeByte(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}
    @override fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {}

    @override fun visitAssert(value: BytecodeRegister) {}

    @override fun visitJumpLoop(offset: Int) {}

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int) {}
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int) {}
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {}
    @override fun visitJump(offset: Int) {}
    @override fun visitJumpConst(idx: ConstPoolId) {}

    @override fun visitInvokeDirectVoid(fct: FctId, count: Int) {}
    @override fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectInt(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectLong(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, count: Int) {}

    @override fun visitInvokeVirtualVoid(fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualInt(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualLong(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, count: Int) {}

    @override fun visitInvokeStaticVoid(fct: FctId, count: Int) {}
    @override fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticInt(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticLong(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId, count: Int) {}
    @override fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, count: Int) {}

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) {}
    
    @override fun visitRetVoid() {}
    @override fun visitRetBool(opnd: BytecodeRegister) {}
    @override fun visitRetByte(opnd: BytecodeRegister) {}
    @override fun visitRetChar(opnd: BytecodeRegister) {}
    @override fun visitRetInt(opnd: BytecodeRegister) {}
    @override fun visitRetLong(opnd: BytecodeRegister) {}
    @override fun visitRetFloat(opnd: BytecodeRegister) {}
    @override fun visitRetDouble(opnd: BytecodeRegister) {}
    @override fun visitRetPtr(opnd: BytecodeRegister) {}
}

class BytecodeReader(let data: Array[Byte], let visitor: BytecodeVisitor) {
    var pos: Int = 0;
    var length: Int = data.length();

    fun read() {
        while self.pos < self.length {
            self.visitor.visitInstruction(self.pos);
            let wide = self.hasWideOperands();
            let opcode = self.readOpcode(wide);
            self.readInstruction(wide, opcode);
        }
    }

    fun readInstruction(wide: Bool, opcode: Int) {
        if opcode == BC_WIDE {
            fatalError("unexpected WIDE");

        } else if opcode == BC_ADD_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddInt(dest, lhs, rhs);
        } else if opcode == BC_ADD_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddLong(dest, lhs, rhs);
        } else if opcode == BC_ADD_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddFloat(dest, lhs, rhs);
        } else if opcode == BC_ADD_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAddDouble(dest, lhs, rhs);

        } else if opcode == BC_SUB_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubInt(dest, lhs, rhs);
        } else if opcode == BC_SUB_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubLong(dest, lhs, rhs);
        } else if opcode == BC_SUB_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubFloat(dest, lhs, rhs);
        } else if opcode == BC_SUB_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSubDouble(dest, lhs, rhs);

        } else if opcode == BC_NEG_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegInt(dest, src);
        } else if opcode == BC_NEG_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegLong(dest, src);
        } else if opcode == BC_NEG_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegFloat(dest, src);
        } else if opcode == BC_NEG_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNegDouble(dest, src);

        } else if opcode == BC_MUL_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulInt(dest, lhs, rhs);
        } else if opcode == BC_MUL_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulLong(dest, lhs, rhs);
        } else if opcode == BC_MUL_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulFloat(dest, lhs, rhs);
        } else if opcode == BC_MUL_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitMulDouble(dest, lhs, rhs);

        } else if opcode == BC_DIV_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivInt(dest, lhs, rhs);
        } else if opcode == BC_DIV_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivLong(dest, lhs, rhs);
        } else if opcode == BC_DIV_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivFloat(dest, lhs, rhs);
        } else if opcode == BC_DIV_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitDivDouble(dest, lhs, rhs);

        } else if opcode == BC_MOD_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModInt(dest, lhs, rhs);
        } else if opcode == BC_MOD_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitModLong(dest, lhs, rhs);

        } else if opcode == BC_AND_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndInt(dest, lhs, rhs);
        } else if opcode == BC_AND_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitAndLong(dest, lhs, rhs);

        } else if opcode == BC_OR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrInt(dest, lhs, rhs);
        } else if opcode == BC_OR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitOrLong(dest, lhs, rhs);

        } else if opcode == BC_XOR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorInt(dest, lhs, rhs);
        } else if opcode == BC_XOR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitXorLong(dest, lhs, rhs);

        } else if opcode == BC_NOT_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotBool(dest, src);
        } else if opcode == BC_NOT_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotInt(dest, src);
        } else if opcode == BC_NOT_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitNotLong(dest, src);

        } else if opcode == BC_SHL_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlInt(dest, lhs, rhs);
        } else if opcode == BC_SHR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrInt(dest, lhs, rhs);
        } else if opcode == BC_SAR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarInt(dest, lhs, rhs);

        } else if opcode == BC_ROL_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolInt(dest, lhs, rhs);
        } else if opcode == BC_ROR_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorInt(dest, lhs, rhs);
        } else if opcode == BC_ROL_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRolLong(dest, lhs, rhs);
        } else if opcode == BC_ROR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitRorLong(dest, lhs, rhs);

        } else if opcode == BC_REINTERPRET_FLOAT_AS_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretFloatAsInt(dest, src);

        } else if opcode == BC_REINTERPRET_INT_AS_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretIntAsFloat(dest, src);

        } else if opcode == BC_REINTERPRET_DOUBLE_AS_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretDoubleAsLong(dest, src);

        } else if opcode == BC_REINTERPRET_LONG_AS_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitReinterpretLongAsDouble(dest, src);

        } else if opcode == BC_EXTEND_BYTE_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendByteToChar(dest, src);

        } else if opcode == BC_EXTEND_BYTE_TO_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendByteToInt(dest, src);

        } else if opcode == BC_EXTEND_BYTE_TO_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendByteToLong(dest, src);

        } else if opcode == BC_EXTEND_INT_TO_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendIntToLong(dest, src);

        } else if opcode == BC_EXTEND_CHAR_TO_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitExtendCharToLong(dest, src);

        } else if opcode == BC_CAST_CHAR_TO_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastCharToInt(dest, src);

        } else if opcode == BC_CAST_INT_TO_BYTE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastIntToByte(dest, src);

        } else if opcode == BC_CAST_INT_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastIntToChar(dest, src);

        } else if opcode == BC_CAST_LONG_TO_BYTE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastLongToByte(dest, src);

        } else if opcode == BC_CAST_LONG_TO_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastLongToChar(dest, src);

        } else if opcode == BC_CAST_LONG_TO_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitCastLongToInt(dest, src);

        } else if opcode == BC_CONVERT_INT_TO_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertIntToFloat(dest, src);

        } else if opcode == BC_CONVERT_INT_TO_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertIntToDouble(dest, src);

        } else if opcode == BC_CONVERT_LONG_TO_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertLongToFloat(dest, src);

        } else if opcode == BC_CONVERT_LONG_TO_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitConvertLongToDouble(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT_TO_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloatToInt(dest, src);

        } else if opcode == BC_TRUNCATE_FLOAT_TO_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateFloatToLong(dest, src);

        } else if opcode == BC_TRUNCATE_DOUBLE_TO_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateDoubleToInt(dest, src);

        } else if opcode == BC_TRUNCATE_DOUBLE_TO_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitTruncateDoubleToLong(dest, src);

        } else if opcode == BC_INSTANCE_OF {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitInstanceOf(dest, src, cls);

        } else if opcode == BC_CHECKED_CAST {
            let src = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitCheckedCast(src, cls);

        } else if opcode == BC_SHL_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShlLong(dest, lhs, rhs);
        } else if opcode == BC_SHR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitShrLong(dest, lhs, rhs);
        } else if opcode == BC_SAR_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitSarLong(dest, lhs, rhs);

        } else if opcode == BC_MOV_BOOL {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovBool(dest, src);
        } else if opcode == BC_MOV_BYTE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovByte(dest, src);
        } else if opcode == BC_MOV_CHAR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovChar(dest, src);
        } else if opcode == BC_MOV_INT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovInt(dest, src);
        } else if opcode == BC_MOV_LONG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovLong(dest, src);
        } else if opcode == BC_MOV_FLOAT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovFloat(dest, src);
        } else if opcode == BC_MOV_DOUBLE {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovDouble(dest, src);
        } else if opcode == BC_MOV_PTR {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            self.visitor.visitMovPtr(dest, src);

        } else if opcode == BC_LOAD_FIELD_BOOL {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldBool(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_BYTE {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldByte(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldChar(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_INT {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldInt(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_LONG {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldLong(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldFloat(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldDouble(dest, obj, cls, field);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitLoadFieldPtr(dest, obj, cls, field);

        } else if opcode == BC_STORE_FIELD_BOOL {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldBool(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_BYTE {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldByte(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldChar(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_INT {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldInt(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_LONG {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldLong(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldFloat(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldDouble(src, obj, cls, field);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            let field = self.readFieldId(wide);
            self.visitor.visitStoreFieldPtr(src, obj, cls, field);

        } else if opcode == BC_LOAD_GLOBAL_BOOL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalBool(dest, glob);
        } else if opcode == BC_LOAD_GLOBAL_BYTE {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalByte(dest, glob);
        } else if opcode == BC_LOAD_FIELD_CHAR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalChar(dest, glob);
        } else if opcode == BC_LOAD_FIELD_INT {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalInt(dest, glob);
        } else if opcode == BC_LOAD_FIELD_LONG {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalLong(dest, glob);
        } else if opcode == BC_LOAD_FIELD_FLOAT {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalFloat(dest, glob);
        } else if opcode == BC_LOAD_FIELD_DOUBLE {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalDouble(dest, glob);
        } else if opcode == BC_LOAD_FIELD_PTR {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitLoadGlobalPtr(dest, glob);

        } else if opcode == BC_STORE_GLOBAL_BOOL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalBool(src, glob);
        } else if opcode == BC_STORE_GLOBAL_BYTE {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalByte(src, glob);
        } else if opcode == BC_STORE_FIELD_CHAR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalChar(src, glob);
        } else if opcode == BC_STORE_FIELD_INT {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalInt(src, glob);
        } else if opcode == BC_STORE_FIELD_LONG {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalLong(src, glob);
        } else if opcode == BC_STORE_FIELD_FLOAT {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalFloat(src, glob);
        } else if opcode == BC_STORE_FIELD_DOUBLE {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalDouble(src, glob);
        } else if opcode == BC_STORE_FIELD_PTR {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            self.visitor.visitStoreGlobalPtr(src, glob);

        } else if opcode == BC_PUSH_REGISTER {
            let src = self.readRegister(wide);
            self.visitor.visitPushRegister(src);

        } else if opcode == BC_CONST_NIL {
            let dest = self.readRegister(wide);
            self.visitor.visitConstNil(dest);
        } else if opcode == BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstTrue(dest);
        } else if opcode == BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstFalse(dest);
        } else if opcode == BC_CONST_ZERO_BYTE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroByte(dest);
        } else if opcode == BC_CONST_ZERO_CHAR {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroChar(dest);
        } else if opcode == BC_CONST_ZERO_INT {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroInt(dest);
        } else if opcode == BC_CONST_ZERO_LONG {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroLong(dest);
        } else if opcode == BC_CONST_ZERO_FLOAT {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroFloat(dest);
        } else if opcode == BC_CONST_ZERO_DOUBLE {
            let dest = self.readRegister(wide);
            self.visitor.visitConstZeroDouble(dest);
        } else if opcode == BC_CONST_BYTE {
            let dest = self.readRegister(wide);
            let value = self.readByte().toByte();
            self.visitor.visitConstByte(dest, value);
        } else if opcode == BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstChar(dest, idx);
        } else if opcode == BC_CONST_INT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstInt(dest, idx);
        } else if opcode == BC_CONST_LONG {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstLong(dest, idx);
        } else if opcode == BC_CONST_FLOAT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstFloat(dest, idx);
        } else if opcode == BC_CONST_DOUBLE {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstDouble(dest, idx);
        } else if opcode == BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitConstString(dest, idx);

        } else if opcode == BC_TEST_EQ_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqPtr(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_PTR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNePtr(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqBool(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_BOOL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeBool(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqByte(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeByte(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtByte(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeByte(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtByte(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_BYTE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeByte(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtChar(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_CHAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeChar(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqEnum(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_ENUM {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeEnum(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtInt(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_INT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeInt(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtLong(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_LONG {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeLong(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtFloat(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_FLOAT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeFloat(dest, lhs, rhs);

        } else if opcode == BC_TEST_EQ_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestEqDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_NE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestNeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_GE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestGeDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LT_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLtDouble(dest, lhs, rhs);
        } else if opcode == BC_TEST_LE_DOUBLE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            self.visitor.visitTestLeDouble(dest, lhs, rhs);

        } else if opcode == BC_ASSERT {
            let value = self.readRegister(wide);
            self.visitor.visitAssert(value);

        } else if opcode == BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            self.visitor.visitJumpLoop(offset);

        } else if opcode == BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfFalse(opnd, offset);
        } else if opcode == BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfFalseConst(opnd, idx);
        } else if opcode == BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            self.visitor.visitJumpIfTrue(opnd, offset);
        } else if opcode == BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpIfTrueConst(opnd, idx);
        } else if opcode == BC_JUMP {
            let offset = self.readOffset(wide);
            self.visitor.visitJump(offset);
        } else if opcode == BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            self.visitor.visitJumpConst(idx);

        } else if opcode == BC_INVOKE_DIRECT_VOID {
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectVoid(fct, count);
        } else if opcode == BC_INVOKE_DIRECT_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectBool(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectByte(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectChar(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectInt(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectLong(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectFloat(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectDouble(dest, fct, count);
        } else if opcode == BC_INVOKE_DIRECT_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeDirectPtr(dest, fct, count);

        } else if opcode == BC_INVOKE_VIRTUAL_VOID {
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualVoid(fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualBool(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualByte(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualChar(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualInt(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualLong(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualFloat(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualDouble(dest, fct, count);
        } else if opcode == BC_INVOKE_VIRTUAL_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeVirtualPtr(dest, fct, count);

        } else if opcode == BC_INVOKE_STATIC_VOID {
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticVoid(fct, count);
        } else if opcode == BC_INVOKE_STATIC_BOOL {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticBool(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_BYTE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticByte(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_CHAR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticChar(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_INT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticInt(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_LONG {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticLong(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_FLOAT {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticFloat(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_DOUBLE {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticDouble(dest, fct, count);
        } else if opcode == BC_INVOKE_STATIC_PTR {
            let dest = self.readRegister(wide);
            let fct = self.readFctId(wide);
            let count = self.readIndex(wide);
            self.visitor.visitInvokeStaticPtr(dest, fct, count);

        } else if opcode == BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let cls = self.readClassDefId(wide);
            self.visitor.visitNewObject(dest, cls);

        } else if opcode == BC_RET_VOID {
            self.visitor.visitRetVoid();
        } else if opcode == BC_RET_BOOL {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetBool(opnd);
        } else if opcode == BC_RET_BYTE {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetByte(opnd);
        } else if opcode == BC_RET_CHAR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetChar(opnd);
        } else if opcode == BC_RET_INT {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetInt(opnd);
        } else if opcode == BC_RET_LONG {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetLong(opnd);
        } else if opcode == BC_RET_FLOAT {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetFloat(opnd);
        } else if opcode == BC_RET_DOUBLE {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetDouble(opnd);
        } else if opcode == BC_RET_PTR {
            let opnd = self.readRegister(wide);
            self.visitor.visitRetPtr(opnd);

        } else {
            fatalError("unkown opcode ${opcode}");
        }
    }

    fun readRegister(wide: Bool) -> BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fun hasWideOperands() -> Bool {
        let data = self.data;
        let value = data(self.pos);

        if value.toInt() == BC_WIDE {
            self.pos = self.pos + 1;
            true
        } else {
            false
        }
    }

    fun readOpcode(wide: Bool) -> Int {
        self.readIndex(wide)
    }

    fun readClassDefId(wide: Bool) -> ClassDefId {
        ClassDefId(self.readIndex(wide))
    }

    fun readGlobalId(wide: Bool) -> GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fun readFieldId(wide: Bool) -> FieldId {
        FieldId(self.readIndex(wide))
    }

    fun readFctId(wide: Bool) -> FctId {
        FctId(self.readIndex(wide))
    }

    fun readConstPoolId(wide: Bool) -> ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fun readOffset(wide: Bool) -> Int {
        self.readIndex(wide)
    }

    fun readIndex(wide: Bool) -> Int {
        if wide {
            self.readInt()
        } else {
            self.readByte()
        }
    }

    fun readByte() -> Int {
        let data = self.data;
        let value = data(self.pos);
        self.pos = self.pos + 1;

        value.toInt()
    }

    fun readInt() -> Int {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24) | (by3 << 16) | (by2 << 8) | by1
    }
}
