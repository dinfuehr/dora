fun dumpGraph(graph: Graph): String {
    GraphDumper(graph).dump()
}

class GraphDumper(let graph: Graph) {
    let buffer: StringBuffer = StringBuffer();

    fun dump(): String {
        for block in self.graph.insertionOrderIterator() {
            self.dumpBlock(block);
        }

        self.buffer.toString()
    }

    fun dumpBlock(block: Block) {
        self.buffer.append("Block ${block.id}:");

        if !block.predecessors.isEmpty() {
            self.buffer.append(" pred = [");
            var first: Bool = true;

            for pred in block.predecessors {
                if first {
                    self.buffer.append("${pred.from.id}");
                } else {
                    self.buffer.append(", ${pred.from.id}");
                }

                first = false;
            }

            self.buffer.append("]");
        }

        if !block.successors.isEmpty() {
            self.buffer.append(" succ = [");
            var first: Bool = true;

            for succ in block.successors {
                if first {
                    self.buffer.append("${succ.to.id}");
                } else {
                    self.buffer.append(", ${succ.to.id}");
                }

                first = false;
            }

            self.buffer.append("]");
        }

        self.buffer.appendNewline();

        for inst in block.phisIterator() {
            self.dumpInst(inst);
        }

        for inst in block.instructionsIterator() {
            self.dumpInst(inst);
        }
    }

    fun dumpInst(inst: Inst) {
        self.buffer.append("  ${inst.id}: ${inst.dumpName()}");

        if !inst.inputs.isEmpty() {
            var first = true;

            for inp in inst.inputs {
                if first {
                    self.buffer.append(" ${inp.value.id}");
                } else {
                    self.buffer.append(", ${inp.value.id}");
                }

                first = false;
            }
        }

        if inst.hasUses() {
            var current = inst.useListHead;

            self.buffer.append(" [");
            var first = true;

            while current.isSome() {
                let c = current.unwrap();

                if first {
                    self.buffer.append("${c.usedBy.id}");
                } else {
                    self.buffer.append(", ${c.usedBy.id}");
                }

                current = c.nextUse;
                first = false;
            }

            self.buffer.append("]");
        }

        self.buffer.appendNewline();
    }
}

fun assertGraph(graph: Graph, output: String) {
    let graphOutput = dumpGraph(graph);

    if !compareStrings(graphOutput, output) {
        println("got: \"${graphOutput}\"");
        println("expected: \"${output}\"");

        for idx in range(0, graphOutput.size().toInt32()) {
            let value = graphOutput.getByte(idx.toInt64());
            print("${value.toInt32().toStringHex()} ");
        }

        println("");

        for idx in range(0, output.size().toInt32()) {
            let value = output.getByte(idx.toInt64());
            print("${value.toInt32().toStringHex()} ");
        }

        println("");

        fatalError("output does not match");
    }
}

fun compareStrings(lhs: String, rhs: String): Bool {
    var lhsIterator = lhs.codePoints();
    var rhsIterator = rhs.codePoints();

    skipWhite(lhsIterator);
    skipWhite(rhsIterator);

    while true {
        if !lhsIterator.hasNext() && !rhsIterator.hasNext() {
            return true;
        } else if !lhsIterator.hasNext() || !rhsIterator.hasNext() {
            return false;
        }

        var lhsChar = lhsIterator.next();
        var rhsChar = rhsIterator.next();

        if lhsChar == rhsChar {
            continue;
        }

        if lhsChar == 0xDY.toChar() && lhsIterator.hasNext() && lhsIterator.peek() == 0xAY.toChar() {
            lhsChar = lhsIterator.next();
        }

        if rhsChar == 0xDY.toChar() && rhsIterator.hasNext() && rhsIterator.peek() == 0xAY.toChar() {
            rhsChar = rhsIterator.next();
        }

        if lhsChar != rhsChar {
            return false;
        }
    }

    false
}

fun skipWhite(it: CodepointIterator) {
    while it.hasNext() {
        let ch = it.peek();

        if isWhite(ch) {
            it.next();
        } else {
            break;
        }
    }
}

fun isWhite(ch: Char): Bool {
    ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r'
}