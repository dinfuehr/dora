class TestRetVoidVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitRetVoid() {
        self.found = true;
    }
}

@test fun testBytecodeRetVoid(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRetVoid();
    let fct = writer.generate();
    let visitor = TestRetVoidVisitor();
    assert(fct.codeAt(0) == BC_RET_VOID);
    assert(fct.code.size() == 1L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestRetIntVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitRetInt32(opnd: BytecodeRegister) {
        assert(opnd == BytecodeRegister(17));
        self.found = true;
    }
}

@test fun testBytecodeRetInt(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRetInt32(BytecodeRegister(17));
    let fct = writer.generate();
    let visitor = TestRetIntVisitor();
    assert(fct.codeAt(0) == BC_RET_INT32);
    assert(fct.codeAt(1) == 17);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestRetWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitRetInt32(opnd: BytecodeRegister) {
        assert(opnd == BytecodeRegister(256));
        self.found = true;
    }
}

@test fun testBytecodeRetWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitRetInt32(BytecodeRegister(256));
    let fct = writer.generate();
    let visitor = TestRetWideVisitor();
    assert(fct.codeAt(0) == BC_WIDE);
    assert(fct.codeAt(1) == BC_RET_INT32);
    assert(fct.codeInt32At(2) == 256);
    assert(fct.code.size() == 6L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestMovVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        assert(dest == BytecodeRegister(0));
        assert(src == BytecodeRegister(1));
        self.found = true;
    }
}

@test fun testBytecodeMov(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitMovInt32(BytecodeRegister(0), BytecodeRegister(1));
    let fct = writer.generate();
    let visitor = TestMovVisitor();
    assert(fct.codeAt(0) == BC_MOV_INT32);
    assert(fct.codeAt(1) == 0);
    assert(fct.codeAt(2) == 1);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestMovWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        assert(dest == BytecodeRegister(256));
        assert(src == BytecodeRegister(255));
        self.found = true;
    }
}

@test fun testBytecodeMovWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitMovInt32(BytecodeRegister(256), BytecodeRegister(255));
    let fct = writer.generate();
    let visitor = TestMovWideVisitor();
    assert(fct.codeAt(0) == BC_WIDE);
    assert(fct.codeAt(1) == BC_MOV_INT32);
    assert(fct.codeInt32At(2) == 256);
    assert(fct.codeInt32At(6) == 255);
    assert(fct.code.size() == 10L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstByteVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) {
        assert(dest == BytecodeRegister(255));
        assert(value == 255Y);
        self.found = true;
    }
}

@test fun testBytecodeConstByte(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstByte(BytecodeRegister(255), 255Y);
    let fct = writer.generate();
    let visitor = TestConstByteVisitor();
    assert(fct.codeAt(0) == BC_CONST_UINT8);
    assert(fct.codeAt(1) == 255);
    assert(fct.codeAt(2) == 255);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstByteWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) {
        assert(dest == BytecodeRegister(256));
        assert(value == 255Y);
        self.found = true;
    }
}

@test fun testBytecodeConstByteWide(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstByte(BytecodeRegister(256), 255Y);
    let fct = writer.generate();
    let visitor = TestConstByteWideVisitor();
    assert(fct.codeAt(0) == BC_WIDE);
    assert(fct.codeAt(1) == BC_CONST_UINT8);
    assert(fct.codeInt32At(2) == 256);
    assert(fct.codeAt(6) == 255);
    assert(fct.code.size() == 7L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestConstStringVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) {
        assert(dest == BytecodeRegister(7));
        assert(idx == ConstPoolId(0));
        self.found = true;
    }
}

@test fun testBytecodeConstString(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitConstString(BytecodeRegister(7), "foo");
    let fct = writer.generate();
    let visitor = TestConstStringVisitor();
    assert(fct.codeAt(0) == BC_CONST_STRING);
    assert(fct.codeAt(1) == 7);
    assert(fct.codeAt(2) == 0);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestSubFloat32Visitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        assert(dest == BytecodeRegister(2));
        assert(lhs == BytecodeRegister(9));
        assert(rhs == BytecodeRegister(255));
        self.found = true;
    }
}

@test fun testBytecodeSubFloat32(_x: Testing) {
    let writer = BytecodeWriter();
    writer.emitSubFloat32(BytecodeRegister(2), BytecodeRegister(9), BytecodeRegister(255));
    let fct = writer.generate();
    let visitor = TestSubFloat32Visitor();
    assert(fct.codeAt(0) == BC_SUB_FLOAT32);
    assert(fct.codeAt(1) == 2);
    assert(fct.codeAt(2) == 9);
    assert(fct.codeAt(3) == 255);
    assert(fct.code.size() == 4L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpBackVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitJumpLoop(offset: Int32) {
        assert(offset == 0);
        self.found = true;
    }
}

@test fun testBytecodeJumpBack(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.defineLabel();
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let visitor = TestJumpBackVisitor();
    assert(fct.codeAt(0) == BC_JUMP_LOOP);
    assert(fct.codeAt(1) == 0);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpBackWideVisitor: BytecodeVisitor {
    var found: Int32 = 0;

    @override fun visitJumpLoop(offset: Int32) {
        assert(offset == 256);
        self.found = self.found + 1;
    }

    @override fun visitRetVoid() {
        self.found = self.found + 1;
    }
}

@test fun testBytecodeJumpBackWide(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.defineLabel();
    var i = 0;
    while i < 256 {
        writer.emitRetVoid();
        i = i + 1;
    }
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let visitor = TestJumpBackWideVisitor();
    assert(fct.codeAt(0) == BC_RET_VOID);
    assert(fct.codeAt(255) == BC_RET_VOID);
    assert(fct.codeAt(256) == BC_WIDE);
    assert(fct.codeAt(257) == BC_JUMP_LOOP);
    assert(fct.codeInt32At(258) == 256);
    assert(fct.code.size() == 262L);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257);
}

class TestJumpVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitJump(offset: Int32) {
        assert(offset == 2);
        self.found = true;
    }
}

@test fun testBytecodeJump(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestJumpVisitor();
    assert(fct.codeAt(0) == BC_JUMP);
    assert(fct.codeAt(1) == 2);
    assert(fct.code.size() == 2L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestJumpFarVisitor: BytecodeVisitor {
    var found: Int32 = 0;

    @override fun visitJumpConst(idx: ConstPoolId) {
        assert(idx == ConstPoolId(0));
        self.found = self.found + 1;
    }

    @override fun visitRetVoid() {
        self.found = self.found + 1;
    }
}

@test fun testBytecodeJumpFar(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    var i = 0;
    while i < 256 {
        writer.emitRetVoid();
        i = i + 1;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestJumpFarVisitor();
    assert(fct.codeAt(0) == BC_JUMP_CONST);
    assert(fct.codeAt(1) == 0);
    assert(fct.code.size() == 258L);
    assert(fct.constPool(ConstPoolId(0)).toInt32().unwrap() == 258);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257);
}

class TestCondJumpVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        assert(opnd == BytecodeRegister(9));
        assert(offset == 3);
        self.found = true;
    }
}

@test fun testBytecodeCondJump(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(9), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpVisitor();
    assert(fct.codeAt(0) == BC_JUMP_IF_TRUE);
    assert(fct.codeAt(1) == 9);
    assert(fct.codeAt(2) == 3);
    assert(fct.code.size() == 3L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}

class TestCondJumpFarVisitor: BytecodeVisitor {
    var found: Int32 = 0;

    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        assert(opnd == BytecodeRegister(9));
        assert(idx == ConstPoolId(0));
        self.found = self.found + 1;
    }

    @override fun visitRetVoid() {
        self.found = self.found + 1;
    }
}

@test fun testBytecodeCondJumpFar(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfFalse(BytecodeRegister(9), lbl);
    var i = 0;
    while i < 256 {
        writer.emitRetVoid();
        i = i + 1;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpFarVisitor();
    assert(fct.codeAt(0) == BC_JUMP_IF_FALSE_CONST);
    assert(fct.codeAt(1) == 9);
    assert(fct.codeAt(2) == 0);
    assert(fct.codeAt(3) == BC_RET_VOID);
    assert(fct.code.size() == 259L);
    assert(fct.constPool(ConstPoolId(0)).toInt32().unwrap() == 259);
    readBytecode(fct.code, visitor);
    assert(visitor.found == 257);
}

class TestCondJumpWideVisitor: BytecodeVisitor {
    var found: Bool = false;

    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        assert(opnd == BytecodeRegister(256));
        assert(offset == 10);
        self.found = true;
    }
}

@test fun testBytecodeCondJumpWide(_x: Testing) {
    let writer = BytecodeWriter();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(256), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let visitor = TestCondJumpWideVisitor();
    assert(fct.codeAt(0) == BC_WIDE);
    assert(fct.codeAt(1) == BC_JUMP_IF_TRUE);
    assert(fct.codeInt32At(2) == 256);
    assert(fct.codeInt32At(6) == 10);
    assert(fct.code.size() == 10L);
    readBytecode(fct.code, visitor);
    assert(visitor.found);
}
