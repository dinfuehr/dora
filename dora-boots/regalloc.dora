use std::collections::{HashMap, HashSet};

use package::assembler::{FloatRegister, RegMap, RegSet, Register, RegisterType};
use package::codegen::CodeGen;
use package::codegen::{ensureLocationData, STACK_FRAME_ALIGNMENT};
use package::interface::CompilationInfo;
use package::graph::{createGotoInst, createMoveInst, Block, Edge, Graph, Inst, Operand, LocationData, Op, Location, opName, Policy, RegisterTrackers, Type};
use package::ssa_destruction::ssaDestruction;

pub fn performRegisterAllocation(graph: Graph, codegen: CodeGen, ci: CompilationInfo) {
    ensureLocationData(graph, codegen, ci);

    let allocator = SimpleRegisterAllocator::new(graph, codegen);
    allocator.allocateRegisters();

    ssaDestruction(graph, codegen);
}

class SimpleRegisterAllocator {
    graph: Graph,
    codegen: CodeGen,
    registers: Option[RegisterTracker[Register]],
    float_registers: Option[RegisterTracker[FloatRegister]],
    currentStackSize: Int32,
    refs: Vec[Int32],
    currentInst: Option[Inst],
}

impl SimpleRegisterAllocator {
    static fn new(graph: Graph, codegen: CodeGen): SimpleRegisterAllocator {
        SimpleRegisterAllocator(
            graph,
            codegen,
            None[RegisterTracker[Register]],
            None[RegisterTracker[FloatRegister]],
            0i32,
            Vec[Int32]::new(),
            None[Inst],
        )
    }

    fn allocateRegisters() {
        for block in self.graph.reversePostOrderIterator() {
            self.allocateBlock(block);
        }

        let stack_alignment = STACK_FRAME_ALIGNMENT.toInt32();
        self.currentStackSize = (self.currentStackSize + (stack_alignment - 1i32)) & stack_alignment;
        self.graph.setStackSize(self.currentStackSize);
    }

    fn allocateBlock(block: Block) {
        self.initializeRegisters(block);
        block.setTrackerIn(self.snapshotRegisters());

        for inst in block.phisIterator() {
            self.allocatePhi(inst);
        }

        for inst in block.instructionsIterator() {
            self.allocateInstruction(inst);
        }

        block.setTrackerOut(self.snapshotRegisters());
    }

    fn snapshotRegisters(): RegisterTrackers {
        RegisterTrackers(self.registers().clone(), self.float_registers().clone())
    }

    fn initializeRegisters(block: Block) {
        self.registers = Some(RegisterTracker[Register]::new(self.codegen.allocatableRegisters()));
        self.float_registers = Some(RegisterTracker[FloatRegister]::new(self.codegen.allocatableFloatRegisters()));

        if block.isLoopHeader() {
            // For now everything is spilled at the beginning of a loop.
            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());
                self.spill(inst);
            }
        } else {
            let candidates = HashMap[Inst, Int64]::new();
            let all_gp = HashMap[Inst, Register]::new();
            let all_fp = HashMap[Inst, FloatRegister]::new();
            let predecessorCount = block.predecessors.size();

            for predecessorEdge in block.predecessors {
                let predecessor = predecessorEdge.source;
                let trackers = predecessor.getTrackerOut();

                self.processLiveRegisters[Register](all_gp, trackers.gp, block, candidates);
                self.processLiveRegisters[FloatRegister](all_fp, trackers.fp, block, candidates);
            }

            for (inst, reg) in all_gp {
                assert(self.registers().allocateFixedRegister(reg, inst));
            }

            for (inst, reg) in all_fp {
                assert(self.float_registers().allocateFixedRegister(reg, inst));
            }

            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());

                if all_gp.contains(inst) || all_fp.contains(inst) {
                    continue;
                }

                self.spill(inst);
            }
        }
    }

    fn processLiveRegisters[T: RegisterType](all: HashMap[Inst, T], tracker: RegisterTracker[T], block: Block, candidates: HashMap[Inst, Int64]) {
        let predecessorCount = block.predecessors.size();

        for (reg, inst) in tracker.data {
            if !block.getLiveIn().contains(inst.id().toInt64()) {
                continue;
            }

            let current = candidates.get(inst);
            let current = if current.isSome() {
                current.getOrPanic() + 1
            } else {
                1
            };
            if current == predecessorCount {
                assert(all.insert(inst, reg).isNone());
            }
            candidates.insert(inst, current);
        }
    }

    fn allocatePhi(inst: Inst) {
        if inst.getValueType().isAnyFloat() {
            self.allocatePhiGeneric[FloatRegister](self.float_registers(), inst);
        } else {
            self.allocatePhiGeneric[Register](self.registers(), inst);
        }
    }

    fn allocatePhiGeneric[T: RegisterType](registers: RegisterTracker[T], inst: Inst) {
        let register = registers.allocateRegister(inst);

        if register.isSome() {
            let loc = inst.getLocationData();
            let register = register.getOrPanic();
            loc.initOutput(register.toLocation());
        } else {
            self.spill(inst);
        }
    }

    fn allocateInstruction(inst: Inst) {
        assert(self.registers().protected.isEmpty());
        assert(self.float_registers().protected.isEmpty());

        self.currentInst = Some(inst);
        self.allocateFixedRegisters(inst);
        self.allocateFixedOutputRegister(inst);
        self.allocateArbitraryRegisters(inst);

        if inst.isCall() {
            self.spillLiveRegisters(inst);
        }

        self.allocateOutputRegister(inst);

        self.registers().protected.clear();
        self.float_registers().protected.clear();

        self.freeDeadValues(inst);
        self.currentInst = None[Inst];
    }

    fn spillLiveRegisters(call: Inst) {
        for (reg, inst) in self.registers().data {
            if call === inst {
                // Do not spill output of call instruction.
                continue;
            }

            self.spill(inst);
            self.registers().freeRegisterRaw(reg);
        }

        for (reg, inst) in self.float_registers().data {
            if call === inst {
                // Do not spill output of call instruction.
                continue;
            }

            self.spill(inst);
            self.float_registers().freeRegisterRaw(reg);
        }
    }

    fn allocateFixedRegisters(inst: Inst) {
        assert(self.registers().protected.isEmpty());
        let loc_data = inst.getLocationData();
        
        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();
            let loc = loc_data.getInput(idx);

            if loc.getPolicy().isAnyFixed() {
                self.allocateFixedRegister(loc.getPolicy(), loc.getOperand(), input.getValue());
            }
        }

        for temp in loc_data.getTemps() {
            if temp.getPolicy().isAnyFixed() {
                self.allocateFixedTempRegister(temp.getPolicy(), temp.getOperand());
            }
        }
    }

    fn yieldRegister[T: RegisterType](registers: RegisterTracker[T], reg: T) {
        let inst = registers.data.get(reg).getOrPanic();
        let newReg = registers.allocateRegister(inst);
        registers.data.free(reg);

        if newReg.isSome() {
            let newReg = newReg.getOrPanic();
            let inst = createMoveInst(inst.getValueType(), newReg.toLocation(), reg.toLocation());
            self.currentInst.getOrPanic().insertBefore(inst);
        } else {
            self.spill(inst);
        }
    }

    fn allocateArbitraryRegisters(inst: Inst) {
        let loc_data = inst.getLocationData();

        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();
            let input_loc = loc_data.getInput(idx);

            if input_loc.getPolicy().isAnyArbitraryReg() {
                let register = self.allocateArbitraryRegister(input_loc.getPolicy(), input.getValue());
                loc_data.getInput(idx).setOperand(register);
            }
        }

        for loc in loc_data.getTemps() {
            if loc.getPolicy().isAnyArbitraryReg() {
                let register = self.allocateArbitraryTempRegister(loc.getPolicy());
                loc.setOperand(register);
            }
        }
    }

    fn allocateFixedOutputRegister(inst: Inst) {
        let loc_data = inst.getLocationData();

        if !loc_data.hasOutput() {
            return;
        }

        let output = loc_data.getOutput();

        if !output.getPolicy().isAnyFixed() {
            return;
        }

        if output.getPolicy().isFixedReg() {
            self.allocateFixedOutputRegisterGeneric[Register](output.getRegister(), self.registers(), inst);
        } else {
            assert(output.getPolicy().isFixedFloatReg());
            self.allocateFixedOutputRegisterGeneric[FloatRegister](output.getFloatRegister(), self.float_registers(), inst);
        }
    }

    fn allocateFixedOutputRegisterGeneric[T: RegisterType](dest: T, registers: RegisterTracker[T], inst: Inst) {
        if !registers.allocateFixedRegister(dest, inst) {
            self.yieldRegister[T](registers, dest);
            registers.freeRegister(dest);
            assert(registers.allocateFixedRegister(dest, inst));
        }

        registers.protect(dest);
    }

    fn allocateOutputRegister(inst: Inst) {
        let loc_data = inst.getLocationData();

        if !loc_data.hasOutput() {
            return;
        }

        let output = loc_data.getOutput();

        if output.getPolicy().isAnyFloatReg() {
            self.allocateOutputRegisterGeneric[FloatRegister](self.float_registers(), inst, output);
        } else if output.getPolicy().isAnyReg() {
            self.allocateOutputRegisterGeneric[Register](self.registers(), inst, output);
        } else if output.getPolicy().isSameAsFirstInput() {
            self.allocateOutputRegisterSameAsFirstInput(inst, loc_data, output);
        }
    }

    fn allocateOutputRegisterSameAsFirstInput(inst: Inst, loc_data: LocationData, output: Operand) {
        let input_loc = loc_data.getInput(0);
        let dest = input_loc.getOperand().getRegister();

        if !inst.getInput(0).isKill() {
            self.yieldRegister[Register](self.registers(), dest);
        }

        self.registers().freeRegisterRaw(dest);
        assert(self.registers().allocateFixedRegister(dest, inst));
        assert(self.registers().protected.contains(dest));
        output.setRegister(dest);
    }

    fn allocateOutputRegisterGeneric[T: RegisterType](registers: RegisterTracker[T], inst: Inst, output: Operand) {
        let register = registers.allocateRegister(inst);

        if register.isSome() {
            output.setOperand(register.getOrPanic().toLocation());
        } else {
            let (register, instInReg) = registers.freeUnprotected();
            self.spill(instInReg);
            output.setOperand(register.toLocation());
        }
    }

    fn spill(inst: Inst) {
        let loc_data = inst.getLocationData();
        assert(loc_data.hasOutput());

        if !loc_data.hasSpillSlot() {
            let slot = self.allocateSpillSlot(inst.getValueType());
            loc_data.setSpillSlot(slot);
        }

        assert(loc_data.hasSpillSlot());
    }

    fn allocateSpillSlot(ty: Type): Int32 {
        let (size, alignment) = match ty {
            Type::Bool => (1i32, 1i32),
            Type::Int32 | Type::Float32 => (4i32, 4i32),
            Type::Ptr | Type::Int64 | Type::Float64 => (8i32, 8i32),
            _ => unreachable[(Int32, Int32)](),
        };

        self.currentStackSize = (self.currentStackSize + (alignment - 1i32)) & alignment;
        self.currentStackSize = self.currentStackSize + size;

        let offset = -self.currentStackSize;

        if ty == Type::Ptr {
            self.refs.push(offset);
        }

        offset
    }

    fn freeDeadValues(inst: Inst) {
        let loc_data = inst.getLocationData();

        for input in inst.getInputs() {
            if input.isKill() {
                let value = input.getValue();
                self.registers().free(value);
                self.float_registers().free(value);
            }
        }

        if loc_data.hasOutput() && !inst.hasUses() {
            self.freeRegisterInOperand(loc_data.getOutput().getOperand());
        }

        for temp in loc_data.getTemps() {
            self.freeRegisterInOperand(temp.getOperand());
        }
    }

    fn freeRegisterInOperand(operand: Location) {
        match operand {
            Location::None => unreachable[()](),
            Location::Reg(reg) => self.registers().freeRegister(reg),
            Location::FloatReg(reg) => self.float_registers().freeRegister(reg),
            Location::Stack(slot) => unreachable[()](),
        }
    }

    fn allocateArbitraryRegister(policy: Policy, value: Inst): Location {
        if policy.isAnyFloatReg() {
            self.allocateArbitraryRegisterGeneric[FloatRegister](self.float_registers(), value)
        } else {
            assert(policy.isAnyReg());
            self.allocateArbitraryRegisterGeneric[Register](self.registers(), value)
        }
    }

    fn allocateArbitraryRegisterGeneric[T: RegisterType](registers: RegisterTracker[T], value: Inst): Location {
        let register = registers.getRegister(value);

        if register.isSome() {
            let register = register.getOrPanic();
            registers.protect(register);
            return register.toLocation();
        }

        let register = registers.allocateRegister(value);

        if register.isSome() {
            let register = register.getOrPanic();
            self.emitReloadInst(register.toLocation(), value);
            registers.protect(register);
            return register.toLocation();
        }

        let (register, instInReg) = registers.freeUnprotected();
        self.spill(instInReg);
        registers.allocateFixedRegister(register, value);
        registers.protect(register);
        self.emitReloadInst(register.toLocation(), value);
        register.toLocation()
    }

    fn emitReloadInst(dest: Location, value: Inst) {
        let slot = value.getLocationData().getSpillSlot();
        let inst = createMoveInst(value.getValueType(), dest, Location::Stack(slot));
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateArbitraryTempRegister(policy: Policy): Location {
        if policy.isAnyFloatReg() {
            self.allocateArbitraryTempRegisterGeneric[FloatRegister](self.float_registers())
        } else {
            assert(policy.isAnyReg());
            self.allocateArbitraryTempRegisterGeneric[Register](self.registers())
        }
    }

    fn allocateArbitraryTempRegisterGeneric[T: RegisterType](registers: RegisterTracker[T]): Location {
        let register = registers.allocateTempRegister();

        if register.isSome() {
            let register = register.getOrPanic();
            registers.protect(register);
            return register.toLocation();
        }

        let (register, instInReg) = registers.freeUnprotected();
        registers.protect(register);
        self.spill(instInReg);
        register.toLocation()
    }

    fn allocateFixedRegister(policy: Policy, dest: Location, inst: Inst) {
        if policy.isFixedReg() {
            self.allocateFixedRegisterGeneric[Register](dest.getRegister(), self.registers(), inst);
        } else {
            assert(policy.isFixedFloatReg());
            self.allocateFixedRegisterGeneric[FloatRegister](dest.getFloatRegister(), self.float_registers(), inst);
        }
    }

    fn allocateFixedRegisterGeneric[T: RegisterType + std::Equals](dest: T, registers: RegisterTracker[T], inst: Inst) {
        let current = registers.getRegister(inst);

        if current.isSome() && current.getOrPanic().equals(dest) {
            return;
        }

        if !registers.allocateFixedRegister(dest, inst) {
            self.yieldRegister[T](registers, dest);
            registers.freeRegister(dest);
            assert(registers.allocateFixedRegister(dest, inst));
        }

        registers.protect(dest);

        let source = if current.isSome() {
            current.getOrPanic().toLocation()
        } else {
            let slot = inst.getLocationData().getSpillSlot();
            Location::Stack(slot)
        };

        let inst = createMoveInst(inst.getValueType(), dest.toLocation(), source);
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateFixedTempRegister(policy: Policy, reg: Location) {
        if policy.isFixedReg() {
            self.allocateFixedTempRegisterGeneric[Register](reg.getRegister(), self.registers());
        } else {
            assert(policy.isFixedFloatReg());
            self.allocateFixedTempRegisterGeneric[FloatRegister](reg.getFloatRegister(), self.float_registers());
        }
    }

    fn allocateFixedTempRegisterGeneric[T: RegisterType](reg: T, registers: RegisterTracker[T]) {
        if !registers.allocateFixedTempRegister(reg) {
            self.yieldRegister[T](registers, reg);
            registers.freeRegister(reg);
            assert(registers.allocateFixedTempRegister(reg));
        }
        registers.protect(reg);
    }

    fn registers(): RegisterTracker[Register] {
        self.registers.getOrPanic()
    }

    fn float_registers(): RegisterTracker[FloatRegister] {
        self.float_registers.getOrPanic()
    }
}

pub class RegisterTracker[T: RegisterType] {
    allocatable: RegSet[T],
    free: RegSet[T],
    protected: RegSet[T],
    pub data: RegMap[T, Inst],
    locations: HashMap[Inst, T],
}

impl[T: RegisterType] RegisterTracker[T] {
    static fn new(allocatable: RegSet[T]): RegisterTracker[T] {
        RegisterTracker(
            allocatable.clone(),
            allocatable.clone(),
            RegSet[T]::new(),
            RegMap[T, Inst]::new(allocatable),
            HashMap[Inst, T]::new(),
        )
    }

    pub fn getRegister(inst: Inst): Option[T] {
        self.locations.get(inst)
    }

    fn protect(reg: T) {
        self.protected.add(reg);
    }

    fn unprotect(reg: T) {
        self.protected.remove(reg);
    }

    fn allocateFixedRegister(reg: T, value: Inst): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            self.data.pick(reg, value);
            self.locations.insert(value, reg);
            true
        } else {
            false
        }
    }

    fn allocateFixedTempRegister(reg: T): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            true
        } else {
            false
        }
    }

    fn allocateRegister(value: Inst): Option[T] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
            self.data.pick(reg, value);
            self.locations.insert(value, reg);
        }

        result
    }

    fn allocateTempRegister(): Option[T] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
        }

        result
    }

    fn free(inst: Inst) {
        let reg = self.getRegister(inst);

        if reg.isSome() {
            let reg = reg.getOrPanic();
            self.free.add(reg);
            self.data.free(reg);
        }

        self.locations.remove(inst);
    }

    fn freeRegister(reg: T) {
        assert(!self.protected.contains(reg));
        self.freeRegisterRaw(reg);
    }

    fn freeRegisterRaw(reg: T) {
        assert(!self.free.contains(reg));
        self.free.add(reg);
        let inst = self.data.free(reg);
        if inst.isSome() {
            self.locations.remove(inst.getOrPanic());
        }
    }

    fn freeUnprotected(): (T, Inst) {
        assert(self.free.intersect(self.allocatable).isEmpty());
        let usedButUnprotected = self.allocatable.difference(self.protected);
        let reg = usedButUnprotected.first().getOrPanic();
        self.free.add(reg);
        let inst = self.data.free(reg).getOrPanic();
        self.locations.remove(inst);
        (reg, inst)
    }

    fn clone(): RegisterTracker[T] {
        RegisterTracker(
            self.allocatable.clone(),
            self.free.clone(),
            self.protected.clone(),
            self.data.clone(),
            self.locations.clone(),
        )
    }
}
