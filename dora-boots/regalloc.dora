use std::collections::HashMap;

use package::assembler::{RegMap, RegSet, Register};
use package::codegen::CodeGen;
use package::codegen::{emitInst, CodeDescriptor, setLocationConstraints};
use package::graph::{createGotoInst, createMove, Block, Edge, Graph, Inst, Location, LocationData, Op, opName};

pub fn performRegisterAllocation(graph: Graph, codegen: CodeGen) {
    ensureLocationData(graph, codegen);

    let allocator = SimpleRegisterAllocator::new(graph, codegen);
    allocator.allocateRegisters();

    ssaDestruction(graph, codegen);
}

fn ensureLocationData(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for inst in block.phisIterator() {
            setLocationConstraints(codegen, inst);
        }

        for inst in block.instructionsIterator() {
            setLocationConstraints(codegen, inst);
        }
    }
}

class SimpleRegisterAllocator {
    graph: Graph,
    codegen: CodeGen,
    tracker: InstTracker,
}

impl SimpleRegisterAllocator {
    static fn new(graph: Graph, codegen: CodeGen): SimpleRegisterAllocator {
        SimpleRegisterAllocator(
            graph,
            codegen,
            InstTracker::new(codegen.allocatableRegisters()),
        )
    }

    fn allocateRegisters() {
        for block in self.graph.reversePostOrderIterator() {
            self.setupTracker(block);
            block.setTrackerIn(self.tracker.clone());

            for inst in block.phisIterator() {
                let loc = inst.getLocationData();

                // pick a register
                let register = self.tracker.allocateRegister(inst).getOrPanic();
                loc.getOutput().setRegister(register);
                
            }

            for inst in block.instructionsIterator() {
                let loc = inst.getLocationData();
                let mut idx = 0;

                for input in inst.getInputs() {
                    let register = self.tracker.getRegister(input.getValue());
                    loc.getInput(idx).setRegister(register);
                    idx = idx + 1;
                }

                if loc.hasOutput() {
                    let output = loc.getOutput();

                    if output.hasRegister() {
                        // fixed register was already assigned
                        self.tracker.allocateFixedRegister(output.getRegister(), inst);
                    } else {
                        // pick a register
                        let register = self.tracker.allocateRegister(inst).getOrPanic();
                        output.setRegister(register);
                    }
                }

                for input in inst.getInputs() {
                    let value = input.getValue();

                    if value.getLastUse() === input {
                        self.tracker.free(value);
                    }
                }

            }

            block.setTrackerOut(self.tracker);
        }
    }

    fn setupTracker(block: Block) {
        let dominator = block.getDominator();

        if dominator.isNone() {
            assert(block === self.graph.getEntryBlock());
            return;
        }

        let dominator = dominator.getOrPanic();
        self.tracker = dominator.getTrackerOut().clone();
        self.tracker.unionWithLiveIn(block);
    }
}

fn ssaDestruction(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for predecessorEdge in block.predecessors {
            let predecessor = predecessorEdge.source;
            let moves = ParallelMoveResolver::new();

            for phi in block.phisIterator() {
                let phiDestRegister = phi.getLocationData().getOutput().getRegister();
                let value = phi.getInput(predecessorEdge.targetIdx).getValue();

                // Critical edges should already be split.
                assert(predecessor.successors.size() == 1);

                let valueRegister = value.getLocationData().getOutput().getRegister();

                moves.add(phiDestRegister, valueRegister);
            }

            moves.resolve(codegen.getScratchRegister());
            moves.emitMoves(predecessor);
        }
    }
}

pub class InstTracker {
    allocatable: RegSet,
    data: RegMap[Inst],
    locations: HashMap[Inst, Register],
}

impl InstTracker {
    static fn new(allocatable: RegSet): InstTracker {
        InstTracker(
            allocatable,
            RegMap[Inst]::new(allocatable),
            HashMap[Inst, Register]::new(),
        )
    }

    fn unionWithLiveIn(block: Block) {
        let dead = Vec[(Register, Inst)]::new();

        for (reg, inst) in self.data {
            if !block.getLiveIn().contains(inst.id().toInt64()) {
                dead.push((reg, inst));
            }
        }

        for (reg, inst) in dead {
            self.data.free(reg);
            self.locations.remove(inst);
        }
    }

    fn getRegister(inst: Inst): Register {
        self.locations.get(inst).getOrPanic()
    }

    fn allocateFixedRegister(reg: Register, value: Inst) {
        self.data.pick(reg, value);
        self.locations.insert(value, reg);
    }

    fn allocateRegister(value: Inst): Option[Register] {
        let result = self.data.acquire(value);
        if result.isSome() {
            self.locations.insert(value, result.getOrPanic());
        }
        result
    }

    fn free(inst: Inst) {
        let reg = self.getRegister(inst);
        self.data.free(reg);
        self.locations.remove(inst);
    }

    fn clone(): InstTracker {
        InstTracker(
            self.allocatable,
            self.data.clone(),
            self.locations.clone(),
        )
    }
}

enum InstLocation {
    None,
    Register(Register),
    Stack(Int32),
}

class ParallelMoveResolver {
    moves: Vec[(Register, Register)],
    orderedMoves: Vec[(Register, Register)],
    // All written registers.
    directpreds: HashMap[Register, Register],
    // All used variables and their current location.
    locations: HashMap[Register, Register],
    todo: RegSet,
}

impl ParallelMoveResolver {
    static fn new(): ParallelMoveResolver {
        ParallelMoveResolver(
            Vec[(Register, Register)]::new(),
            Vec[(Register, Register)]::new(),
            HashMap[Register, Register]::new(),
            HashMap[Register, Register]::new(),
            RegSet::new(),
        )
    }

    fn add(dest: Register, src: Register) {
        if dest == src { return; }
        self.moves.push((dest, src));
    }

    fn resolve(scratch: Register) {
        for (dest, src) in self.moves {
            assert(!self.directpreds.contains(dest));
            self.directpreds.insert(dest, src);
            self.locations.insert(src, src);
            assert(!self.todo.contains(dest));
            self.todo.add(dest);
        }

        for (dest, src) in self.moves {
            if !self.locations.contains(dest) {
                assert(self.todo.contains(dest));
                self.emitMoveChainStartingAt(dest);
            }
        }

        while !self.todo.isEmpty() {
            let dest = self.todo.first().getOrPanic();
            assert(self.inCycle(dest));
            self.emitOrderedMove(scratch, dest);
            self.locations.insert(dest, scratch);
            self.emitMoveChainStartingAt(dest);
        }
    }

    fn inCycle(reg: Register): Bool {
        let start = reg;
        let mut reg = reg;
        assert(self.todo.contains(reg));

        while self.directpreds.contains(reg) {
            reg = self.directpreds.get(reg).getOrPanic();
            assert(self.todo.contains(reg));

            if reg == start {
                return true;
            }
        }

        false
    }

    fn emitMoveChainStartingAt(dest: Register) {
        let mut dest = dest;
        assert(self.todo.contains(dest));

        while self.todo.contains(dest) {
            let original_src = self.directpreds.get(dest).getOrPanic();
            let actual_src = self.locations.get(original_src).getOrPanic();
            self.emitOrderedMove(dest, actual_src);
            self.locations.insert(original_src, dest);
            assert(self.todo.remove(dest));

            if !self.directpreds.contains(original_src) {
                return;
            }

            dest = original_src;
        }
    }

    fn emitOrderedMove(dest: Register, src: Register) {
        self.orderedMoves.push((dest, src));
    }

    fn emitMoves(block: Block) {
        for (dest, src) in self.orderedMoves {
            let inst = createMove(dest, src);
            let terminator = block.lastInst();
            assert(terminator.isTerminator());
            block.insertBefore(inst, terminator);
        }
    }
}

@Test
fn testMovesWithoutDependencies() {
    let moves = ParallelMoveResolver::new();
    moves.add(Register(1u8), Register(0u8));
    moves.add(Register(3u8), Register(2u8));
    moves.resolve(Register(10u8));

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.0 == moves.moves(idx).0);
        assert(move.1 == moves.moves(idx).1);
        idx = idx + 1;
    }
}

@Test
fn testMovesWithDependency() {
    let moves = ParallelMoveResolver::new();
    moves.add(Register(1u8), Register(0u8));
    moves.add(Register(2u8), Register(1u8));
    moves.resolve(Register(10u8));

    let expected = Array[(Register, Register)]::new(
        (Register(2u8), Register(1u8)),
        (Register(1u8), Register(0u8)),
    );

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.0 == expected(idx).0);
        assert(move.1 == expected(idx).1);
        idx = idx + 1;
    }
}

@Test
fn testMovesWithCycle() {
    let moves = ParallelMoveResolver::new();
    moves.add(Register(1u8), Register(0u8));
    moves.add(Register(2u8), Register(1u8));
    moves.add(Register(0u8), Register(2u8));
    moves.resolve(Register(3u8));

    let expected = Array[(Register, Register)]::new(
        (Register(3u8), Register(0u8)),
        (Register(0u8), Register(2u8)),
        (Register(2u8), Register(1u8)),
        (Register(1u8), Register(3u8)),
    );

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.0 == expected(idx).0);
        assert(move.1 == expected(idx).1);
        idx = idx + 1;
    }
}
