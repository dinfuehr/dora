use std::collections::{HashMap, HashSet};

use package::assembler::{RegMap, RegSet, Register};
use package::CompilationData;
use package::codegen::CodeGen;
use package::codegen::{emitInst, CodeDescriptor, setLocationConstraints, STACK_FRAME_ALIGNMENT};
use package::graph::{createGotoInst, createMoveInst, Block, Edge, Graph, Inst, Location, LocationData, Op, Operand, opName, Type};

pub fn performRegisterAllocation(cd: CompilationData) {
    ensureLocationData(cd.graph, cd.codegen);

    let allocator = SimpleRegisterAllocator::new(cd);
    allocator.allocateRegisters();

    ssaDestruction(cd.graph, cd.codegen);
}

fn ensureLocationData(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for inst in block.phisIterator() {
            setLocationConstraints(codegen, inst);
        }

        for inst in block.instructionsIterator() {
            setLocationConstraints(codegen, inst);
        }
    }
}

class SimpleRegisterAllocator {
    cd: CompilationData,
    graph: Graph,
    codegen: CodeGen,
    tracker: Option[InstTracker],
    currentStackSize: Int32,
    refs: Vec[Int32],
    currentInst: Option[Inst],
}

impl SimpleRegisterAllocator {
    static fn new(cd: CompilationData): SimpleRegisterAllocator {
        SimpleRegisterAllocator(
            cd,
            cd.graph,
            cd.codegen,
            None[InstTracker],
            0i32,
            Vec[Int32]::new(),
            None[Inst],
        )
    }

    fn allocateRegisters() {
        for block in self.graph.reversePostOrderIterator() {
            self.allocateBlock(block);
        }

        let stack_alignment = STACK_FRAME_ALIGNMENT.toInt32();
        self.currentStackSize = (self.currentStackSize + (stack_alignment - 1i32)) & stack_alignment;
        self.cd.stackSize = Some(self.currentStackSize);
    }

    fn allocateBlock(block: Block) {
        self.initializeInstTracker(block);
        block.setTrackerIn(self.tracker().clone());

        for inst in block.phisIterator() {
            self.allocatePhi(inst);
        }

        for inst in block.instructionsIterator() {
            self.allocateInstruction(inst);
        }

        block.setTrackerOut(self.tracker());
    }

    fn initializeInstTracker(block: Block) {
        self.tracker = Some(InstTracker::new(self.codegen.allocatableRegisters()));

        if block.isLoopHeader() {
            // For now everything is spilled at the beginning of a loop.
            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());
                self.spill(inst);
            }
        } else {
            let candidates = HashMap[Inst, Int64]::new();
            let all = HashMap[Inst, Register]::new();
            let predecessorCount = block.predecessors.size();

            for predecessorEdge in block.predecessors {
                let predecessor = predecessorEdge.source;
                let predecessorTracker = predecessor.getTrackerOut();

                for (reg, inst) in predecessorTracker.data {
                    if !block.getLiveIn().contains(inst.id().toInt64()) {
                        continue;
                    }

                    let current = candidates.get(inst);
                    let current = if current.isSome() {
                        current.getOrPanic() + 1
                    } else {
                        1
                    };
                    if current == predecessorCount {
                        assert(all.insert(inst, reg).isNone());
                    }
                    candidates.insert(inst, current);
                }
            }

            for (inst, reg) in all {
                assert(self.tracker().allocateFixedRegister(reg, inst));
            }

            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());
                if all.contains(inst) {
                    continue;
                }
                self.spill(inst);
            }
        }
    }

    fn allocatePhi(inst: Inst) {
        let register = self.tracker().allocateRegister(inst);

        if register.isSome() {
            let loc = inst.getLocationData();
            loc.getOutput().setRegister(register.getOrPanic());
        } else {
            self.spill(inst);
        }
    }

    fn allocateInstruction(inst: Inst) {
        assert(self.tracker().protected.isEmpty());
        self.currentInst = Some(inst);
        self.allocateFixedRegisters(inst);
        self.allocateArbitraryRegisters(inst);
        self.allocateOutputRegister(inst);
        self.tracker().protected.clear();
        self.freeDeadValues(inst);
        self.currentInst = None[Inst];
    }

    fn allocateFixedRegisters(inst: Inst) {
        assert(self.tracker().protected.isEmpty());
        let loc = inst.getLocationData();
        
        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();

            if loc.getInput(idx).hasRegister() {
                let reg = loc.getInput(idx).getRegister();
                self.allocateFixedRegister(reg, input.getValue());
                self.tracker().protect(reg);
            }
        }

        for temp in loc.getTemps() {
            if temp.hasRegister() {
                let reg = temp.getRegister();
                self.allocateFixedTempRegister(reg);
                self.tracker().protect(reg);
            }
        }

        if loc.hasOutput() && loc.getOutput().hasRegister() {
            let reg = loc.getOutput().getRegister();

            if !self.tracker().allocateFixedRegister(reg, inst) {
                self.yieldRegister(reg);
                self.tracker().freeRegister(reg);
                assert(self.tracker().allocateFixedRegister(reg, inst));
            }

            self.tracker().protect(reg);
        }
    }

    fn yieldRegister(reg: Register) {
        let inst = self.tracker().data.get(reg).getOrPanic();
        let newReg = self.tracker().allocateRegister(inst);

        if newReg.isSome() {
            let newReg = newReg.getOrPanic();
            let inst = createMoveInst(inst.getType(), Operand::Reg(newReg), Operand::Reg(reg));
            self.currentInst.getOrPanic().insertBefore(inst);
        } else {
            self.spill(inst);
        }
    }

    fn allocateArbitraryRegisters(inst: Inst) {
        let loc = inst.getLocationData();

        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();

            if !loc.getInput(idx).hasRegister() {
                let register = self.allocateArbitraryRegister(input.getValue());
                self.tracker().protect(register);
                loc.getInput(idx).setRegister(register);
            }
        }

        for temp in loc.getTemps() {
            if !temp.hasRegister() {
                let register = self.allocateArbitraryTempRegister();
                self.tracker().protect(register);
                temp.setRegister(register);
            }
        }
    }

    fn allocateOutputRegister(inst: Inst) {
        let loc = inst.getLocationData();

        if loc.hasOutput() {
            let output = loc.getOutput();

            if !output.hasRegister() {
                // pick a register
                let register = self.tracker().allocateRegister(inst);

                if register.isSome() {
                    output.setRegister(register.getOrPanic());
                } else {
                    let (register, instInReg) = self.tracker().freeUnprotected();
                    self.spill(instInReg);
                    output.setRegister(register);
                }
            }
        }
    }

    fn spill(inst: Inst) {
        let loc = inst.getLocationData();
        assert(loc.hasOutput());

        if !loc.hasSpillSlot() {
            let slot = self.allocateSpillSlot(inst.getType());
            loc.setSpillSlot(slot);
        }

        assert(loc.hasSpillSlot());
    }

    fn allocateSpillSlot(ty: Type): Int32 {
        let (size, alignment) = match ty {
            Type::Bool => (1i32, 1i32),
            Type::Int32 => (4i32, 4i32),
            Type::Ptr | Type::Int64 => (8i32, 8i32),
            _ => unreachable[(Int32, Int32)](),
        };

        self.currentStackSize = (self.currentStackSize + (alignment - 1i32)) & alignment;
        self.currentStackSize = self.currentStackSize + size;

        let offset = -self.currentStackSize;

        if ty == Type::Ptr {
            self.refs.push(offset);
        }

        offset
    }

    fn freeDeadValues(inst: Inst) {
        let loc = inst.getLocationData();

        for temp in loc.getTemps() {
            self.tracker().freeRegister(temp.getRegister());
        }
    }

    fn allocateArbitraryRegister(value: Inst): Register {
        let register = self.tracker().getRegister(value);

        if register.isSome() {
            return register.getOrPanic();
        }

        let register = self.tracker().allocateRegister(value);

        if register.isSome() {
            let register = register.getOrPanic();
            self.emitReloadInst(register, value);
            return register;
        }

        let (register, instInReg) = self.tracker().freeUnprotected();
        self.spill(instInReg);
        self.tracker().allocateFixedRegister(register, value);
        self.emitReloadInst(register, value);
        register
    }

    fn emitReloadInst(reg: Register, value: Inst) {
        let slot = value.getLocationData().getSpillSlot();
        let inst = createMoveInst(value.getType(), Operand::Reg(reg), Operand::Stack(slot));
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateArbitraryTempRegister(): Register {
        let register = self.tracker().allocateTempRegister();

        if register.isSome() {
            return register.getOrPanic();
        }

        let (register, instInReg) = self.tracker().freeUnprotected();
        self.spill(instInReg);

        register
    }

    fn allocateFixedRegister(reg: Register, inst: Inst) {
        let current = self.tracker().getRegister(inst);

        if current.isSome() && current.getOrPanic() == reg {
            return;
        }

        if !self.tracker().allocateFixedRegister(reg, inst) {
            self.yieldRegister(reg);
            self.tracker().freeRegister(reg);
            assert(self.tracker().allocateFixedRegister(reg, inst));
        }

        let source = if current.isSome() {
            Operand::Reg(current.getOrPanic())
        } else {
            let slot = inst.getLocationData().getSpillSlot();
            Operand::Stack(slot)
        };

        let inst = createMoveInst(inst.getType(), Operand::Reg(reg), source);
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateFixedTempRegister(reg: Register) {
        if !self.tracker().allocateFixedTempRegister(reg) {
            self.yieldRegister(reg);
            self.tracker().freeRegister(reg);
            assert(self.tracker().allocateFixedTempRegister(reg));
        }
    }

    fn tracker(): InstTracker {
        self.tracker.getOrPanic()
    }
}

fn ssaDestruction(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for predecessorEdge in block.predecessors {
            let predecessor = predecessorEdge.source;
            let moves = ParallelMoveResolver::new();

            let blockTracker = block.getTrackerIn();
            let predecessorTracker = predecessor.getTrackerOut();

            for (reg, inst) in blockTracker.data {
                let instRegister = predecessorTracker.getRegister(inst);

                let value = if instRegister.isSome() {
                    Operand::Reg(instRegister.getOrPanic())
                } else {
                    Operand::Stack(inst.getLocationData().getSpillSlot())
                };

                moves.add(inst.getType(), Operand::Reg(reg), value);
            }

            for phi in block.phisIterator() {
                // Critical edges should already be split.
                assert(predecessor.successors.size() == 1);

                let loc = phi.getLocationData();
                let dest = if loc.hasSpillSlot() {
                    Operand::Stack(loc.getSpillSlot())
                } else {
                    Operand::Reg(loc.getOutput().getRegister())
                };

                let value = phi.getInput(predecessorEdge.targetIdx).getValue();
                let valueRegister = predecessorTracker.getRegister(value);

                let value = if valueRegister.isSome() {
                    Operand::Reg(valueRegister.getOrPanic())
                } else {
                    Operand::Stack(value.getLocationData().getSpillSlot())
                };

                moves.add(phi.getType(), dest, value);
            }

            moves.resolve(codegen.getScratchRegister());
            moves.emitMoves(predecessor);
        }
    }
}

pub class InstTracker {
    allocatable: RegSet,
    free: RegSet,
    protected: RegSet,
    data: RegMap[Inst],
    locations: HashMap[Inst, Register],
}

impl InstTracker {
    static fn new(allocatable: RegSet): InstTracker {
        InstTracker(
            allocatable.clone(),
            allocatable.clone(),
            RegSet::new(),
            RegMap[Inst]::new(allocatable),
            HashMap[Inst, Register]::new(),
        )
    }

    fn getRegister(inst: Inst): Option[Register] {
        self.locations.get(inst)
    }

    fn protect(reg: Register) {
        self.protected.add(reg);
    }

    fn allocateFixedRegister(reg: Register, value: Inst): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            self.data.pick(reg, value);
            self.locations.insert(value, reg);
            true
        } else {
            false
        }
    }

    fn allocateFixedTempRegister(reg: Register): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            true
        } else {
            false
        }
    }

    fn allocateRegister(value: Inst): Option[Register] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
            self.data.pick(reg, value);
            self.locations.insert(value, reg);
        }

        result
    }

    fn allocateTempRegister(): Option[Register] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
        }

        result
    }

    fn free(inst: Inst) {
        let reg = self.getRegister(inst);

        if reg.isSome() {
            let reg = reg.getOrPanic();
            self.free.add(reg);
            self.data.free(reg);
        }

        self.locations.remove(inst);
    }

    fn freeRegister(reg: Register) {
        assert(!self.free.contains(reg));
        assert(!self.protected.contains(reg));
        self.free.add(reg);
        let inst = self.data.free(reg);
        if inst.isSome() {
            self.locations.remove(inst.getOrPanic());
        }
    }

    fn freeUnprotected(): (Register, Inst) {
        assert(self.free.union(self.allocatable).isEmpty());
        let usedButUnprotected = self.allocatable.difference(self.protected);
        let reg = usedButUnprotected.first().getOrPanic();
        self.free.add(reg);
        let inst = self.data.free(reg).getOrPanic();
        self.locations.remove(inst);
        (reg, inst)
    }

    fn clone(): InstTracker {
        InstTracker(
            self.allocatable.clone(),
            self.free.clone(),
            self.protected.clone(),
            self.data.clone(),
            self.locations.clone(),
        )
    }
}

enum InstLocation {
    Register(Register),
    Stack(Int32),
}

impl InstLocation {
    fn isRegister(): Bool {
        match self {
            InstLocation::Register(reg) => true,
            InstLocation::Stack(stack) => false,
        }
    }

    fn toRegister(): Option[Register] {
        match self {
            InstLocation::Register(reg) => Some(reg),
            InstLocation::Stack(stack) => None,
        }
    }
}

class ParallelMoveResolver {
    moves: Vec[(Type, Operand, Operand)],
    orderedMoves: Vec[(Type, Operand, Operand)],
    // All written registers.
    directpreds: HashMap[Register, (Register, Type)],
    // All used variables and their current location.
    locations: HashMap[Register, Register],
    todo: RegSet,
}

impl ParallelMoveResolver {
    static fn new(): ParallelMoveResolver {
        ParallelMoveResolver(
            Vec[(Type, Operand, Operand)]::new(),
            Vec[(Type, Operand, Operand)]::new(),
            HashMap[Register, (Register, Type)]::new(),
            HashMap[Register, Register]::new(),
            RegSet::new(),
        )
    }

    fn add(ty: Type, dest: Operand, src: Operand) {
        self.moves.push((ty, dest, src));
    }

    fn addRegister(ty: Type, dest: Register, src: Operand) {
        self.add(ty, Operand::Reg(dest), src);
    }

    fn addStack(ty: Type, dest: Int32, src: Operand) {
        self.add(ty, Operand::Stack(dest), src);
    }

    fn resolve(scratch: Register) {
        for (ty, dest, src) in self.moves {
            if dest.isStack() && src.isRegister() {
                self.orderedMoves.push((ty, dest, src));
            }
        }

        for (ty, dest, src) in self.moves {
            if dest.isStack() && src.isStack() {
                self.orderedMoves.push((ty, Operand::Reg(scratch), src));
                self.orderedMoves.push((ty, dest, Operand::Reg(scratch)));
            }
        }

        for (ty, dest, src) in self.moves {
            if dest.isRegister() && src.isRegister() {
                let dest = dest.getRegister();
                let src = src.getRegister();
                assert(!self.directpreds.contains(dest));
                self.directpreds.insert(dest, (src, ty));
                self.locations.insert(src, src);
                assert(!self.todo.contains(dest));
                self.todo.add(dest);
            }
        }

        for (ty, dest, src) in self.moves {
            if dest.isRegister() && src.isRegister() {
                let dest = dest.getRegister();
                let src = src.getRegister();
                if !self.locations.contains(dest) {
                    assert(self.todo.contains(dest));
                    self.emitMoveChainStartingAt(dest);
                }
            }
        }

        while !self.todo.isEmpty() {
            let dest = self.todo.first().getOrPanic();
            assert(self.inCycle(dest));
            let ty = self.directpreds.get(dest).getOrPanic().1;
            self.emitOrderedMove(ty, scratch, dest);
            self.locations.insert(dest, scratch);
            self.emitMoveChainStartingAt(dest);
        }

        for (ty, dest, src) in self.moves {
            if dest.isRegister() && src.isStack() {
                self.orderedMoves.push((ty, dest, src));
            }
        }
    }

    fn inCycle(reg: Register): Bool {
        let start = reg;
        let mut reg = reg;
        assert(self.todo.contains(reg));

        while self.directpreds.contains(reg) {
            reg = self.directpreds.get(reg).getOrPanic().0;
            assert(self.todo.contains(reg));

            if reg == start {
                return true;
            }
        }

        false
    }

    fn emitMoveChainStartingAt(dest: Register) {
        let mut dest = dest;
        assert(self.todo.contains(dest));

        while self.todo.contains(dest) {
            let (original_src, ty) = self.directpreds.get(dest).getOrPanic();
            let actual_src = self.locations.get(original_src).getOrPanic();
            self.emitOrderedMove(ty, dest, actual_src);
            self.locations.insert(original_src, dest);
            assert(self.todo.remove(dest));

            if !self.directpreds.contains(original_src) {
                return;
            }

            dest = original_src;
        }
    }

    fn emitOrderedMove(ty: Type, dest: Register, src: Register) {
        self.orderedMoves.push((ty, Operand::Reg(dest), Operand::Reg(src)));
    }

    fn emitMoves(block: Block) {
        for (ty, dest, src) in self.orderedMoves {
            let inst = createMoveInst(ty, dest, src);
            let terminator = block.lastInst();
            assert(terminator.isTerminator());
            terminator.insertBefore(inst);
        }
    }
}

@Test
fn testMovesWithoutDependencies() {
    let moves = ParallelMoveResolver::new();
    moves.addRegister(Type::Int64, Register(1u8), Operand::Reg(Register(0u8)));
    moves.addRegister(Type::Int64, Register(3u8), Operand::Reg(Register(2u8)));
    moves.resolve(Register(10u8));

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.1.getRegister() == moves.moves(idx).1.getRegister());
        assert(move.2.getRegister() == moves.moves(idx).2.getRegister());
        idx = idx + 1;
    }
}

@Test
fn testMovesWithDependency() {
    let moves = ParallelMoveResolver::new();
    moves.addRegister(Type::Int64, Register(1u8), Operand::Reg(Register(0u8)));
    moves.addRegister(Type::Int64, Register(2u8), Operand::Reg(Register(1u8)));
    moves.resolve(Register(10u8));

    let expected = Array[(Register, Register)]::new(
        (Register(2u8), Register(1u8)),
        (Register(1u8), Register(0u8)),
    );

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.1.getRegister() == expected(idx).0);
        assert(move.2.getRegister() == expected(idx).1);
        idx = idx + 1;
    }
}

@Test
fn testMovesWithCycle() {
    let moves = ParallelMoveResolver::new();
    moves.addRegister(Type::Int64, Register(1u8), Operand::Reg(Register(0u8)));
    moves.addRegister(Type::Int64, Register(2u8), Operand::Reg(Register(1u8)));
    moves.addRegister(Type::Int64, Register(0u8), Operand::Reg(Register(2u8)));
    moves.resolve(Register(3u8));

    let expected = Array[(Register, Register)]::new(
        (Register(3u8), Register(0u8)),
        (Register(0u8), Register(2u8)),
        (Register(2u8), Register(1u8)),
        (Register(1u8), Register(3u8)),
    );

    let mut idx = 0;
    for move in moves.orderedMoves {
        assert(move.1.getRegister() == expected(idx).0);
        assert(move.2.getRegister() == expected(idx).1);
        idx = idx + 1;
    }
}
