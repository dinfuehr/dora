use std::collections::{HashMap, HashSet};

use package::assembler::{FloatRegister, RegMap, RegSet, Register, RegisterType};
use package::bytecode::data::{ClassId, EnumId, StructId, BytecodeType};
use package::codegen::CodeGen;
use package::codegen::STACK_FRAME_ALIGNMENT;
use package::compilation_info::CompilationInfo;
use package::graph::{createGotoInst, createMoveInst, Block, Edge, Graph, Inst, Operand, LocationData, Op, Location, opName, Policy, RegisterSnapshot, RegisterTrackers, Type};
use package::interface::{EnumData, GcPoint};
use package::interface as iface;
use package::location::ensureLocationData;
use package::ssa_destruction::ssaDestruction;

pub fn performRegisterAllocation(graph: Graph, codegen: CodeGen, ci: CompilationInfo) {
    let maxOutgoingArgsSize = ensureLocationData(graph, codegen, ci);

    let allocator = SimpleRegisterAllocator::new(graph, codegen);
    allocator.allocateRegisters();

    let stack_alignment = STACK_FRAME_ALIGNMENT.toInt32();

    let finalStackSize = allocator.currentStackSize + maxOutgoingArgsSize;
    let finalAlignedStackSize = (finalStackSize + (stack_alignment - 1i32)) & !(stack_alignment - 1i32);
    graph.setStackSize(finalAlignedStackSize);

    ssaDestruction(graph, codegen);
}

class SimpleRegisterAllocator {
    graph: Graph,
    codegen: CodeGen,
    registers: Option[RegisterTracker[Register]],
    float_registers: Option[RegisterTracker[FloatRegister]],
    currentStackSize: Int32,
    refs: HashSet[Int32],
    currentInst: Option[Inst],
}

impl SimpleRegisterAllocator {
    static fn new(graph: Graph, codegen: CodeGen): SimpleRegisterAllocator {
        SimpleRegisterAllocator(
            graph,
            codegen,
            None[RegisterTracker[Register]],
            None[RegisterTracker[FloatRegister]],
            0i32,
            HashSet[Int32]::new(),
            None[Inst],
        )
    }

    fn allocateRegisters() {
        for block in self.graph.reversePostOrderIterator() {
            self.allocateBlock(block);
        }
    }

    fn allocateBlock(block: Block) {
        self.initializeRegisters(block);
        block.setTrackerIn(self.snapshotRegisterTrackers());

        for inst in block.phisIterator() {
            self.allocatePhi(inst);
        }

        for inst in block.instructionsIterator() {
            self.allocateInstruction(inst);
        }

        block.setTrackerOut(self.snapshotRegisterTrackers());
    }

    fn snapshotRegisterTrackers(): RegisterTrackers {
        RegisterTrackers(self.registers().clone(), self.float_registers().clone())
    }

    fn snapshotRegisters(inst: Inst) {
        let loc_data = inst.getLocationData();

        let snapshot = self.snapshotRegisterTrackers();
        loc_data.setRegisterSnapshot(snapshot);
    }

    fn createRegisterSnapshot(): RegisterSnapshot {
        RegisterSnapshot(self.registers().snapshot(), self.float_registers().snapshot())
    }

    fn initializeRegisters(block: Block) {
        self.registers = Some(RegisterTracker[Register]::new(self.codegen.allocatableRegisters()));
        self.float_registers = Some(RegisterTracker[FloatRegister]::new(self.codegen.allocatableFloatRegisters()));

        if block.isLoopHeader() {
            // For now everything is spilled at the beginning of a loop.
            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());
                self.spill(inst);
            }
        } else {
            let candidates = HashMap[Inst, Int64]::new();
            let all_gp = HashMap[Inst, Register]::new();
            let all_fp = HashMap[Inst, FloatRegister]::new();
            let predecessorCount = block.predecessors.size();

            for predecessorEdge in block.predecessors {
                let predecessor = predecessorEdge.source;
                let trackers = predecessor.getTrackerOut();

                self.processLiveRegisters[Register](all_gp, trackers.gp, block, candidates);
                self.processLiveRegisters[FloatRegister](all_fp, trackers.fp, block, candidates);
            }

            for (inst, reg) in all_gp {
                assert(self.registers().allocateFixedRegister(reg, inst));
            }

            for (inst, reg) in all_fp {
                assert(self.float_registers().allocateFixedRegister(reg, inst));
            }

            for id in block.getLiveIn() {
                let inst = self.graph.getInstById(id.toInt32());

                if all_gp.contains(inst) || all_fp.contains(inst) {
                    continue;
                }

                self.spill(inst);
            }
        }
    }

    fn processLiveRegisters[T: RegisterType](all: HashMap[Inst, T], tracker: RegisterTracker[T], block: Block, candidates: HashMap[Inst, Int64]) {
        let predecessorCount = block.predecessors.size();

        for (reg, inst) in tracker.data {
            if !block.getLiveIn().contains(inst.id().toInt64()) {
                continue;
            }

            let current = candidates.get(inst);
            let current = if current.isSome() {
                current.getOrPanic() + 1
            } else {
                1
            };
            if current == predecessorCount {
                assert(all.insert(inst, reg).isNone());
            }
            candidates.insert(inst, current);
        }
    }

    fn allocatePhi(inst: Inst) {
        if inst.getValueType().isAnyFloat() {
            self.allocatePhiGeneric[FloatRegister](self.float_registers(), inst);
        } else {
            self.allocatePhiGeneric[Register](self.registers(), inst);
        }
    }

    fn allocatePhiGeneric[T: RegisterType](registers: RegisterTracker[T], inst: Inst) {
        let register = registers.allocateRegister(inst);

        if register.isSome() {
            let loc = inst.getLocationData();
            let register = register.getOrPanic();
            loc.initOutput(register.toLocation());
        } else {
            self.spill(inst);
        }
    }

    fn allocateInstruction(inst: Inst) {
        assert(self.registers().protected.isEmpty());
        assert(self.float_registers().protected.isEmpty());

        self.currentInst = Some(inst);
        let outputOverlaps = inst.getLocationData().outputOverlaps();

        if outputOverlaps {
            if inst.getLocationData().needsRegisterSnapshot() {
                assert(inst.op() == Op::NewObject
                       || inst.op() == Op::NewLambda);
                assert(!inst.getLocationData().hasInput());
                self.snapshotRegisters(inst);
                self.attachGcPoint(inst);
            }

            self.allocateFixedInputs(inst);
            self.allocateFixedTemps(inst);
            self.allocateFixedOutput(inst);

            self.allocateArbitraryInputs(inst);
            self.allocateArbitraryTemps(inst);
            self.allocateArbitraryOutput(inst);

            self.freeDeadInputs(inst);
            self.freeDeadOutput(inst);
            self.freeDeadTemps(inst);

            assert(!inst.isCall());
        } else {
            self.allocateFixedInputs(inst);
            self.allocateFixedTemps(inst);

            self.allocateArbitraryInputs(inst);
            self.allocateArbitraryTemps(inst);

            self.freeDeadInputs(inst);
            self.freeDeadTemps(inst);

            if inst.getLocationData().needsRegisterSnapshot() {
                assert(inst.op() == Op::StoreArrayWb
                       || inst.op() == Op::StoreArrayAddressWb
                       || inst.op() == Op::StoreWb
                       || inst.op() == Op::EnsureGlobalInitialized);
                assert(!inst.getLocationData().hasOutput());
                self.snapshotRegisters(inst);
                self.attachGcPoint(inst);
            }

            if inst.isCall() {
                self.spillLiveRegisters();
                self.attachGcPoint(inst);
            }

            self.allocateFixedOutput(inst);
            self.allocateArbitraryOutput(inst);

            if inst.op() == Op::AllocateStack {
                self.allocateStackSlot(inst);
            }

            self.freeDeadOutput(inst);
        }

        self.registers().protected.clear();
        self.float_registers().protected.clear();

        self.currentInst = None[Inst];
    }

    fn spillLiveRegisters() {
        self.spillLiveRegistersGeneric[Register](self.registers());
        self.spillLiveRegistersGeneric[FloatRegister](self.float_registers());
    }

    fn spillLiveRegistersGeneric[T: RegisterType](registers: RegisterTracker[T]) {
        for (reg, inst) in registers.data {
            self.spill(inst);
            registers.freeRegisterRaw(reg);
        }
    }

    fn attachGcPoint(inst: Inst) {
        let loc_data = inst.getLocationData();
        let offsets = Vec[Int32]::new();
        offsets.reserve(self.refs.size());
        for offset in self.refs {
            offsets.push(offset);
        }
        loc_data.setGcPoint(GcPoint::from(offsets));
    }

    fn allocateFixedInputs(inst: Inst) {
        let loc_data = inst.getLocationData();
        
        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();
            let loc = loc_data.getInput(idx);

            if loc.getPolicy().isAnyFixedReg() {
                self.allocateFixedRegister(loc.getPolicy(), loc.getLocation(), input.getValue());
            }
        }
    }

    fn allocateFixedTemps(inst: Inst) {
        let loc_data = inst.getLocationData();

        for temp in loc_data.getTemps() {
            if temp.getPolicy().isAnyFixedReg() {
                self.allocateFixedTempRegister(temp.getPolicy(), temp.getLocation());
            }
        }
    }

    fn yieldRegister[T: RegisterType](registers: RegisterTracker[T], reg: T) {
        let inst = registers.data.get(reg).getOrPanic();
        let newReg = registers.allocateRegister(inst);
        registers.data.free(reg);

        if newReg.isSome() {
            let newReg = newReg.getOrPanic();
            let moveInst = createMoveInst(inst.getValueType(), newReg.toLocation(), reg.toLocation());
            self.currentInst.getOrPanic().insertBefore(moveInst);
        } else {
            registers.locations.remove(inst);
            self.spill(inst);
        }
    }

    fn allocateArbitraryInputs(inst: Inst) {
        let loc_data = inst.getLocationData();

        for input in inst.getInputs() {
            let idx = input.getIdx().toInt64();
            let input_loc = loc_data.getInput(idx);

            if input_loc.getPolicy().isAnyArbitraryReg() {
                let register = self.allocateArbitraryRegister(input_loc.getPolicy(), input.getValue());
                input_loc.setLocation(register);
            } else if input_loc.getPolicy().isAnyFixedStack() {
                assert(input_loc.hasStack());
                let dest = Location::Stack(input_loc.getStack());
                let src = self.getInstLocation(input.getValue());
                let inst = createMoveInst(input.getValue().getValueType(), dest, src);
                self.currentInst.getOrPanic().insertBefore(inst);
            }
        }
    }

    fn allocateArbitraryTemps(inst: Inst) {
        let loc_data = inst.getLocationData();

        for loc in loc_data.getTemps() {
            if loc.getPolicy().isAnyArbitraryReg() {
                let register = self.allocateArbitraryTempRegister(loc.getPolicy());
                loc.setLocation(register);
            }
        }
    }

    fn getInstLocation(inst: Inst): Location {
        let location = if inst.getValueType().isAnyFloat() {
            self.getInstRegisterGeneric[FloatRegister](self.float_registers(), inst)
        } else {
            self.getInstRegisterGeneric[Register](self.registers(), inst)
        };

        if location.isNone() {
            Location::fp(inst.getLocationData().getSpillSlot())
        } else {
            location
        }
    }

    fn getInstRegisterGeneric[T: RegisterType](registers: RegisterTracker[T], inst: Inst): Location {
        let register = registers.getRegister(inst);

        if register.isSome() {
            register.getOrPanic().toLocation()
        } else {
            Location::None
        }
    }

    fn allocateFixedOutput(inst: Inst) {
        let loc_data = inst.getLocationData();

        if !loc_data.hasOutput() {
            return;
        }

        let output = loc_data.getOutput();

        if !output.getPolicy().isAnyFixed() {
            return;
        }

        if output.getPolicy().isAnyFixedStack() {
            let slot = output.getStack();
            assert(slot.isFp());
            loc_data.setSpillSlot(slot.getOffset());
        } else if output.getPolicy().isFixedReg() {
            self.allocateFixedOutputRegisterGeneric[Register](output.getRegister(), self.registers(), inst);
        } else if output.getPolicy().isFixedFloatReg() {
            assert(output.getPolicy().isFixedFloatReg());
            self.allocateFixedOutputRegisterGeneric[FloatRegister](output.getFloatRegister(), self.float_registers(), inst);
        }
    }

    fn allocateFixedOutputRegisterGeneric[T: RegisterType](dest: T, registers: RegisterTracker[T], inst: Inst) {
        if !registers.allocateFixedRegister(dest, inst) {
            self.yieldRegister[T](registers, dest);
            registers.freeRegister(dest);
            assert(registers.allocateFixedRegister(dest, inst));
        }

        registers.protect(dest);
    }

    fn allocateArbitraryOutput(inst: Inst) {
        let loc_data = inst.getLocationData();

        if !loc_data.hasOutput() {
            return;
        }

        let output = loc_data.getOutput();
        let hint = loc_data.getHint();

        if output.getPolicy().isAnyFloatReg() {
            let hint = if hint.isFloatRegister() { Some[FloatRegister](hint.getFloatRegister()) } else { None[FloatRegister] };
            self.allocateOutputRegisterGeneric[FloatRegister](self.float_registers(), hint, inst, output);
        } else if output.getPolicy().isAnyReg() {
            let hint = if hint.isRegister() { Some[Register](hint.getRegister()) } else { None[Register] };
            self.allocateOutputRegisterGeneric[Register](self.registers(), hint, inst, output);
        } else if output.getPolicy().isSameAsFirstInput() {
            self.allocateOutputRegisterSameAsFirstInput(inst, loc_data, output);
        }
    }

    fn allocateOutputRegisterSameAsFirstInput(inst: Inst, loc_data: LocationData, output: Operand) {
        let input_loc = loc_data.getInput(0);
        let dest = input_loc.getLocation().getRegister();

        if !inst.getInput(0).isLastUse() {
            self.yieldRegister[Register](self.registers(), dest);
        }

        self.registers().freeRegisterRaw(dest);
        assert(self.registers().allocateFixedRegister(dest, inst));
        assert(self.registers().protected.contains(dest));
        output.setRegister(dest);
    }

    fn allocateOutputRegisterGeneric[T: RegisterType](registers: RegisterTracker[T], hint: Option[T], inst: Inst, output: Operand) {
        let loc_data = inst.getLocationData();

        if hint.isSome() {
            let hint = hint.getOrPanic();

            if registers.allocateFixedRegister(hint, inst) {
                output.setLocation(hint.toLocation());
                return;
            }
        }

        let register = registers.allocateRegister(inst);

        if register.isSome() {
            output.setLocation(register.getOrPanic().toLocation());
        } else {
            let (register, instInReg) = registers.freeUnprotected();
            self.spill(instInReg);
            assert(registers.allocateFixedRegister(register, inst));
            output.setLocation(register.toLocation());
        }
    }

    fn spill(inst: Inst) {
        let loc_data = inst.getLocationData();
        assert(loc_data.hasOutput());

        if !loc_data.hasSpillSlot() {
            let slot = self.allocateSpillSlot(inst.getValueType());
            loc_data.setSpillSlot(slot);
        }

        assert(loc_data.hasSpillSlot());
    }

    fn allocateSpillSlot(ty: Type): Int32 {
        let (size, alignment) = match ty {
            Type::Bool | Type::UInt8 => (1i32, 1i32),
            Type::Char | Type::Int32 | Type::Float32 => (4i32, 4i32),
            Type::Address | Type::Ptr | Type::Int64 | Type::Float64 => (8i32, 8i32),
            _ => unreachable[(Int32, Int32)](),
        };

        let offset = self.allocateStackSpace(size, alignment);
        self.addSpillSlotToGcPoint(offset, ty);

        offset
    }

    fn addSpillSlotToGcPoint(offset: Int32, ty: Type) {
        if ty.isReference() {
            assert(!self.refs.contains(offset));
            self.refs.insert(offset);
        }
    }

    fn allocateStackSlot(inst: Inst) {
        let layout = inst.getRecordLayout();

        let offset = self.allocateStackSpace(layout.size, layout.alignment);
        self.addRecordLayoutToGcPoint(offset, layout);

        inst.getLocationData().setStackSlot(offset);
    }

    fn allocateStackSpace(size: Int32, alignment: Int32): Int32 {
        self.currentStackSize = (self.currentStackSize + (alignment - 1i32)) & !(alignment - 1i32);
        self.currentStackSize = self.currentStackSize + size;

        -self.currentStackSize
    }

    fn addRecordLayoutToGcPoint(offset: Int32, layout: RecordLayout) {
        for ref in layout.refs {
            assert(!self.refs.contains(offset + ref));
            self.refs.insert(offset + ref);
        }
    }

    fn freeDeadOutput(inst: Inst) {
        let loc_data = inst.getLocationData();

        if loc_data.hasOutput() && !inst.hasUses() && !loc_data.getOutput().hasStack() {
            self.freeRegisterInLocation(loc_data.getOutput().getLocation());
            assert(!loc_data.hasSpillSlot());
        }
    }

    fn freeDeadTemps(inst: Inst) {
        let loc_data = inst.getLocationData();

        for temp in loc_data.getTemps() {
            self.freeRegisterInLocation(temp.getLocation());
        }
    }

    fn freeDeadInputs(inst: Inst) {
        let loc_data = inst.getLocationData();

        for input in inst.getInputs() {
            let value = input.getValue();
            assert(value.currentNextUse().getOrPanic() === input);
            value.advanceToNextUse();

            if input.isLastUse() {
                self.registers().free(value);
                self.float_registers().free(value);
                self.removeInstFromGcPoint(value);
            }
        }
    }

    fn removeInstFromGcPoint(inst: Inst) {
        let loc = inst.getLocationData();

        if inst.op() == Op::AllocateStack {
            let layout = inst.getRecordLayout();
            let offset = loc.getStackSlot();

            for ref in layout.refs {
                assert(self.refs.remove(offset + ref));
            }

        } else if inst.getValueType().isReference() && loc.hasSpillSlot() {
            assert(self.refs.remove(loc.getSpillSlot()));
        }
    }

    fn freeRegisterInLocation(location: Location) {
        match location {
            Location::None => unreachable[()](),
            Location::Reg(reg) => self.registers().freeRegisterRaw(reg),
            Location::FloatReg(reg) => self.float_registers().freeRegisterRaw(reg),
            Location::Stack(slot) => unreachable[()](),
        }
    }

    fn allocateArbitraryRegister(policy: Policy, value: Inst): Location {
        if policy.isAnyFloatReg() {
            self.allocateArbitraryRegisterGeneric[FloatRegister](self.float_registers(), value)
        } else {
            assert(policy.isAnyReg());
            self.allocateArbitraryRegisterGeneric[Register](self.registers(), value)
        }
    }

    fn allocateArbitraryRegisterGeneric[T: RegisterType](registers: RegisterTracker[T], value: Inst): Location {
        let register = registers.getRegister(value);

        if register.isSome() {
            let register = register.getOrPanic();
            registers.protect(register);
            return register.toLocation();
        }

        let register = registers.allocateRegister(value);

        if register.isSome() {
            let register = register.getOrPanic();
            self.emitReloadInst(register.toLocation(), value);
            registers.protect(register);
            return register.toLocation();
        }

        let (register, instInReg) = registers.freeUnprotected();
        self.spill(instInReg);
        registers.allocateFixedRegister(register, value);
        registers.protect(register);
        self.emitReloadInst(register.toLocation(), value);
        register.toLocation()
    }

    fn emitReloadInst(dest: Location, value: Inst) {
        let slot = value.getLocationData().getSpillSlot();
        let inst = createMoveInst(value.getValueType(), dest, Location::fp(slot));
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateArbitraryTempRegister(policy: Policy): Location {
        if policy.isAnyFloatReg() {
            self.allocateArbitraryTempRegisterGeneric[FloatRegister](self.float_registers())
        } else {
            assert(policy.isAnyReg());
            self.allocateArbitraryTempRegisterGeneric[Register](self.registers())
        }
    }

    fn allocateArbitraryTempRegisterGeneric[T: RegisterType](registers: RegisterTracker[T]): Location {
        let register = registers.allocateTempRegister();

        if register.isSome() {
            let register = register.getOrPanic();
            registers.protect(register);
            return register.toLocation();
        }

        let (register, instInReg) = registers.freeUnprotected();
        registers.protect(register);
        self.spill(instInReg);
        register.toLocation()
    }

    fn allocateFixedRegister(policy: Policy, dest: Location, inst: Inst) {
        if policy.isFixedReg() {
            self.allocateFixedRegisterGeneric[Register](dest.getRegister(), self.registers(), inst);
        } else {
            assert(policy.isFixedFloatReg());
            self.allocateFixedRegisterGeneric[FloatRegister](dest.getFloatRegister(), self.float_registers(), inst);
        }
    }

    fn allocateFixedRegisterGeneric[T: RegisterType + std::Equals](dest: T, registers: RegisterTracker[T], inst: Inst) {
        let current = registers.getRegister(inst);

        if current.isSome() && current.getOrPanic().equals(dest) {
            return;
        }

        if !registers.allocateFixedRegister(dest, inst) {
            self.yieldRegister[T](registers, dest);
            registers.freeRegister(dest);
            assert(registers.allocateFixedRegister(dest, inst));
        }

        registers.protect(dest);

        let source = if current.isSome() {
            current.getOrPanic().toLocation()
        } else {
            let slot = inst.getLocationData().getSpillSlot();
            Location::fp(slot)
        };

        let inst = createMoveInst(inst.getValueType(), dest.toLocation(), source);
        self.currentInst.getOrPanic().insertBefore(inst);
    }

    fn allocateFixedTempRegister(policy: Policy, reg: Location) {
        if policy.isFixedReg() {
            self.allocateFixedTempRegisterGeneric[Register](reg.getRegister(), self.registers());
        } else {
            assert(policy.isFixedFloatReg());
            self.allocateFixedTempRegisterGeneric[FloatRegister](reg.getFloatRegister(), self.float_registers());
        }
    }

    fn allocateFixedTempRegisterGeneric[T: RegisterType](reg: T, registers: RegisterTracker[T]) {
        if !registers.allocateFixedTempRegister(reg) {
            self.yieldRegister[T](registers, reg);
            registers.freeRegister(reg);
            assert(registers.allocateFixedTempRegister(reg));
        }
        registers.protect(reg);
    }

    fn registers(): RegisterTracker[Register] {
        self.registers.getOrPanic()
    }

    fn float_registers(): RegisterTracker[FloatRegister] {
        self.float_registers.getOrPanic()
    }
}

pub class RegisterTracker[T: RegisterType] {
    allocatable: RegSet[T],
    free: RegSet[T],
    protected: RegSet[T],
    pub data: RegMap[T, Inst],
    locations: HashMap[Inst, T],
}

impl[T: RegisterType] RegisterTracker[T] {
    static fn new(allocatable: RegSet[T]): RegisterTracker[T] {
        RegisterTracker(
            allocatable.clone(),
            allocatable.clone(),
            RegSet[T]::new(),
            RegMap[T, Inst]::new(allocatable),
            HashMap[Inst, T]::new(),
        )
    }

    pub fn getRegister(inst: Inst): Option[T] {
        self.locations.get(inst)
    }

    fn protect(reg: T) {
        self.protected.add(reg);
    }

    fn unprotect(reg: T) {
        self.protected.remove(reg);
    }

    fn allocateFixedRegister(reg: T, value: Inst): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            self.data.pick(reg, value);
            self.locations.insert(value, reg);
            true
        } else {
            false
        }
    }

    fn allocateFixedTempRegister(reg: T): Bool {
        if self.free.contains(reg) {
            self.free.remove(reg);
            true
        } else {
            false
        }
    }

    fn allocateRegister(inst: Inst): Option[T] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
            self.data.pick(reg, inst);
            self.locations.insert(inst, reg);
        }

        result
    }

    fn allocateTempRegister(): Option[T] {
        let result = self.free.first();

        if result.isSome() {
            let reg = result.getOrPanic();
            self.free.remove(reg);
        }

        result
    }

    fn free(inst: Inst) {
        let reg = self.getRegister(inst);

        if reg.isSome() {
            let reg = reg.getOrPanic();
            self.free.add(reg);
            self.data.free(reg);
        }

        self.locations.remove(inst);
    }

    fn freeRegister(reg: T) {
        assert(!self.protected.contains(reg));
        self.freeRegisterRaw(reg);
    }

    fn freeRegisterRaw(reg: T) {
        assert(!self.free.contains(reg));
        self.free.add(reg);
        let inst = self.data.free(reg);
        if inst.isSome() {
            self.locations.remove(inst.getOrPanic());
        }
    }

    fn freeUnprotected(): (T, Inst) {
        assert(self.free.intersect(self.allocatable).isEmpty());
        let usedButUnprotected = self.allocatable.difference(self.protected);
        let reg = usedButUnprotected.first().getOrPanic();
        self.free.add(reg);
        let inst = self.data.free(reg).getOrPanic();
        self.locations.remove(inst);
        (reg, inst)
    }

    fn clone(): RegisterTracker[T] {
        RegisterTracker(
            self.allocatable.clone(),
            self.free.clone(),
            self.protected.clone(),
            self.data.clone(),
            self.locations.clone(),
        )
    }

    pub fn snapshot(): RegSet[T] {
        self.allocatable.difference(self.free)
    }
}

pub class RecordLayout {
    pub size: Int32,
    pub alignment: Int32,
    pub fields: Array[RecordField],
    pub refs: Array[Int32],
}

pub struct RecordField {
    pub ty: BytecodeType,
    pub offset: Int32,
}

pub enum EnumLayout {
    Int32,
    PtrOrNull(EnumPtrOrNullLayout),
    Tagged,
}

impl EnumLayout {
    pub fn isInt32(): Bool {
        match self {
            EnumLayout::Int32 => true,
            _ => false,
        }
    }
}

pub struct EnumPtrOrNullLayout {
    pub null_is_first: Bool,
}

pub fn computeTupleLayout(subtypes: Array[BytecodeType]): RecordLayout {
    assert(!subtypes.isGeneric());
    computeRecordLayout(subtypes, 0i32, 1i32, Array[BytecodeType]::new())
}

pub fn computeStructLayout(struct_id: StructId, type_params: Array[BytecodeType]): RecordLayout {
    assert(!type_params.isGeneric());
    let structData = iface::getStructData(struct_id);
    computeRecordLayout(structData.fields, 0i32, 1i32, type_params)
}

fn computeRecordLayout(fieldTypes: Array[BytecodeType], start_size: Int32, start_align: Int32, type_params: Array[BytecodeType]): RecordLayout {
    let mut record_size = start_size;
    let mut record_align = start_align;
    let fields = Vec[RecordField]::new();
    let refs = Vec[Int32]::new();
    fields.reserve(fields.size());

    let addField = |size: Int32, align: Int32, ty: BytecodeType|: Int32 {
        let offset = (record_size + (align - 1i32)) & !(align - 1i32);
        fields.push(RecordField(ty, offset));

        record_size = offset + size;
        record_align = Int32::max(record_align, align);
        offset
    };

    for fieldTy in fieldTypes {
        let fieldTy = fieldTy.specialize(type_params);
        assert(!fieldTy.isGeneric());

        match fieldTy {
            BytecodeType::Unit => {
                addField(0i32, 1i32, fieldTy);
            }
            BytecodeType::Bool | BytecodeType::UInt8 => {
                addField(1i32, 1i32, fieldTy);
            }
            BytecodeType::Float32
            | BytecodeType::Int32
            | BytecodeType::Char => {
                addField(4i32, 4i32, fieldTy);
            }
            BytecodeType::Int64
            | BytecodeType::Float64 => {
                addField(8i32, 8i32, fieldTy);
            }
            BytecodeType::Class(_, _) => {
                let offset = addField(8i32, 8i32, fieldTy);
                refs.push(offset);
            }
            BytecodeType::Struct(struct_id, type_params) => {
                let layout = computeStructLayout(struct_id, type_params);
                let offset = addField(layout.size, layout.alignment, fieldTy);
                for ref in layout.refs {
                    refs.push(offset + ref);
                }
            }
            BytecodeType::Tuple(subtypes) => {
                let layout = computeTupleLayout(subtypes);
                let offset = addField(layout.size, layout.alignment, fieldTy);
                for ref in layout.refs {
                    refs.push(offset + ref);
                }
            }
            BytecodeType::Enum(enum_id, type_params) => {
                let layout = computeEnumLayout(enum_id, type_params);

                match layout {
                    EnumLayout::Int32 => {
                        addField(4i32, 4i32, fieldTy);
                    }

                    EnumLayout::PtrOrNull(_) | EnumLayout::Tagged => {
                        let offset = addField(8i32, 8i32, fieldTy);
                        refs.push(offset);
                    }
                }
            }
            BytecodeType::Ptr
            | BytecodeType::Lambda(_, _)
            | BytecodeType::Trait(_, _)
            | _ => {
                unimplemented();
            }
        }
    }

    record_size = (record_size + (record_align - 1i32)) & !(record_align - 1i32);
    RecordLayout(record_size, record_align, fields.toArray(), refs.toArray())
}

pub fn computeClassLayout(class_id: ClassId, type_params: Array[BytecodeType]): RecordLayout {
    unreachable[RecordLayout]()
}

pub fn computeEnumLayout(enum_id: EnumId, type_params: Array[BytecodeType]): EnumLayout {
    assert(!type_params.isGeneric());
    let enumData = iface::getEnumData(enum_id);

    if isSimpleEnumeration(enumData) {
        EnumLayout::Int32
    } else if isPointerOrNull(enumData, type_params) {
        let null_is_first = enumData.variants(0).fields.isEmpty();
        EnumLayout::PtrOrNull(EnumPtrOrNullLayout(null_is_first))
    } else {
        EnumLayout::Tagged
    }
}

fn isSimpleEnumeration(enum_data: EnumData): Bool {
    for variant in enum_data.variants {
        if !variant.fields.isEmpty() {
            return false;
        }
    }

    true
}

fn isPointerOrNull(enum_data: EnumData, type_params: Array[BytecodeType]): Bool {
    if enum_data.variants.size() != 2 {
        return false;
    }

    let first_is_empty = enum_data.variants(0).fields.isEmpty();
    let null_variant = if first_is_empty {
        enum_data.variants(0)
    } else {
        enum_data.variants(1)
    };

    let ptr_variant = if first_is_empty {
        enum_data.variants(1)
    } else {
        enum_data.variants(0)
    };

    if null_variant.fields.size() != 0 {
        return false;
    }

    if ptr_variant.fields.size() != 1 {
        return false;
    }

    let ty = ptr_variant.fields(0).specialize(type_params);
    isReference(ty)
}

pub fn isReference(ty: BytecodeType): Bool {
    match ty {
        BytecodeType::Unit
        | BytecodeType::Bool
        | BytecodeType::UInt8
        | BytecodeType::Float32
        | BytecodeType::Int32
        | BytecodeType::Char
        | BytecodeType::Int64
        | BytecodeType::Float64 => false,
        BytecodeType::Class(_, _)
        | BytecodeType::Ptr
        | BytecodeType::Lambda(_, _)
        | BytecodeType::Trait(_, _) => true,
        BytecodeType::Struct(_, _)
        | BytecodeType::Tuple(_)
        | BytecodeType::This
        | BytecodeType::TypeParam(_) => unreachable[Bool](),
        BytecodeType::Enum(enum_id, type_params) => {
            let layout = computeEnumLayout(enum_id, type_params);
            match layout {
                EnumLayout::Int32 => false,
                EnumLayout::PtrOrNull(_) | EnumLayout::Tagged => true,
            }
        }
        BytecodeType::TypeAlias(_) => unreachable[Bool](),
    }
}
