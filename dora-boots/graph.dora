use std::BitVec;
use std::Equals;
use std::Hash;
use std::Stringable;
use std::traits::Iterator;

use package::assembler::{FloatRegister, Label, Register, RegMap};
use package::bytecode::data::{BytecodeType, ClassId, FctId, FieldId, GlobalId};
use package::dominator::buildDominatorTree;
use package::regalloc::RegisterTracker;

pub use package::graph::ty::Type;

pub mod builder;
pub mod dump;
pub mod reader;
pub mod tests;
pub mod ty;
pub mod verifier;

pub class Graph {
    entryBlock: Option[Block],
    pub blocks: Vec[Option[Block]],
    instById: Vec[Option[Inst]],
    postOrder: Vec[Block],
    nextBlockIdValue: Int32,
    nextInstIdValue: Int32,
    stackSize: Option[Int32],
}

impl Graph {
    static pub fn new(): Graph {
        Graph(
            None[Block],
            Vec[Option[Block]]::new(),
            Vec[Option[Inst]]::new(),
            Vec[Block]::new(),
            0i32,
            0i32,
            None[Int32]
        )
    }

    pub fn addBlock(block: Block) {
        assert(block.graph.isNone());
        assert(block._id.isNone());

        block.graph = Some(self);
        block._id = Some(self.nextBlockId().value);
        self.blocks.push(Some[Block](block));
    }

    pub fn getBlockWithId(id: Int32): Block {
        self.blocks(id.toInt64()).getOrPanic()
    }

    pub fn setEntryBlock(block: Block) {
        self.entryBlock = Some(block);
    }

    pub fn getEntryBlock(): Block {
        self.entryBlock.getOrPanic()
    }

    pub fn getInstById(id: Int32): Inst {
        self.instById(id.toInt64()).getOrPanic()
    }

    fn assignNextInstId(inst: Inst) {
        inst._id = Some(self.instById.size().toInt32());
        self.instById.push(Some[Inst](inst));
    }

    fn nextBlockId(): BlockId {
        let id = self.nextBlockIdValue;
        self.nextBlockIdValue = id + 1i32;

        BlockId(id)
    }

    pub fn blockCount(): Int32 {
        self.nextBlockIdValue
    }

    pub fn setPostOrder(postOrder: Vec[Block]) {
        self.postOrder = postOrder;

        for (idx, block) in self.postOrder.enumerate() {
            block.postOrderIdx = idx.toInt32();
        }
    }

    pub fn rebuildDominatorTree() {
        // TODO: clear data of dominance and loop analysis
        self.buildDominatorTree();
    }

    pub fn buildDominatorTree() {
        buildDominatorTree(self);
    }

    pub fn insertionOrderIterator(): InsertionOrderIterator {
        InsertionOrderIterator::new(self.blocks.toArray())
    }

    pub fn postOrderIterator(): PostOrderIterator {
        PostOrderIterator::new(self.postOrder.toArray())
    }

    pub fn reversePostOrderIterator(): ReversePostOrderIterator {
        ReversePostOrderIterator::new(self.postOrder.toArray())
    }

    pub fn getStackSize(): Int32 {
        self.stackSize.getOrPanic()
    }

    pub fn setStackSize(size: Int32) {
        assert(self.stackSize.isNone());
        self.stackSize = Some(size);
    }
}

class InsertionOrderIterator {
    blocks: Array[Option[Block]],
    idx: Int64,
} 

impl InsertionOrderIterator {
    static fn new(blocks: Array[Option[Block]]): InsertionOrderIterator {
        InsertionOrderIterator(blocks, 0)
    }

    fn findNextBlock() {
        while self.idx < self.blocks.size() {
            let block = self.blocks(self.idx);

            if block.isSome() {
                break;
            }

            self.idx = self.idx + 1i64;
        }
    }
}

impl Iterator for InsertionOrderIterator {
    type Item = Block;

    fn next(): Option[Block] {
        self.findNextBlock();

        if self.idx < self.blocks.size() {
            let block = self.blocks(self.idx).getOrPanic();
            self.idx = self.idx + 1i64;
            Some[Block](block)
        } else {
            None[Block]
        }
    }
}

class PostOrderIterator {
    postOrder: Array[Block],
    idx: Int64,
}

impl PostOrderIterator {
    static pub fn new(postOrder: Array[Block]): PostOrderIterator {
        PostOrderIterator(postOrder, 0)
    }
}

impl Iterator for PostOrderIterator {
    type Item = Block;

    fn next(): Option[Block] {
        if self.idx < self.postOrder.size() {
            let block = self.postOrder(self.idx);
            self.idx = self.idx + 1i64;
            Some[Block](block)
        } else {
            None[Block]
        }
    }
}

class ReversePostOrderIterator {
    postOrder: Array[Block],
    idx: Int64,
}

impl ReversePostOrderIterator {
    static pub fn new(postOrder: Array[Block]): ReversePostOrderIterator {
        ReversePostOrderIterator(postOrder, postOrder.size() - 1)
    }
}

impl Iterator for ReversePostOrderIterator {
    type Item = Block;

    fn next(): Option[Block] {
        if self.idx != -1 {
            let block = self.postOrder(self.idx);
            self.idx = self.idx - 1;
            Some[Block](block)
        } else {
            None[Block]
        }
    }
}

pub struct RegisterTrackers {
    pub gp: RegisterTracker[Register],
    pub fp: RegisterTracker[FloatRegister],
}

struct BlockId(value: Int32)

pub class Block {
    _id: Option[Int32],
    phis: InstLinkedList,
    instructions: InstLinkedList,

    label: Option[Label],
    graph: Option[Graph],

    dominator: Option[Block],
    dominatedBlocks: Vec[Block],

    liveIn: Option[BitVec],
    trackerIn: Option[RegisterTrackers],
    trackerOut: Option[RegisterTrackers],

    pub predecessors: Vec[Edge],
    pub successors: Vec[Edge],

    loopData: Option[LoopData],
    pub postOrderIdx: Int32,
}

impl Block {
    static pub fn new(): Block {
        Block(
            None[Int32],
            InstLinkedList::new(),
            InstLinkedList::new(),
            None[Label],
            None[Graph],
            None[Block],
            Vec[Block]::new(),
            None[BitVec],
            None[RegisterTrackers],
            None[RegisterTrackers],
            Vec[Edge]::new(),
            Vec[Edge]::new(),
            None[LoopData],
            -1i32
        )
    }

    pub fn id(): Int32 {
        self._id.getOrPanic()
    }

    pub fn getGraph(): Graph {
        self.graph.getOrPanic()
    }

    pub fn getDominator(): Option[Block] {
        self.dominator
    }

    pub fn setDominator(block: Block) {
        self.dominator = Some(block);
    }

    pub fn dominates(other: Block): Bool {
        if self == other {
            true
        } else {
            self.strictlyDominates(other)
        }
    }

    pub fn strictlyDominates(other: Block): Bool {
        let mut current = other.getDominator();

        while current.isSome() {
            if self === current.getOrPanic() { return true; }
            current = current.getOrPanic().getDominator();
        }

        false
    }

    pub fn getDominatedBlocks(): Vec[Block] {
        self.dominatedBlocks
    }

    pub fn addDominatedBlock(block: Block) {
        self.dominatedBlocks.push(block);
    }

    pub fn addSuccessor(block: Block): Edge {
        let successorIdx = self.successors.size();
        let predecessorIdx = block.predecessors.size();
        let edge = Edge::new(self, successorIdx, block, predecessorIdx);
        self.successors.push(edge);
        block.predecessors.push(edge);
        edge
    }

    pub fn appendPhi(phi: Inst): Inst {
        assert(phi.block.isNone() && phi._id.isNone());

        phi.block = Some(self);
        self.graph.getOrPanic().assignNextInstId(phi);

        self.phis.appendInst(phi);
        phi.registerUses();

        phi
    }

    pub fn appendInst(inst: Inst): Inst {
        assert(inst.block.isNone() && inst._id.isNone());

        inst.block = Some(self);
        self.graph.getOrPanic().assignNextInstId(inst);

        self.instructions.appendInst(inst);
        inst.registerUses();

        inst
    }

    pub fn isLoopHeader(): Bool {
        self.loopData.isSome() && self.loopData.getOrPanic().header === self
    }

    pub fn getLoopData(): Option[LoopData] {
        self.loopData
    }

    pub fn setLoopData(loop: LoopData) {
        self.loopData = Some(loop);
    }

    pub fn clearLoopData() {
        self.loopData = None;
    }

    pub fn isEntryBlock(): Bool {
        self.graph.getOrPanic().getEntryBlock() === self
    }

    pub fn instructionsIterator(): InstIterator {
        InstIterator::new(self)
    }

    pub fn reverseInstructionsIterator(): BackwardInstIterator {
        BackwardInstIterator::new(self)
    }

    pub fn phisIterator(): PhiInstIterator {
        PhiInstIterator::new(self)
    }

    pub fn firstInst(): Inst {
        self.instructions.firstInst()
    }

    pub fn lastInst(): Inst {
        self.instructions.lastInst()
    }

    pub fn removePhi(inst: Inst) {
        unimplemented();
    }

    pub fn setLiveIn(liveIn: BitVec) {
        assert(self.liveIn.isNone());
        self.liveIn = Some(liveIn);
    }

    pub fn hasLiveIn(): Bool {
        self.liveIn.isSome()
    }

    pub fn getLiveIn(): BitVec {
        self.liveIn.getOrPanic()
    }

    pub fn setTrackerIn(trackerIn: RegisterTrackers) {
        assert(self.trackerIn.isNone());
        self.trackerIn = Some(trackerIn);
    }

    pub fn getTrackerIn(): RegisterTrackers {
        self.trackerIn.getOrPanic()
    }

    pub fn setTrackerOut(trackerOut: RegisterTrackers) {
        assert(self.trackerOut.isNone());
        self.trackerOut = Some(trackerOut);
    }

    pub fn getTrackerOut(): RegisterTrackers {
        self.trackerOut.getOrPanic()
    }

    pub fn setLabel(label: Label) {
        assert(self.label.isNone());
        self.label = Some(label);
    }

    pub fn getLabel(): Label {
        self.label.getOrPanic()
    }
}

impl Hash for Block {
  fn hash(): Int32 { self.id().hash() }
}

impl Equals for Block {
  fn equals(other: Block): Bool { self === other }
}

pub class LoopData {
    header: Block,
    backEdges: Vec[Edge],
    blocks: BitVec,
    parent: Option[LoopData],
    depth: Int64,
    subloops: Vec[LoopData],
}

impl LoopData {
    pub static fn new(header: Block): LoopData {
        LoopData(
            header,
            Vec[Edge]::new(),
            BitVec::new(),
            None[LoopData],
            0,
            Vec[LoopData]::new(),
        )
    }

    pub fn getHeader(): Block {
        self.header
    }

    pub fn addBackEdge(edge: Edge) {
        self.backEdges.push(edge);
    }

    pub fn getBackEdges(): Vec[Edge] {
        self.backEdges
    }

    pub fn numberBackEdges(): Int32 {
        self.backEdges.size().toInt32()
    }

    pub fn addBlock(block: Block) {
        assert(!self.containsBlock(block));
        self.blocks.insert(block.id().toInt64());

        if block.isLoopHeader() {
            let loop = block.getLoopData().getOrPanic();
            loop.setLoopParent(self);
        }
    }

    fn setLoopParent(parent: LoopData) {
        assert(self.parent.isNone());
        assert(self.depth == 0);
        self.parent = Some[LoopData](parent);
        self.increaseLoopDepth();
    }

    fn increaseLoopDepth() {
        self.depth = self.depth + 1;

        for subloop in self.subloops {
            subloop.increaseLoopDepth();
        }
    }

    pub fn containsBlock(block: Block): Bool {
        self.blocks.contains(block.id().toInt64())
    }

    pub fn containsLoop(other: LoopData): Bool {
        self.containsBlock(other.header)
    }

    pub fn blocks(): BitVec {
        self.blocks
    }
}

pub class Input {
    idx: Int32,
    value: Inst,
    usedBy: Inst,
    previousUse: Option[Input],
    nextUse: Option[Input],
    linearOrderIdxInActualUser: Option[Int32],
    isLastUse: Bool,
}

impl Input {
    pub static fn new(idx: Int32, value: Inst, usedBy: Inst): Input {
        Input(
            idx,
            value,
            usedBy,
            None[Input],
            None[Input],
            None[Int32],
            false,
        )
    }

    pub fn getIdx(): Int32 {
        self.idx
    }

    pub fn getLinearOrderIndexInActualUser(): Int32 {
        self.linearOrderIdxInActualUser.getOrPanic()
    }

    pub fn getNextUse(): Option[Input] {
        self.nextUse
    }

    pub fn getValue(): Inst {
        self.value
    }

    pub fn getUsedBy(): Inst {
        self.usedBy
    }

    pub fn markLastUse() {
        self.isLastUse = true;
    }

    pub fn isLastUse(): Bool {
        self.isLastUse
    }
}

impl Stringable for Input {
    fn toString(): String {
        "Input(user:%${self.getUsedBy().id()}, idx:${self.getIdx()}, value:%${self.getValue().id()})"
    }
}

pub enum Op {
    NullConst,

    TrueConst,
    FalseConst,
    
    Int32Const,
    Int64Const,

    Float32Const,
    Float64Const,

    LoadGlobal,
    StoreGlobal,

    Undef,

    BoundsCheck,
    Goto,
    If,
    Return,

    Neg,
    CheckedNeg,
    Not,

    Add,
    CheckedAdd,
    Sub,
    CheckedSub,
    Mul,
    CheckedMul,
    Div,
    CheckedDiv,
    Mod,
    CheckedMod,
    And,
    Or,
    Xor,
    Shl,
    Shr,
    Sar,

    InvokeStatic,
    InvokeDirect,
    InvokeVirtual,
    InvokeLambda,

    TestIdentity,
    Equal,
    NotEqual,
    Greater,
    GreaterOrEqual,
    Less,
    LessOrEqual,

    Phi,
    DivZeroCheck,
    ArrayGet,
    ArraySet,
    ArrayLength,

    LoadField,
    StoreField,
    Arg,

    Move,
    MoveImmediate,
}

impl Op {
    pub fn isConst(): Bool {
        match self {
            Op::NullConst => true,
            Op::Int32Const => true,
            Op::Int64Const => true,
            Op::Float32Const => true,
            Op::Float64Const => true,
            _ => false
        }
    }

    pub fn isCommutative(): Bool {
        match self {
            Op::Add => true,
            Op::Mul => true,
            Op::CheckedAdd => true,
            Op::CheckedMul => true,
            _ => false
        }
    }

    pub fn name(): String {
        opName(self)
    }
}

pub fn opName(op: Op): String {
    match op {
        Op::NullConst => "Const.Null",
        Op::TrueConst => "Const.True",
        Op::FalseConst => "Const.False",
        Op::Int32Const => "Const.Int32",
        Op::Int64Const => "Const.Int64",
        Op::Float32Const => "Const.Float32",
        Op::Float64Const => "Const.Float64",
        Op::LoadGlobal => "LoadGlobal",
        Op::StoreGlobal => "StoreGlobal",
        Op::Undef => "Undef",
        Op::BoundsCheck => "BoundsCheck",
        Op::Goto => "Goto",
        Op::If => "If",
        Op::Return => "Return",
        Op::Neg => "Neg",
        Op::CheckedNeg => "CheckedNeg",
        Op::Not => "Not",
        Op::Add => "Add",
        Op::CheckedAdd => "CheckedAdd",
        Op::Sub => "Sub",
        Op::CheckedSub => "CheckedSub",
        Op::Mul => "Mul",
        Op::CheckedMul => "CheckedMul",
        Op::Div => "Div",
        Op::CheckedDiv => "CheckedDiv",
        Op::Mod => "Mod",
        Op::CheckedMod => "CheckedMod",
        Op::And => "And",
        Op::Or => "Or",
        Op::Xor => "Xor",
        Op::Shl => "Shl",
        Op::Shr => "Shr",
        Op::Sar => "Sar",
        Op::InvokeStatic => "InvokeStatic",
        Op::InvokeDirect => "InvokeDirect",
        Op::InvokeVirtual => "InvokeVirtual",
        Op::InvokeLambda => "InvokeLambda",
        Op::TestIdentity => "TestIdentity",
        Op::Equal => "Equal",
        Op::NotEqual => "NotEqual",
        Op::Greater => "Greater",
        Op::GreaterOrEqual => "GreaterOrEqual",
        Op::Less => "Less",
        Op::LessOrEqual => "LessOrEqual",
        Op::Phi => "Phi",
        Op::DivZeroCheck => "DivZeroCheck",
        Op::ArrayGet => "ArrayGet",
        Op::ArraySet => "ArraySet",
        Op::ArrayLength => "ArrayLength",
        Op::LoadField => "LoadField",
        Op::StoreField => "StoreField",
        Op::Arg => "Arg",
        Op::Move => "Move",
        Op::MoveImmediate => "MoveImmediate",
    }
}

pub class Inst {
    _id: Option[Int32],
    block: Option[Block],
    linear_index: Option[Int32],

    _op: Option[Op],
    bytecode_position: Option[Int32],

    aux: Int64,

    previous: Option[Inst],
    next: Option[Inst],

    nextUse: Option[Input],

    ty: Type,
    extra: InstExtraData,

    location_data: Option[LocationData],
    live_range: Option[LiveRange],

    useListHead: Option[Input],
    useListTail: Option[Input],

    inputs: Vec[Input],
}

impl Inst {
    pub static fn new(): Inst {
        Inst(
            None[Int32],
            None[Block],
            None[Int32],
            None[Op],
            None[Int32],
            0,
            None[Inst],
            None[Inst],
            None[Input],
            Type::Unit,
            InstExtraData::None,
            None[LocationData],
            None[LiveRange],
            None[Input],
            None[Input],
            Vec[Input]::new(),
        )
    }

    pub fn id(): Int32 {
        self._id.getOrPanic()
    }

    pub fn op(): Op {
        self._op.getOrPanic()
    }

    pub fn hasLinearOrderIndex(): Bool {
        self.linear_index.isSome()
    }

    pub fn getLinearOrderIndex(): Int32 {
        self.linear_index.getOrPanic()
    }

    pub fn setLinearOrderIndex(value: Int32) {
        self.linear_index = Some(value);
    }

    pub fn hasLiveRange(): Bool {
        self.live_range.isSome()
    }

    pub fn getLiveRange(): LiveRange {
        self.live_range.getOrPanic()
    }

    pub fn bytecode_position(): Int32 {
        self.bytecode_position.getOrPanic()
    }

    pub fn set_bytecode_position(pos: Int32) {
        self.bytecode_position = Some(pos);
    }

    pub fn getBlock(): Block {
        self.block.getOrPanic()
    }

    pub fn getInputs(): Vec[Input] {
        self.inputs
    }

    pub fn hasInput(): Bool {
        !self.inputs.isEmpty()
    }

    pub fn getInput(idx: Int64): Input {
        self.inputs(idx)
    }

    pub fn isPhi(): Bool {
        self.op() == Op::Phi
    }

    pub fn isConst(): Bool {
        self.op().isConst()
    }

    pub fn getValueType(): Type {
        match self.op() {
            Op::NullConst => Type::Ptr,
            Op::TrueConst => Type::Bool,
            Op::FalseConst => Type::Bool,
            Op::Int32Const => Type::Int32,
            Op::Int64Const => Type::Int64,
            Op::Float32Const => Type::Float32,
            Op::Float64Const => Type::Float64,
            Op::LoadGlobal => self.ty,
            Op::StoreGlobal => self.ty,
            Op::Undef => unreachable[Type](),
            Op::BoundsCheck => Type::Unit,
            Op::Goto => unreachable[Type](),
            Op::If => unreachable[Type](),
            Op::Return => unreachable[Type](),
            Op::Neg => self.ty,
            Op::CheckedNeg => self.ty,
            Op::Not => self.ty,
            Op::Add => self.ty,
            Op::CheckedAdd => self.ty,
            Op::Sub => self.ty,
            Op::CheckedSub => self.ty,
            Op::Mul => self.ty,
            Op::CheckedMul => self.ty,
            Op::Div => self.ty,
            Op::CheckedDiv => self.ty,
            Op::Mod => self.ty,
            Op::CheckedMod => self.ty,
            Op::And => self.ty,
            Op::Or => self.ty,
            Op::Xor => self.ty,
            Op::Shl => self.ty,
            Op::Shr => self.ty,
            Op::Sar => self.ty,
            Op::InvokeStatic => self.ty,
            Op::InvokeDirect => self.ty,
            Op::InvokeVirtual => self.ty,
            Op::InvokeLambda => self.ty,
            Op::TestIdentity => Type::Bool,
            Op::Equal => Type::Bool,
            Op::NotEqual => Type::Bool,
            Op::Greater => Type::Bool,
            Op::GreaterOrEqual => Type::Bool,
            Op::Less => Type::Bool,
            Op::LessOrEqual => Type::Bool,
            Op::Phi => self.ty,
            Op::DivZeroCheck => unreachable[Type](),
            Op::ArrayGet => self.ty,
            Op::ArraySet => unreachable[Type](),
            Op::ArrayLength => Type::Int64,
            Op::LoadField => unreachable[Type](),
            Op::StoreField => unreachable[Type](),
            Op::Arg => self.ty,
            Op::Move => self.ty,
            Op::MoveImmediate => self.ty,
        }
    }

    pub fn getOperationType(): Type {
        match self.op() {
            Op::Return
            | Op::Equal
            | Op::NotEqual
            | Op::Greater
            | Op::GreaterOrEqual
            | Op::Less
            | Op::LessOrEqual
            | Op::ArraySet => self.ty,
            _ => self.getValueType(),
        }
    }

    pub fn getFunctionInfo(): FunctionInfo {
        match self.extra {
            InstExtraData::FunctionInfo(info) => info,
            _ => unreachable[FunctionInfo](),
        }
    }

    pub fn usedAt(inst: Inst) {
        if self.live_range.isNone() {
            self.live_range = Some(LiveRange(self.getLinearOrderIndex(), inst.getLinearOrderIndex()));
        } else {
            let live_range = self.live_range.getOrPanic();
            assert(live_range.start == self.getLinearOrderIndex());
            assert(live_range.end >= inst.getLinearOrderIndex());
        }
    }

    pub fn usedInLoop(block: Block) {
        let live_range = self.live_range.getOrPanic();
        let idx = block.lastInst().getLinearOrderIndex();
        if idx > live_range.end {
            live_range.end = idx;
        }
    }

    pub fn addInput(inst: Inst) {
        let input = Input::new(self.inputs.size().toInt32(), inst, self);
        self.inputs.push(input);
    }

    pub fn addUse(input: Input) {
        assert(input.value === self);

        if self.useListHead.isNone() {
            assert(self.useListTail.isNone());
            input.previousUse = None;
            input.nextUse = None;

            self.useListHead = Some(input);
            self.useListTail = Some(input);
        } else {
            assert(self.useListHead.isSome());
            assert(self.useListTail.isSome());

            self.useListTail.getOrPanic().nextUse = Some(input);

            input.previousUse = self.useListTail;
            input.nextUse = None;

            self.useListTail = Some(input);
        }
    }

    pub fn currentNextUse(): Option[Input] {
        self.nextUse
    }

    pub fn hasNextUse(): Bool {
        self.nextUse.isSome()
    }

    pub fn advanceToNextUse() {
        assert(self.nextUse.isSome());
        self.nextUse = self.nextUse.getOrPanic().getNextUse();
    }

    pub fn clearUses() {
        self.useListHead = None;
        self.useListTail = None;
        self.nextUse = None;
    }

    pub fn prependUse(input: Input, used_by: Inst) {
        assert(input.value === self);
        input.linearOrderIdxInActualUser = Some(used_by.getLinearOrderIndex());
        self.nextUse = Some(input);

        if self.useListHead.isNone() {
            assert(self.useListTail.isNone());
            input.previousUse = None;
            input.nextUse = None;

            self.useListHead = Some(input);
            self.useListTail = Some(input);
        } else {
            assert(self.useListHead.isSome());
            assert(self.useListTail.isSome());

            assert(self.useListHead.getOrPanic().previousUse.isNone());
            assert(self.useListTail.getOrPanic().nextUse.isNone());

            self.useListHead.getOrPanic().previousUse = Some(input);

            input.previousUse = None;
            input.nextUse = self.useListHead;

            self.useListHead = Some(input);
        }
    }

    pub fn remove() {
        assert(!self.hasUses());
        assert(self.block.isSome());

        self.removeAsUser();
        let block = self.block.getOrPanic();

        if self.isPhi() {
            block.phis.removeInst(self);
        } else {
            block.instructions.removeInst(self);
        }

        self.block = None;
        block.getGraph().instById(self.id().toInt64()) = None[Inst];
        self._id = None;
    }

    pub fn registerUses() {
        for input in self.inputs {
            input.value.addUse(input);
        }
    }

    pub fn removeAsUser() {
        for input in self.inputs {
            removeUse(input);
        }
    }

    pub fn hasUses(): Bool {
        let result = self.useListHead.isSome();
        assert(result == self.useListTail.isSome());
        result
    }

    pub fn insertBefore(inst: Inst) {
        assert(inst.block.isNone() && inst._id.isNone());

        let block = self.getBlock();

        inst.block = Some(block);
        block.getGraph().assignNextInstId(inst);

        block.instructions.insertBefore(inst, self);
        inst.registerUses();
    }

    pub fn replaceWith(replacement: Inst) {
        while self.useListHead.isSome() {
            let input = self.useListHead.getOrPanic();
            input.usedBy.replaceInput(replacement, input.idx);
        }
    }

    pub fn replaceInput(replacement: Inst, idx: Int32) {
        let input = self.inputs(idx.toInt64());

        if input.value === replacement {
            return;
        }

        removeUse(input);
        input.value = replacement;
        replacement.addUse(input);
    }

    pub fn users(): Array[Inst] {
        let data = Vec[Inst]::new();
        let mut current = self.useListHead;

        while current.isSome() {
            let cur = current.getOrPanic();
            data.push(cur.usedBy);
            current = cur.nextUse;
        }

        data.toArray()
    }

    pub fn firstUse(): Option[Input] {
        self.useListHead
    }

    pub fn uses(): UseIterator {
        UseIterator::new(self)
    }

    pub fn dominates(other: Inst): Bool {
        let sblock = self.block.getOrPanic();
        let oblock = other.block.getOrPanic();

        if sblock === oblock {
            let mut current = self.next;

            while current.isSome() {
                let currentInst = current.getOrPanic();

                if currentInst === other {
                    return true;
                }

                current = currentInst.next;
            }

            false
        } else {
            sblock.dominates(oblock)
        }
    }

    pub fn isCall(): Bool {
        match self.op() {
            Op::InvokeStatic => true,
            Op::InvokeDirect => true,
            Op::InvokeVirtual => true,
            _ => false,
        }
    }

    pub fn isTerminator(): Bool {
        match self.op() {
            Op::Goto => true,
            Op::If => true,
            Op::Return => true,
            _ => false,
        }
    }

    pub fn getArgIndex(): Int32 {
        assert(self.op() == Op::Arg);
        self.aux.toInt32()
    }

    pub fn getGlobalId(): GlobalId {
        let op = self.op();

        assert(
            op == Op::LoadGlobal ||
            op == Op::StoreGlobal
        );

        GlobalId(self.aux.toInt32())
    }

    pub fn getValueAsInt32(): Int32 {
        assert(self.op() == Op::Int32Const);
        self.aux.toInt32()
    }

    pub fn getValueAsInt64(): Int64 {
        assert(self.op() == Op::Int64Const);
        self.aux
    }

    pub fn getValueAsFloat32(): Float32 {
        assert(self.op() == Op::Float32Const);
        self.aux.toInt32().asFloat32()
    }

    pub fn getValueAsFloat64(): Float64 {
        assert(self.op() == Op::Float64Const);
        self.aux.asFloat64()
    }

    pub fn getTargetBlock(): Block {
        assert(self.op() == Op::Goto);
        match self.extra {
            InstExtraData::Goto(block) => block,
            _ => unreachable[Block](),
        }
    }

    pub fn getTrueBlock(): Block {
        assert(self.op() == Op::If);
        match self.extra {
            InstExtraData::If(then_block, else_block) => then_block,
            _ => unreachable[Block](),
        }
    }

    pub fn setTrueBlock(block: Block) {
        assert(self.op() == Op::If);
        match self.extra {
            InstExtraData::If(then_block, else_block) => {
                self.extra = InstExtraData::If(block, else_block);
            },
            _ => unreachable[()](),
        }
    }

    pub fn getFalseBlock(): Block {
        assert(self.op() == Op::If);
        match self.extra {
            InstExtraData::If(then_block, else_block) => else_block,
            _ => unreachable[Block](),
        }
    }

    pub fn setFalseBlock(block: Block) {
        assert(self.op() == Op::If);
        match self.extra {
            InstExtraData::If(then_block, else_block) => {
                self.extra = InstExtraData::If(then_block, block);
            },
            _ => unreachable[()](),
        }
    }

    pub fn setLocationData(data: LocationData) {
        self.location_data = Some(data);
    }

    pub fn hasLocationData(): Bool {
        self.location_data.isSome()
    }

    pub fn getLocationData(): LocationData {
        self.location_data.getOrPanic()
    }

    pub fn hasSideEffects(): Bool {
        match self.op() {
            Op::NullConst => false,
            Op::TrueConst => false,
            Op::FalseConst => false,
            Op::Int32Const => false,
            Op::Int64Const => false,
            Op::Float32Const => false,
            Op::Float64Const => false,
            Op::LoadGlobal => true,
            Op::StoreGlobal => true,
            Op::Undef => false,
            Op::BoundsCheck => true,
            Op::Goto => true,
            Op::If => true,
            Op::Return => true,
            Op::Neg => false,
            Op::CheckedNeg => true,
            Op::Not => false,
            Op::Add => false,
            Op::CheckedAdd => true,
            Op::Sub => false,
            Op::CheckedSub => true,
            Op::Mul => false,
            Op::CheckedMul => true,
            Op::Div => false,
            Op::CheckedDiv => true,
            Op::Mod => false,
            Op::CheckedMod => true,
            Op::And => false,
            Op::Or => false,
            Op::Xor => false,
            Op::Shl => false,
            Op::Shr => false,
            Op::Sar => false,
            Op::InvokeStatic => true,
            Op::InvokeDirect => true,
            Op::InvokeVirtual => true,
            Op::InvokeLambda => true,
            Op::TestIdentity => false,
            Op::Equal => false,
            Op::NotEqual => false,
            Op::Greater => false,
            Op::GreaterOrEqual => false,
            Op::Less => false,
            Op::LessOrEqual => false,
            Op::Phi => true,
            Op::DivZeroCheck => true,
            Op::ArrayGet => false,
            Op::ArraySet => true,
            Op::ArrayLength => false,
            Op::LoadField => false,
            Op::StoreField => true,
            Op::Arg => false,
            Op::Move => false,
            Op::MoveImmediate => false,
        }
    }
}

impl Hash for Inst {
    fn hash(): Int32 {
        self.id().hash()
    }
}

impl Equals for Inst {
    fn equals(other: Inst): Bool {
        self === other
    }
}

impl Stringable for Inst {
    fn toString(): String {
        "%${self.id()}"
    }
}

enum InstExtraData {
    None,
    FieldInfo(FieldInfo),
    FunctionInfo(FunctionInfo),
    If(Block, Block),
    Goto(Block),
}

pub enum CallKind {
    Static,
    Direct,
    Virtual,
    Lambda,
}

pub class LiveRange {
    start: Int32,
    end: Int32,
}

pub class LocationData {
    inputs: Array[Option[Operand]],
    temps: Vec[Operand],
    output: Option[Operand],
    hint: Location,
    spill_slot: Option[Int32],
}

impl LocationData {
    pub static fn new(inst: Inst): LocationData {
        let count = inst.getInputs().size();
        let inputs = Array[Option[Operand]]::fill(count, None[Operand]);

        LocationData(
            inputs,
            Vec[Operand]::new(),
            None[Operand],
            Location::None,
            None[Int32],
        )
    }

    pub static fn newWith(inputs: Int64): LocationData {
        let inputs = Array[Option[Operand]]::fill(inputs, None[Operand]);

        LocationData(
            inputs,
            Vec[Operand]::new(),
            None[Operand],
            Location::None,
            None[Int32],
        )
    }

    pub fn setOutput(operand: Operand) {
        assert(self.output.isNone());
        self.output = Some(operand);
    }

    pub fn setInput(idx: Int64, operand: Operand) {
        assert(self.inputs(idx).isNone());
        self.inputs(idx) = Some[Operand](operand);
    }

    pub fn setTemp(operand: Operand) {
        self.temps.push(operand);
    }

    pub fn hasOutput(): Bool {
        self.output.isSome()
    }

    pub fn getOutput(): Operand {
        self.output.getOrPanic()
    }

    pub fn initOutput(operand: Location) {
        assert(self.output.isNone());
        self.output = Some(Operand(Policy::None, operand));
    }

    pub fn hasInput(idx: Int64): Bool {
        self.inputs(idx).isSome()
    }

    pub fn getInput(idx: Int64): Operand {
        self.inputs.get(idx).getOrPanic()
    }

    pub fn getTemps(): Vec[Operand] {
        self.temps
    }

    pub fn getTemp(idx: Int64): Operand {
        self.temps.get(idx)
    }

    pub fn addTemp(temp: Operand) {
        self.temps.push(temp);
    }

    pub fn setSpillSlot(slot: Int32) {
        self.spill_slot = Some(slot);
    }

    pub fn getSpillSlot(): Int32 {
        self.spill_slot.getOrPanic()
    }

    pub fn hasSpillSlot(): Bool {
        self.spill_slot.isSome()
    }

    pub fn setHint(location: Location) {
        assert(self.hint.isNone());
        assert(!location.isNone());
        self.hint = location;
    }

    pub fn getHint(): Location {
        self.hint
    }
}

pub enum Location {
    None,
    Reg(Register),
    FloatReg(FloatRegister),
    Stack(Int32),
}

impl Location {
    pub fn isNone(): Bool {
        match self {
            Location::None => true,
            _ => false,
        }
    }

    pub fn isRegister(): Bool {
        match self {
            Location::Reg(reg) => true,
            _ => false,
        }
    }

    pub fn getRegister(): Register {
        match self {
            Location::Reg(reg) => reg,
            _ => unreachable[Register](),
        }
    }

    pub fn isFloatRegister(): Bool {
        match self {
            Location::FloatReg(reg) => true,
            _ => false,
        }
    }

    pub fn getFloatRegister(): FloatRegister {
        match self {
            Location::FloatReg(reg) => reg,
            _ => unreachable[FloatRegister](),
        }
    }

    pub fn isStack(): Bool {
        match self {
            Location::Stack(slot) => true,
            _ => false,
        }
    }

    pub fn getStack(): Int32 {
        match self {
            Location::Stack(slot) => slot,
            _ => unreachable[Int32](),
        }
    }
}

impl Equals for Location {
    fn equals(other: Location): Bool {
        match self {
            Location::None => {
                other.isNone()
            },
            Location::Reg(reg) => {
                other.isRegister() && reg == other.getRegister()
            },
            Location::FloatReg(reg) => {
                other.isFloatRegister() && reg == other.getFloatRegister()
            },
            Location::Stack(slot) => {
                other.isStack() && slot == other.getStack()
            },
        }
    }
}

impl Hash for Location {
    fn hash(): Int32 {
        match self {
            Location::None => 1i32,
            Location::Reg(reg) => reg.value.toInt32() << 1i32,
            Location::FloatReg(reg) => reg.value.toInt32() << 1i32,
            Location::Stack(slot) => slot << 1i32 + 1i32,
        }
    }
}

impl Stringable for Location {
    fn toString(): String {
        match self {
            Location::None => "None",
            Location::Reg(reg) => "Reg(${reg.value})",
            Location::FloatReg(reg) => "FloatReg(${reg.value})",
            Location::Stack(slot) => "Stack(${slot})",
        }
    }
}

pub enum Policy {
    None,
    SameAsFirstInput,
    AnyReg,
    FixedReg,
    AnyFloatReg,
    FixedFloatReg,
}

impl Policy {
    pub fn isSameAsFirstInput(): Bool {
        self == Policy::SameAsFirstInput
    }

    pub fn isAnyReg(): Bool {
        self == Policy::AnyReg
    }

    pub fn isFixedReg(): Bool {
        self == Policy::FixedReg
    }

    pub fn isAnyFloatReg(): Bool {
        self == Policy::AnyFloatReg
    }

    pub fn isFixedFloatReg(): Bool {
        self == Policy::FixedFloatReg
    }

    pub fn isAnyFixed(): Bool {
        self == Policy::FixedReg || self == Policy::FixedFloatReg
    }

    pub fn isAnyArbitraryReg(): Bool {
        self == Policy::AnyReg || self == Policy::AnyFloatReg
    }
}

pub class Operand {
    policy: Policy,
    location: Location,
}

impl Operand {
    pub static fn new(policy: Policy, location: Location): Operand {
        Operand(policy, location)
    }

    pub fn getPolicy(): Policy {
        self.policy
    }

    pub fn getLocation(): Location {
        self.location
    }

    pub fn setLocation(opnd: Location) {
        assert(self.location.isNone());
        assert(!opnd.isNone());
        self.location = opnd;
    }

    pub fn isNone(): Bool {
        self.location.isNone()
    }

    pub fn hasRegister(): Bool {
        self.location.isRegister()
    }

    pub fn getRegister(): Register {
        self.location.getRegister()
    }

    pub fn setRegister(register: Register) {
        assert(self.location.isNone());
        self.location = Location::Reg(register);
    }

    pub fn hasFloatRegister(): Bool {
        self.location.isFloatRegister()
    }

    pub fn getFloatRegister(): FloatRegister {
        self.location.getFloatRegister()
    }

    pub fn setFloatRegister(register: FloatRegister) {
        assert(self.location.isNone());
        self.location = Location::FloatReg(register);
    }

    pub fn hasStack(): Bool {
        self.location.isStack()
    }

    pub fn getStack(): Int32 {
        self.location.getStack()
    }

    pub fn setStack(slot: Int32) {
        assert(self.location.isNone());
        self.location = Location::Stack(slot);
    }
}

class UseIterator {
    current: Option[Input],
}

impl UseIterator {
    static fn new(inst: Inst): UseIterator {
        UseIterator(inst.useListHead)
    }
}

impl Iterator for UseIterator {
    type Item = Input;

    fn next(): Option[Input] {
        if self.current.isSome() {
            let input = self.current.getOrPanic();
            self.current = input.nextUse;
            Some[Input](input)
        } else {
            None[Input]
        }
    }
}

fn removeUse(input: Input) {
    let inst = input.value;

    if input.previousUse.isSome() {
        input.previousUse.getOrPanic().nextUse = input.nextUse;
    } else {
        inst.useListHead = input.nextUse;
    }

    if input.nextUse.isSome() {
        input.nextUse.getOrPanic().previousUse = input.previousUse;
    } else {
        inst.useListTail = input.previousUse;
    }

    assert(inst.useListHead.isSome() == inst.useListTail.isSome());

    input.previousUse = None;
    input.nextUse = None;
}

pub fn createMoveInst(ty: Type, dest: Location, source: Location): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Move);
    inst.ty = ty;

    let loc = LocationData::newWith(1);
    loc.output = Some(Operand(Policy::None, dest));
    loc.inputs(0) = Some[Operand](Operand(Policy::None, source));
    inst.setLocationData(loc);

    inst
}

pub fn createNullConst(value: UInt8): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::NullConst);
    inst
}

pub fn createBoolConst(value: Bool): Inst {
    let inst = Inst::new();
    let op = if value {
        Op::TrueConst
    } else {
        Op::FalseConst
    };
    inst._op = Some(op);
    inst
}

pub fn createInt32Const(value: Int32): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Int32Const);
    inst.aux = value.toInt64();
    inst
}

pub fn createInt64Const(value: Int64): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Int64Const);
    inst.aux = value;
    inst
}

pub fn createFloat32Const(value: Float32): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Float32Const);
    inst.aux = value.asInt32().toInt64();
    inst
}

pub fn createFloat64Const(value: Float64): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Float64Const);
    inst.aux = value.asInt64();
    inst
}

pub fn createLoadGlobalInst(ty: Type, global: GlobalId): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::LoadGlobal);
    inst.ty = ty;
    inst.aux = global.value.toInt64();
    inst
}

pub fn createStoreGlobalInst(ty: Type, global: GlobalId, value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::StoreGlobal);
    inst.aux = global.value.toInt64();
    inst.addInput(value);
    inst.ty = ty;
    inst
}


pub fn createUnaryInst(op: Op, ty: Type, opnd: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(op);
    inst.addInput(opnd);
    inst.ty = ty;
    inst
}

pub fn createBinaryInst(op: Op, ty: Type, lhs: Inst, rhs: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(op);
    inst.addInput(lhs);
    inst.addInput(rhs);
    inst.ty = ty;
    inst
}

pub fn createTestInst(opcode: Op, ty: Type, lhs: Inst, rhs: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(opcode);
    inst.addInput(lhs);
    inst.addInput(rhs);
    inst.ty = ty;
    inst
}

pub fn createUndefInst(): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Undef);
    inst
}

pub fn createPhiInst(ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Phi);
    inst.ty = ty;
    inst
}

pub fn createBoundsCheck(index: Inst, length: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::BoundsCheck);
    inst.addInput(index);
    inst.addInput(length);
    inst
}

pub fn createDivZeroCheck(value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::DivZeroCheck);
    inst.addInput(value);
    inst
}

pub fn createArrayGet(array: Inst, index: Inst, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArrayGet);
    inst.ty = ty;
    inst.addInput(array);
    inst.addInput(index);
    inst
}

pub fn createArraySet(array: Inst, index: Inst, value: Inst, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArraySet);
    inst.ty = ty;
    inst.addInput(array);
    inst.addInput(index);
    inst.addInput(value);
    inst
}

pub fn createArrayLength(array: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::ArrayLength);
    inst.addInput(array);
    inst
}

pub class FieldInfo {
    pub cls_id: ClassId,
    pub type_params: Array[BytecodeType],
    pub field_id: FieldId,
    pub offset: Option[Int32],
}

pub class FunctionInfo {
    pub fct_id: FctId,
    pub type_params: Array[BytecodeType],
}

pub fn createLoadFieldInst(obj: Inst, field: FieldInfo, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::LoadField);
    inst.ty = ty;
    inst.addInput(obj);
    inst
}

pub fn createStoreFieldInst(obj: Inst, field: FieldInfo, value: Inst): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::StoreField);
    inst.addInput(obj);
    inst.addInput(value);
    inst
}

pub fn createArgInst(index: Int32, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Arg);
    inst.ty = ty;
    inst.aux = index.toInt64();
    inst
}

pub fn createReturnInst(value: Inst, ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Return);
    inst.ty = ty;
    inst.addInput(value);
    inst
}

pub fn createReturnVoidInst(): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Return);
    inst.ty = Type::Unit;
    inst
}

pub fn createIfInst(cond: Inst, thenBlock: Block, elseBlock: Block): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::If);
    inst.extra = InstExtraData::If(thenBlock, elseBlock);
    inst.addInput(cond);
    inst
}

pub fn createGotoInst(block: Block): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::Goto);
    inst.extra = InstExtraData::Goto(block);
    inst
}

pub fn createInvokeStaticInst(info: FunctionInfo, args: Vec[Inst], return_ty: Type): Inst {
    let inst = Inst::new();
    inst._op = Some(Op::InvokeStatic);
    inst.extra = InstExtraData::FunctionInfo(info);
    inst.ty = return_ty;

    for arg in args {
        inst.addInput(arg);
    }

    inst
}

class InstLinkedList {
    first: Option[Inst],
    last: Option[Inst],
}

impl InstLinkedList {
    static fn new(): InstLinkedList {
        InstLinkedList(None[Inst], None[Inst])
    }

    fn isEmpty(): Bool {
        self.first.isNone()
    }

    fn firstInst(): Inst {
        self.first.getOrPanic()
    }

    fn lastInst(): Inst {
        self.last.getOrPanic()
    }

    fn appendInst(inst: Inst) {
        if self.first.isNone() {
            inst.previous = None;
            inst.next = None;

            self.first = Some(inst);
            self.last = Some(inst);
        } else {
            self.last.getOrPanic().next = Some(inst);

            inst.previous = self.last;
            inst.next = None;

            self.last = Some(inst);
        }
    }

    fn insertBefore(inst: Inst, location: Inst) {
        if location.previous.isNone() {
            assert(self.first.getOrPanic() === location);
            inst.previous = None;
            inst.next = Some(location);
            location.previous = Some(inst);
            self.first = Some(inst);
        } else {
            let previous = location.previous.getOrPanic();
            previous.next = Some(inst);
            inst.previous = Some(location.previous.getOrPanic());
            inst.next = Some(location);
            location.previous = Some(inst);
        }
    }

    fn removeInst(inst: Inst) {
        if inst.previous.isSome() {
            let previous = inst.previous.getOrPanic();
            previous.next = inst.next;
        } else {
            self.first = inst.next;
        }

        if inst.next.isSome() {
            let next = inst.next.getOrPanic();
            next.previous = inst.previous;
        } else {
            self.last = inst.previous;
        }
    }
}

class InstIterator {
    current: Option[Inst]
}

impl InstIterator {
    static fn new(block: Block): InstIterator {
        InstIterator(block.instructions.first)
    }
}

impl Iterator for InstIterator {
    type Item = Inst;

    fn next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.next;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

class PhiInstIterator {
    current: Option[Inst],
}

impl PhiInstIterator {
    static fn new(block: Block): PhiInstIterator {
        PhiInstIterator(block.phis.first)
    }
}

impl Iterator for PhiInstIterator {
    type Item = Inst;

    fn next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.next;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

class BackwardInstIterator {
    current: Option[Inst],
}

impl BackwardInstIterator {
    static fn new(block: Block): BackwardInstIterator {
        BackwardInstIterator(block.instructions.last)
    }
}

impl Iterator for BackwardInstIterator {
    type Item = Inst;

    fn next(): Option[Inst] {
        if self.current.isSome() {
            let inst = self.current.getOrPanic();
            self.current = inst.previous;
            Some[Inst](inst)
        } else {
            None[Inst]
        }
    }
}

pub class Edge {
    pub source: Block,
    pub sourceIdx: Int64,
    pub target: Block,
    pub targetIdx: Int64,
    backward: Bool,
} 

impl Edge {
    pub static fn new(source: Block, sourceIdx: Int64, target: Block, targetIdx: Int64): Edge {
        Edge(
            source,
            sourceIdx,
            target,
            targetIdx,
            false,
        )
    }

    pub fn markAsBackwardEdge() {
        assert(!self.backward);
        self.backward = true;
    }

    pub fn isBackward(): Bool {
        self.backward
    }
}
