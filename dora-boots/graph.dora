class Graph {
    var entryBlock: Option[Block] = None;

    var blocks: Vec[Option[Block]] = Vec();
    var postOrder: Vec[Block] = Vec();

    var nextBlockIdValue: Int32 = 0I;
    var nextInstIdValue: Int32 = 0I;

    fun addBlock(block: Block) {
        assert(block.graph.isNone() && block.id == -1I);

        block.graph = Some(self);
        block.id = self.nextBlockId().value;
        self.blocks.push(Some[Block](block));
    }

    fun getBlockWithId(id: Int32): Block {
        self.blocks(id.toInt64()).getOrPanic()
    }

    fun setEntryBlock(block: Block) {
        self.entryBlock = Some(block);
    }

    fun getEntryBlock(): Block {
        self.entryBlock.getOrPanic()
    }

    fun nextInstId(): Int32 {
        let id = self.nextInstIdValue;
        self.nextInstIdValue = id + 1I;

        id
    }

    fun nextBlockId(): BlockId {
        let id = self.nextBlockIdValue;
        self.nextBlockIdValue = id + 1I;

        BlockId(id)
    }

    fun blockCount(): Int32 {
        self.nextBlockIdValue
    }

    fun setPostOrder(postOrder: Vec[Block]) {
        self.postOrder = postOrder;

        for (idx, block) in self.postOrder.enumerate() {
            block.postOrderIdx = idx.toInt32();
        }
    }

    fun rebuildDominatorTree() {
        // TODO: clear data of dominance and loop analysis
        self.buildDominatorTree();
    }

    fun buildDominatorTree() {
        buildDominatorTree(self);
    }

    fun insertionOrderIterator(): InsertionOrderIterator {
        InsertionOrderIterator(self.blocks.toArray())
    }

    fun postOrderIterator(): PostOrderIterator {
        PostOrderIterator(self.postOrder.toArray())
    }

    fun reversePostOrderIterator(): ReversePostOrderIterator {
        ReversePostOrderIterator(self.postOrder.toArray())
    }
}

class InsertionOrderIterator(let blocks: Array[Option[Block]]) {
    var idx: Int64 = 0L;

    fun hasNext(): Bool {
        self.findNextBlock();

        self.idx < self.blocks.size()
    }

    fun next(): Block {
        let block = self.blocks(self.idx).getOrPanic();
        self.idx = self.idx + 1L;
        block
    }

    fun findNextBlock() {
        while self.idx < self.blocks.size() {
            let block = self.blocks(self.idx);

            if block.isSome() {
                break;
            }

            self.idx = self.idx + 1L;
        }
    }
}

class PostOrderIterator(let postOrder: Array[Block]) {
    var idx: Int64 = 0L;

    fun hasNext(): Bool {
        self.idx < self.postOrder.size()
    }

    fun next(): Block {
        let block = self.postOrder(self.idx);
        self.idx = self.idx + 1L;
        block
    }
}

class ReversePostOrderIterator(let postOrder: Array[Block]) {
    var idx: Int64 = self.postOrder.size() - 1L;

    fun hasNext(): Bool {
        self.idx != -1L
    }

    fun next(): Block {
        let block = self.postOrder(self.idx);
        self.idx = self.idx - 1L;
        block
    }
}

struct BlockId(value: Int32)

class Block() {
    var id: Int32 = -1I;

    var phis: InstLinkedList = InstLinkedList();
    var instructions: InstLinkedList = InstLinkedList();

    var graph: Option[Graph] = None;

    var dominator: Option[Block] = None;
    var dominatedBlocks: Vec[Block] = Vec();

    var predecessors: Vec[Edge] = Vec();
    var successors: Vec[Edge] = Vec();

    var loopData: Option[LoopData] = None;

    var postOrderIdx: Int32 = -1I;

    fun getDominator(): Option[Block] = self.dominator;

    fun setDominator(block: Block) {
        self.dominator = Some(block);
    }

    fun dominates(other: Block): Bool =
        if self == other {
            true
        } else {
            self.strictlyDominates(other)
        };

    fun strictlyDominates(other: Block): Bool {
        var current = other.getDominator();

        while current.isSome() {
            if self === current.getOrPanic() { return true; }
            current = current.getOrPanic().getDominator();
        }

        false
    }

    fun getDominatedBlocks(): Vec[Block] = self.dominatedBlocks;

    fun addDominatedBlock(block: Block) {
        self.dominatedBlocks.push(block);
    }

    fun addSuccessor(block: Block): Edge {
        let edge = Edge(self, block);
        self.successors.push(edge);
        block.predecessors.push(edge);
        edge
    }

    fun appendPhi(phi: PhiInst): PhiInst {
        assert(phi.block.isNone() && phi.id == -1I);

        phi.block = Some(self);
        phi.id = self.graph.getOrPanic().nextInstId();

        self.phis.appendInst(phi);
        phi.registerUses();

        phi
    }

    fun appendInst(inst: Inst): Inst {
        assert(inst.block.isNone() && inst.id == -1I);

        inst.block = Some(self);
        inst.id = self.graph.getOrPanic().nextInstId();

        self.instructions.appendInst(inst);
        inst.registerUses();

        inst
    }

    fun addBackEdge(block: Block) {
        if self.loopData.isNone() {
            self.loopData = Some(LoopData(self));
        }
        self.loopData.getOrPanic().addBackEdge(block);
    }

    fun isLoopHeader(): Bool {
        self.loopData.isSome() && self.loopData.getOrPanic().header === self
    }

    fun getLoopData(): Option[LoopData] {
        self.loopData
    }

    fun setLoopData(loop: LoopData) {
        self.loopData = Some(loop);
    }

    fun clearLoopData() {
        self.loopData = None;
    }

    fun isEntryBlock(): Bool {
        self.graph.getOrPanic().getEntryBlock() === self
    }

    fun instructionsIterator(): InstIterator {
        InstIterator(self)
    }

    fun reverseInstructionsIterator(): BackwardInstIterator {
        BackwardInstIterator(self)
    }

    fun phisIterator(): PhiInstIterator {
        PhiInstIterator(self)
    }

    fun firstInst(): Inst {
        self.instructions.firstInst()
    }

    fun lastInst(): Inst {
        self.instructions.lastInst()
    }

    fun removePhi(inst: PhiInst) {
        unimplemented();
    }
}

impl Hash for Block {
  fun hash(): Int32 = self.id.hash();
}

impl Equals for Block {
  fun equals(other: Block): Bool = self === other;
}

import std::BitVec;

class LoopData(let header: Block) {
    var backEdges: Vec[Block] = Vec();
    let blocks: BitVec = BitVec();

    fun getHeader(): Block {
        self.header
    }

    fun addBackEdge(block: Block) {
        self.backEdges.push(block);
    }

    fun numberBackEdges(): Int32 {
        self.backEdges.size().toInt32()
    }

    fun addBlock(block: Block) {
        self.blocks.insert(block.id.toInt64());
    }

    fun containsBlock(block: Block): Bool {
        self.blocks.contains(block.id.toInt64())
    }

    fun containsLoop(other: LoopData): Bool {
        self.containsBlock(other.header)
    }
}

class Input(var idx: Int32, var value: Inst, var usedBy: Inst) {
    var previousUse: Option[Input] = None;
    var nextUse: Option[Input] = None;
}

@abstract @open class Inst {
    var id: Int32 = -1I;
    var block: Option[Block] = None;

    var previous: Option[Inst] = None;
    var next: Option[Inst] = None;

    var ty: Type = Type::Unit;

    var useListHead: Option[Input] = None;
    var useListTail: Option[Input] = None;

    var inputs: Vec[Input] = Vec();

    fun getType(): Type {
        return self.ty;
    }

    fun addInput(inst: Inst) {
        let input = Input(self.inputs.size().toInt32(), inst, self);
        self.inputs.push(input);
    }

    fun addUse(input: Input) {
        assert(input.value === self);

        if self.useListHead.isNone() {
            assert(self.useListTail.isNone());
            input.previousUse = None;
            input.nextUse = None;

            self.useListHead = Some(input);
            self.useListTail = Some(input);
        } else {
            assert(self.useListHead.isSome());
            assert(self.useListTail.isSome());

            self.useListTail.getOrPanic().nextUse = Some(input);

            input.previousUse = self.useListTail;
            input.nextUse = None;

            self.useListTail = Some(input);
        }
    }

    fun remove() {
        assert(!self.hasUses());
        assert(self.block.isSome());

        self.removeAsUser();
        let block = self.block.getOrPanic();

        if self is PhiInst {
            block.phis.removeInst(self);
        } else {
            block.instructions.removeInst(self);
        }

        self.block = None;
    }

    fun registerUses() {
        for input in self.inputs {
            input.value.addUse(input);
        }
    }

    fun removeAsUser() {
        for input in self.inputs {
            removeUse(input);
        }
    }

    fun hasUses(): Bool {
        let result = self.useListHead.isSome();
        assert(result == self.useListTail.isSome());
        result
    }

    fun replaceWith(replacement: Inst) {
        while self.useListHead.isSome() {
            let input = self.useListHead.getOrPanic();
            input.usedBy.replaceInput(replacement, input.idx);
        }
    }

    fun replaceInput(replacement: Inst, idx: Int32) {
        let input = self.inputs(idx.toInt64());

        if input.value === replacement {
            return;
        }

        removeUse(input);
        input.value = replacement;
        replacement.addUse(input);
    }

    fun users(): Array[Inst] {
        let data = Vec[Inst]();
        var current = self.useListHead;

        while current.isSome() {
            let cur = current.getOrPanic();
            data.push(cur.usedBy);
            current = cur.nextUse;
        }

        data.toArray()
    }

    fun uses(): UseIterator {
        UseIterator(self)
    }

    fun dominates(other: Inst): Bool {
        let sblock = self.block.getOrPanic();
        let oblock = other.block.getOrPanic();

        if sblock === oblock {
            var current = self.next;

            while current.isSome() {
                let currentInst = current.getOrPanic();

                if currentInst === other {
                    return true;
                }

                current = currentInst.next;
            }

            false
        } else {
            sblock.dominates(oblock)
        }
    }

    fun isDeadAndRemovable(): Bool {
        self.isRemovable() && !self.hasUses()
    }

    @open @abstract fun dumpName(): String;
    @open @abstract fun isTerminator(): Bool;
    @open @abstract fun isRemovable(): Bool;
}

class UseIterator(inst: Inst) {
    var current: Option[Input] = inst.useListHead;

    fun hasNext(): Bool {
        self.current.isSome()
    }

    fun next(): Input {
        let input = self.current.getOrPanic();
        self.current = input.nextUse;
        input
    }
}

fun removeUse(input: Input) {
    let inst = input.value;

    if input.previousUse.isSome() {
        input.previousUse.getOrPanic().nextUse = input.nextUse;
    } else {
        inst.useListHead = input.nextUse;
    }

    if input.nextUse.isSome() {
        input.nextUse.getOrPanic().previousUse = input.previousUse;
    } else {
        inst.useListTail = input.previousUse;
    }

    assert(inst.useListHead.isSome() == inst.useListTail.isSome());

    input.previousUse = None;
    input.nextUse = None;
}

@abstract @open class Const extends Inst

class NullConst(let value: UInt8) extends Const {
    @override fun dumpName(): String { "Const.Null" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class Int32Const(let value: Int32) extends Const {
    @override fun dumpName(): String { "Const.Int32(#${self.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class Int64Const(let value: Int64) extends Const {
    @override fun dumpName(): String { "Const.Int64(#${self.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class Float32Const(let value: Float32) extends Const {
    @override fun dumpName(): String { "Const.Float32(#${self.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class Float64Const(let value: Float64) extends Const {
    @override fun dumpName(): String { "Const.Float64(#${self.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class LoadGlobalInst(ty: Type, let global: GlobalId) extends Inst {
    self.ty = ty;

    @override fun dumpName(): String { "LoadGlobal.${self.ty}(${self.global.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class StoreGlobalInst(ty: Type, let global: GlobalId, let value: Inst) extends Inst {
    self.addInput(value);
    self.ty = ty;

    @override fun dumpName(): String { "StoreGlobal.${self.ty}(${self.global.value})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { false }
}


class UnaryInst(let op: UnOp, ty: Type, let opnd: Inst) extends Inst {
    self.addInput(opnd);
    self.ty = ty;

    @override fun dumpName(): String { "${unOpName(self.op)}.${self.ty}" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class BinaryInst(let op: BinOp, ty: Type, let lhs: Inst, let rhs: Inst) extends Inst {
    self.addInput(lhs);
    self.addInput(rhs);
    self.ty = ty;

    @override fun dumpName(): String { "${binOpName(self.op)}.${self.ty}" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class TestInst(let op: TestOp, ty: Type, let lhs: Inst, let rhs: Inst) extends Inst {
    self.addInput(lhs);
    self.addInput(rhs);
    self.ty = ty;

    @override fun dumpName(): String { "${self.op.name()}.${self.ty}" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class UndefInst extends Inst {
    @override fun dumpName(): String { "Undef" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class PhiInst extends Inst {
    @override fun dumpName(): String { "Phi" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class BoundsCheck(let index: Inst, let length: Inst) extends Inst {
    self.addInput(index);
    self.addInput(length);

    @override fun dumpName(): String { "BoundsCheck" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { false }
}

class DivZeroCheck(let value: Inst) extends Inst {
    self.addInput(value);

    @override fun dumpName(): String { "DivZeroCheck" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { false }
}

class ArrayGet(let array: Inst, let index: Inst, ty: Type) extends Inst {
    self.ty = ty;

    self.addInput(array);
    self.addInput(index);

    @override fun dumpName(): String { "ArrayGet.${self.ty}" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class ArraySet(let array: Inst, let index: Inst, let value: Inst) extends Inst {
    self.addInput(array);
    self.addInput(index);
    self.addInput(value);

    @override fun dumpName(): String { "ArraySet" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { false }
}

class ArrayLength(let array: Inst) extends Inst {
    self.addInput(array);

    @override fun dumpName(): String { "ArrayLength" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class FieldInfo(let offset: Int32, let volatile: Bool)

class FieldGet(let obj: Inst, let field: FieldInfo, ty: Type) extends Inst {
    self.ty = ty;

    self.addInput(obj);

    @override fun dumpName(): String { "FieldGet.${self.ty}" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class FieldSet(let obj: Inst, let field: FieldInfo, let value: Inst) extends Inst {
    self.addInput(obj);
    self.addInput(value);

    @override fun dumpName(): String { "FieldSet" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { false }
}

class ArgInst(let index: Int32, ty: Type) extends Inst {
    self.ty = ty;

    @override fun dumpName(): String { "Arg.${self.ty}(${self.index})" }
    @override fun isTerminator(): Bool { false }
    @override fun isRemovable(): Bool { true }
}

class ReturnInst(let value: Inst, ty: Type) extends Inst {
    self.ty = ty;
    self.addInput(value);

    @override fun dumpName(): String { "Ret.${self.ty}" }
    @override fun isTerminator(): Bool { true }
    @override fun isRemovable(): Bool { false }
}

class ReturnVoidInst extends Inst {
    @override fun dumpName(): String { "Ret.Void" }
    @override fun isTerminator(): Bool { true }
    @override fun isRemovable(): Bool { false }
}

class IfInst(let cond: Inst, let true_block: Block, let false_block: Block) extends Inst {
    self.addInput(cond);

    @override fun dumpName(): String { "If(@${self.true_block.id}, @${self.false_block.id})" }
    @override fun isTerminator(): Bool { true }
    @override fun isRemovable(): Bool { false }
}

class GotoInst(let block: Block) extends Inst {
    @override fun dumpName(): String { "Goto(@${self.block.id})" }
    @override fun isTerminator(): Bool { true }
    @override fun isRemovable(): Bool { false }
}

enum BinOp {
    Add, Sub, Mul, Div, Mod, And, Or, Xor, Shl, Shr, Sar
}

fun binOpName(op: BinOp): String {
    if op == BinOp::Add {
        "Add"
    } else if op == BinOp::Sub {
        "Sub"
    } else if op == BinOp::Mul {
        "Mul"
    } else if op == BinOp::Div {
        "Div"
    } else if op == BinOp::Mod {
        "Mod"
    } else if op == BinOp::And {
        "And"
    } else if op == BinOp::Or {
        "Or"
    } else if op == BinOp::Xor {
        "Xor"
    } else if op == BinOp::Shl {
        "Shl"
    } else if op == BinOp::Shr {
        "Shr"
    } else if op == BinOp::Sar {
        "Sar"
    } else {
        unreachable[String]()
    }
}

enum TestOp {
    Equal,
    NotEqual,
    Greater,
    GreaterOrEqual,
    Less,
    LessOrEqual
}

impl TestOp {
    fun name(): String {
        if self == TestOp::Equal {
            "Equal"
        } else if self == TestOp::NotEqual {
            "NotEqual"
        } else if self == TestOp::Greater {
            "Greater"
        } else if self == TestOp::GreaterOrEqual {
            "GreaterOrEqual"
        } else if self == TestOp::Less {
            "Less"
        } else if self == TestOp::LessOrEqual {
            "LessOrEqual"
        } else {
            unreachable[String]()
        }
    }
}

enum UnOp {
    Neg, FNeg, Not,
}

fun unOpName(op: UnOp): String {
    if op == UnOp::Neg {
        "Neg"
    } else if op == UnOp::Not {
        "Not"
    } else {
        unreachable[String]()
    }
}

class InstLinkedList {
    var first: Option[Inst] = None;
    var last: Option[Inst] = None;

    fun isEmpty(): Bool {
        self.first.isNone()
    }

    fun firstInst(): Inst {
        self.first.getOrPanic()
    }

    fun lastInst(): Inst {
        self.last.getOrPanic()
    }

    fun appendInst(inst: Inst) {
        if self.first.isNone() {
            inst.previous = None;
            inst.next = None;

            self.first = Some(inst);
            self.last = Some(inst);
        } else {
            self.last.getOrPanic().next = Some(inst);

            inst.previous = self.last;
            inst.next = None;

            self.last = Some(inst);
        }
    }

    fun removeInst(inst: Inst) {
        if inst.previous.isSome() {
            let previous = inst.previous.getOrPanic();
            previous.next = inst.next;
        } else {
            self.first = inst.next;
        }

        if inst.next.isSome() {
            let next = inst.next.getOrPanic();
            next.previous = inst.previous;
        } else {
            self.last = inst.previous;
        }
    }
}

class InstIterator(block: Block) {
    var current: Option[Inst] = block.instructions.first;

    fun hasNext(): Bool {
        self.current.isSome()
    }

    fun next(): Inst {
        let inst = self.current.getOrPanic();
        self.current = inst.next;
        inst
    }
}

class PhiInstIterator(block: Block) {
    var current: Option[Inst] = block.phis.first;

    fun hasNext(): Bool {
        self.current.isSome()
    }

    fun next(): PhiInst {
        let inst = self.current.getOrPanic();
        self.current = inst.next;
        inst as PhiInst
    }
}

class BackwardInstIterator(block: Block) {
    var current: Option[Inst] = block.instructions.last;

    fun hasNext(): Bool {
        self.current.isSome()
    }

    fun next(): Inst {
        let inst = self.current.getOrPanic();
        self.current = inst.previous;
        inst
    }
}

class Edge(let source: Block, let target: Block) {
    var backward: Bool = false;

    fun markAsBackwardEdge() {
        assert(!self.backward);
        self.backward = true;
    }
}
