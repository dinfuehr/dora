class Graph {
    var entryBlock: Block;
    var exitBlock: Block;

    var blocks: Vec[Block] = Vec[Block]();
    var postOrder: Vec[Block] = Vec[Block]();

    var nextBlockIdValue: Int32 = 0;
    var nextInstIdValue: Int32 = 0;

    fun addBlock(block: Block) {
        assert(block.graph.isNone() && block.id == -1);

        block.graph = Option::some[Graph](self);
        block.id = self.nextBlockId();
        self.blocks.push(block);
    }

    fun getBlockWithId(id: Int32) -> Block {
        self.blocks.get(id.toInt64())
    }

    fun setEntryBlock(block: Block) {
        self.entryBlock = block;
    }

    fun getEntryBlock() -> Block {
        self.entryBlock
    }

    fun setExitBlock(block: Block) {
        self.exitBlock = block;
    }

    fun getExitBlock() -> Block {
        self.exitBlock
    }

    fun nextInstId() -> Int32 {
        let id = self.nextInstIdValue;
        self.nextInstIdValue = id + 1;

        id
    }

    fun nextBlockId() -> Int32 {
        let id = self.nextBlockIdValue;
        self.nextBlockIdValue = id + 1;

        id
    }

    fun numberBlocks() -> Int32 {
        self.nextBlockIdValue
    }

    fun setPostOrder(postOrder: Vec[Block]) {
        self.postOrder = postOrder;

        var idx = 0L;
        while idx < self.postOrder.length() {
            let block = self.postOrder.get(idx);
            block.postOrderIdx = idx.toInt32();
            idx = idx + 1L;
        }
    }

    fun buildDominatorTree() {
        findBackEdges(self);
        computePostOrder(self);
        computeDominators(self);
    }

    fun insertionOrderIterator() -> VecIter[Block] {
        self.blocks.makeIterator()
    }

    fun postOrderIterator() -> PostOrderIterator {
        PostOrderIterator(self.postOrder)
    }

    fun reversePostOrderIterator() -> ReversePostOrderIterator {
        ReversePostOrderIterator(self.postOrder)
    }
}

class PostOrderIterator(let postOrder: Vec[Block]) {
    var idx: Int64 = 0L;

    fun hasNext() -> Bool {
        self.idx < self.postOrder.length()
    }

    fun next() -> Block {
        let block = self.postOrder.get(self.idx);
        self.idx = self.idx + 1L;
        block
    }
}

class ReversePostOrderIterator(let postOrder: Vec[Block]) {
    var idx: Int64 = self.postOrder.length() - 1L;

    fun hasNext() -> Bool {
        self.idx != -1L
    }

    fun next() -> Block {
        let block = self.postOrder.get(self.idx);
        self.idx = self.idx - 1L;
        block
    }
}

class Block() {
    var id: Int32 = -1;

    var phis: InstLinkedList = InstLinkedList();
    var instructions: InstLinkedList = InstLinkedList();

    var graph: Option[Graph] = Option::none[Graph]();

    var dominator: Option[Block] = Option::none[Block]();
    var dominatedBlocks: Vec[Block] = Vec[Block]();

    var predecessors: Vec[Block] = Vec[Block]();
    var successors: Vec[Block] = Vec[Block]();

    var loopHeader: Option[LoopHeader] = Option::none[LoopHeader]();

    var postOrderIdx: Int32 = -1;

    fun getDominator() -> Option[Block] {
        self.dominator
    }

    fun setDominator(block: Block) {
        self.dominator = Option::some[Block](block);
    }

    fun dominates(other: Block) -> Bool {
        if self == other {
            true
        } else {
            self.strictlyDominates(other)
        }
    }

    fun strictlyDominates(other: Block) -> Bool {
        var current = other.getDominator();

        while current.isSome() {
            if self === current.unwrap() { return true; }
            current = current.unwrap().getDominator();
        }

        false
    }

    fun getDominatedBlocks() -> Vec[Block] {
        self.dominatedBlocks
    }

    fun addDominatedBlock(block: Block) {
        self.dominatedBlocks.push(block);
    }

    fun addPredecessor(block: Block) {
        self.predecessors.push(block);
        block.successors.push(self);
    }

    fun addSuccessor(block: Block) {
        self.successors.push(block);
        block.predecessors.push(self);
    }

    fun appendPhi(phi: PhiInst) -> PhiInst {
        assert(phi.block.isNone() && phi.id == -1);

        phi.block = Option::some[Block](self);
        phi.id = self.graph.unwrap().nextInstId();

        self.phis.appendInst(phi);
        phi.registerUses();

        phi
    }

    fun appendInst(inst: Inst) -> Inst {
        assert(inst.block.isNone() && inst.id == -1);

        inst.block = Option::some[Block](self);
        inst.id = self.graph.unwrap().nextInstId();

        self.instructions.appendInst(inst);
        inst.registerUses();

        inst
    }

    fun addBackEdge(block: Block) {
        if self.loopHeader.isNone() {
            self.loopHeader = Option::some[LoopHeader](LoopHeader(self));
        }
        self.loopHeader.unwrap().addBackEdge(block);
    }

    fun isLoopHeader() -> Bool {
        self.loopHeader.isSome()
    }

    fun getLoopHeader() -> Option[LoopHeader] {
        self.loopHeader
    }

    fun isEntryBlock() -> Bool {
        self.graph.unwrap().getEntryBlock() === self
    }

    fun isExitBlock() -> Bool {
        self.graph.unwrap().getExitBlock() === self
    }
}

impl Hash for Block {
  fun hash() -> Int32 = self.id.hash();
}

impl Equals for Block {
  fun equals(other: Block) -> Bool = self === other;
}

class LoopHeader(let header: Block) {
    var backEdges: Vec[Block] = Vec[Block]();

    fun getHeader() -> Block {
        self.header
    }

    fun addBackEdge(block: Block) {
        self.backEdges.push(block);
    }

    fun numberBackEdges() -> Int32 {
        self.backEdges.length().toInt32()
    }
}

class Input(var idx: Int32, var value: Inst, var usedBy: Inst) {
    var previousUse: Option[Input] = Option::none[Input]();
    var nextUse: Option[Input] = Option::none[Input]();
}

@abstract @open class Inst {
    var id: Int32 = -1;
    var block: Option[Block] = Option::none[Block]();

    var previous: Option[Inst] = Option::none[Inst]();
    var next: Option[Inst] = Option::none[Inst]();

    var ty: Type = nil;

    var useListHead: Option[Input] = Option::none[Input]();
    var useListTail: Option[Input] = Option::none[Input]();

    var inputs: Vec[Input] = Vec[Input]();

    fun getType() -> Type {
        return self.ty;
    }

    fun addInput(inst: Inst) {
        let input = Input(self.inputs.length().toInt32(), inst, self);
        self.inputs.push(input);
    }

    fun addUse(input: Input) {
        assert(input.value === self);

        if self.useListHead.isNone() {
            assert(self.useListTail.isNone());
            input.previousUse = Option::none[Input]();
            input.nextUse = Option::none[Input]();

            self.useListHead = Option::some[Input](input);
            self.useListTail = Option::some[Input](input);
        } else {
            assert(self.useListHead.isSome());
            assert(self.useListTail.isSome());

            self.useListTail.unwrap().nextUse = Option::some[Input](input);

            input.previousUse = self.useListTail;
            input.nextUse = Option::none[Input]();

            self.useListTail = Option::some[Input](input);
        }
    }

    fun removeUse(input: Input) {
        assert(input.value === self);

        if input.previousUse.isSome() {
            input.previousUse.unwrap().nextUse = input.nextUse;
        } else {
            self.useListHead = input.nextUse;
        }

        if input.nextUse.isSome() {
            input.nextUse.unwrap().previousUse = input.previousUse;
        } else {
            self.useListTail = input.previousUse;
        }

        assert(self.useListHead.isSome() == self.useListTail.isSome());

        input.previousUse = Option::none[Input]();
        input.nextUse = Option::none[Input]();
    }

    fun remove() {
        assert(!self.hasUses());
        assert(self.block.isSome());

        self.removeAsUser();
        let block = self.block.unwrap();

        if self is PhiInst {
            block.phis.removeInst(self);
        } else {
            block.instructions.removeInst(self);
        }

        self.block = Option::none[Block]();
    }

    fun registerUses() {
        let inputs = self.inputs.length();
        var idx = 0L;

        while idx < inputs {
            let input = self.inputs.get(idx);
            input.value.addUse(input);
            idx = idx + 1L;
        }
    }

    fun removeAsUser() {
        let inputs = self.inputs.length();
        var idx = 0L;

        while idx < inputs {
            let input = self.inputs.get(idx);
            input.value.removeUse(input);
            idx = idx + 1L;
        }
    }

    fun hasUses() -> Bool {
        let result = self.useListHead.isSome();
        assert(result == self.useListTail.isSome());
        result
    }

    fun replaceWith(replacement: Inst) {
        while self.useListHead.isSome() {
            let input = self.useListHead.unwrap();
            input.usedBy.replaceInput(replacement, input.idx);
        }
    }

    fun replaceInput(replacement: Inst, idx: Int32) {
        let input = self.inputs.get(idx.toInt64());

        if input.value === replacement {
            return;
        }

        input.value.removeUse(input);
        input.value = replacement;
        replacement.addUse(input);
    }

    fun users() -> Array[Inst] {
        let data = Vec[Inst]();
        var current = self.useListHead;

        while current.isSome() {
            let cur = current.unwrap();
            data.push(cur.usedBy);
            current = cur.nextUse;
        }

        data.toArray()
    }

    @open @abstract fun dumpName() -> String;
}

@abstract @open class Const: Inst

class NullConst(let value: UInt8): Const {
    @override fun dumpName() -> String { "Null" }
}

class Int32Const(let value: Int32): Const {
    @override fun dumpName() -> String { "Int32(${self.value})" }
}

class Int64Const(let value: Int64): Const {
    @override fun dumpName() -> String { "Int64(${self.value})" }
}

class Float32Const(let value: Float): Const {
    @override fun dumpName() -> String { "Float32(${self.value})" }
}

class Float64Const(let value: Double): Const {
    @override fun dumpName() -> String { "Float64(${self.value})" }
}

class LoadGlobalInst(ty: Type, let global: GlobalId): Inst {
    self.ty = ty;

    @override fun dumpName() -> String { "LoadGlobal.${self.ty}(${self.global.value})" }
}

class StoreGlobalInst(ty: Type, let global: GlobalId, let value: Inst): Inst {
    self.addInput(value);
    self.ty = ty;

    @override fun dumpName() -> String { "StoreGlobal.${self.ty}(${self.global.value})" }
}


class UnaryInst(let op: UnOp, ty: Type, let opnd: Inst): Inst {
    self.addInput(opnd);
    self.ty = ty;

    @override fun dumpName() -> String { "${unOpName(self.op)}.${self.ty}" }
}

class BinaryInst(let op: BinOp, ty: Type, let lhs: Inst, let rhs: Inst): Inst {
    self.addInput(lhs);
    self.addInput(rhs);
    self.ty = ty;

    @override fun dumpName() -> String { "${binOpName(self.op)}.${self.ty}" }
}

class TestInst(let op: TestOp, ty: Type, let lhs: Inst, let rhs: Inst): Inst {
    self.addInput(lhs);
    self.addInput(rhs);
    self.ty = ty;

    @override fun dumpName() -> String { "${self.op.name()}.${self.ty}" }
}

class UndefInst: Inst {
    @override fun dumpName() -> String { "Undef" }
}

class PhiInst: Inst {
    @override fun dumpName() -> String { "Phi" }
}

class ArrayGet(let array: Inst, let index: Inst): Inst {
    self.addInput(array);
    self.addInput(index);

    @override fun dumpName() -> String { "ArrayGet" }
}

class ArraySet(let array: Inst, let index: Inst, let value: Inst): Inst {
    self.addInput(array);
    self.addInput(index);
    self.addInput(value);

    @override fun dumpName() -> String { "ArraySet" }
}

class ArrayLength(let array: Inst): Inst {
    self.addInput(array);

    @override fun dumpName() -> String { "ArrayLength" }
}

class ArgInst(let index: Int32, ty: Type): Inst {
    self.ty = ty;

    @override fun dumpName() -> String { "Arg.${self.ty}(${self.index})" }
}

class ReturnInst(let value: Inst, ty: Type): Inst {
    self.ty = ty;
    self.addInput(value);

    @override fun dumpName() -> String { "Ret.${self.ty}" }
}

class ReturnVoidInst: Inst {
    @override fun dumpName() -> String { "Ret.Void" }
}

class IfInst(let cond: Inst, let true_block: Block, let false_block: Block): Inst {
    self.addInput(cond);

    @override fun dumpName() -> String { "If(${self.true_block.id}, ${self.false_block.id})" }
}

class GotoInst(let block: Block): Inst {
    @override fun dumpName() -> String { "Goto(${self.block.id})" }
}

enum BinOp {
    Add, Sub, Mul, Div, Mod, And, Or, Xor, Shl, Shr, Sar
}

fun binOpName(op: BinOp) -> String {
    if op == BinOp::Add {
        "Add"
    } else if op == BinOp::Sub {
        "Sub"
    } else if op == BinOp::Mul {
        "Mul"
    } else if op == BinOp::Div {
        "Div"
    } else if op == BinOp::Mod {
        "Mod"
    } else if op == BinOp::And {
        "And"
    } else if op == BinOp::Or {
        "Or"
    } else if op == BinOp::Xor {
        "Xor"
    } else if op == BinOp::Shl {
        "Shl"
    } else if op == BinOp::Shr {
        "Shr"
    } else if op == BinOp::Sar {
        "Sar"
    } else {
        unreachable();
        ""
    }
}

enum TestOp {
    Equal,
    NotEqual,
    Greater,
    GreaterOrEqual,
    Less,
    LessOrEqual
}

impl TestOp {
    fun name() -> String {
        if self == TestOp::Equal {
            "Equal"
        } else if self == TestOp::NotEqual {
            "NotEqual"
        } else if self == TestOp::Greater {
            "Greater"
        } else if self == TestOp::GreaterOrEqual {
            "GreaterOrEqual"
        } else if self == TestOp::Less {
            "Less"
        } else if self == TestOp::LessOrEqual {
            "LessOrEqual"
        } else {
            unreachable();
            ""
        }
    }
}

enum UnOp {
    Neg, FNeg, Not,
}

fun unOpName(op: UnOp) -> String {
    if op == UnOp::Neg {
        "Neg"
    } else if op == UnOp::Not {
        "Not"
    } else {
        unreachable();
        ""
    }
}

class InstLinkedList {
    var first: Option[Inst] = Option::none[Inst]();
    var last: Option[Inst] = Option::none[Inst]();

    fun isEmpty() -> Bool {
        self.first.isNone()
    }

    fun firstInst() -> Option[Inst] {
        self.first
    }

    fun lastInst() -> Option[Inst] {
        self.last
    }

    fun appendInst(inst: Inst) {
        if self.first.isNone() {
            inst.previous = Option::none[Inst]();
            inst.next = Option::none[Inst]();

            self.first = Option::some[Inst](inst);
            self.last = Option::some[Inst](inst);
        } else {
            self.last.unwrap().next = Option::some[Inst](inst);

            inst.previous = self.last;
            inst.next = Option::none[Inst]();

            self.last = Option::some[Inst](inst);
        }
    }

    fun removeInst(inst: Inst) {
        if inst.previous.isSome() {
            let previous = inst.previous.unwrap();
            previous.next = inst.next;
        } else {
            self.first = inst.next;
        }

        if inst.next.isSome() {
            let next = inst.next.unwrap();
            next.previous = inst.previous;
        } else {
            self.last = inst.previous;
        }
    }
}

class InstIterator(block: Block) {
    var current: Option[Inst] = block.instructions.first;

    fun hasNext() -> Bool {
        self.current.isSome()
    }

    fun next() -> Inst {
        let inst = self.current.unwrap();
        self.current = inst.next;
        inst
    }
}

class PhiInstIterator(block: Block) {
    var current: Option[Inst] = block.phis.first;

    fun hasNext() -> Bool {
        self.current.isSome()
    }

    fun next() -> Inst {
        let inst = self.current.unwrap();
        self.current = inst.next;
        inst
    }
}

class BackwardInstIterator(block: Block) {
    var current: Option[Inst] = block.instructions.last;

    fun hasNext() -> Bool {
        self.current.isSome()
    }

    fun next() -> Inst {
        let inst = self.current.unwrap();
        self.current = inst.previous;
        inst
    }
}
