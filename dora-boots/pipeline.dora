use package::interface::{Architecture, CompilationInfo};
use package::graph::Graph;
use package::graph_builder::createGraph;
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;

pub class CompilationJob {
    compilation_info: CompilationInfo,
    graph: Option[Graph],
}

impl CompilationJob {
    static pub fn new(info: CompilationInfo): CompilationJob {
        CompilationJob(info, None[Graph])
    }

    pub fn run(): Array[UInt8] {
        self.createGraph();
        self.optimizeGraph();
        self.assembleCode()
    }

    fn createGraph() {
        let graph = createGraph(self.compilation_info.bc);
        self.graph = Some(graph);
    }

    fn optimizeGraph() {
        // TODO
    }

    fn assembleCode(): Array[UInt8] {
        match self.compilation_info.arch {
            Architecture::X64 => CodeGenX64::new(self.compilation_info).generate(),
            Architecture::Arm64 => CodeGenArm64::new(self.compilation_info).generate(),
        }
    }
}
