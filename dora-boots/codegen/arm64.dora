use package::interface::CompilationInfo;
use package::interface::Architecture;
use package::codegen::{CodeGen, CodeDescriptor, CommentTable, LocationTable};
use package::assembler::arm64::AssemblerArm64;
use package::assembler::arm64::{R0, R1, R2, R3, R4, R5, R6, R7};
use package::assembler::arm64::{REG_FP, REG_SP, REG_LR};
use package::assembler::{Label, RegSet, Register};
use package::graph::{Inst, Op, LocationData};

pub class CodeGenArm64 {
    info: CompilationInfo,
    asm: AssemblerArm64,
}

impl CodeGenArm64 {
    pub static fn new(info: CompilationInfo): CodeGenArm64 {
        CodeGenArm64(info, AssemblerArm64::new())
    }

    pub fn generate(): Array[UInt8] {
        assert(self.info.arch == Architecture::Arm64);
        self.asm.ret();
        self.asm.finalize()
    }

    fn epilog() {
        self.asm.mov(REG_SP, REG_FP);
        self.asm.ldp_post(REG_FP, REG_LR, REG_SP, 16i32);
        self.asm.ret();
    }
}

let REG_PARAMS: Array[Register] = Array[Register]::new(R0, R1, R2, R3, R4, R5, R6, R7);

impl CodeGen for CodeGenArm64 {
    fn allocatableRegisters(): RegSet {
        RegSet::new(R0, R1, R2, R3, R4, R5, R6, R7)
    }

    fn argumentRegister(idx: Int64): Register {
        REG_PARAMS(idx)
    }

    fn prolog() {
        self.asm.stp_pre(REG_FP, REG_LR, REG_SP, -16i32);
        self.asm.mov(REG_FP, REG_SP);
    }

    fn setSubLocationData(inst: Inst, loc: LocationData) {
        loc.requireInputRegister(0);
        loc.requireInputRegister(1);
        loc.requireOutputRegister();
    }

    fn emitInt64Const(inst: Inst) {
        let loc = inst.getLocationData();
        let register = loc.getOutput().getRegister();
        self.asm.movz(register, inst.auxAsInt64().toInt32(), 0i32);
    }

    fn emitAdd(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        let output = loc.getOutput().getRegister();

        self.asm.add(output, lhs, rhs);
    }

    fn emitSub(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        let output = loc.getOutput().getRegister();

        self.asm.sub(output, lhs, rhs);
    }

    fn emitMul(inst: Inst) {
        unreachable[()]();
    }

    fn emitDiv(inst: Inst) {
        unreachable[()]();
    }

    fn emitMod(inst: Inst) {
        unreachable[()]();
    }

    fn emitReturn(inst: Inst) {
        if inst.hasInput() {
            let loc = inst.getLocationData();
            let register = loc.getInput(0).getRegister();

            if R0 != register {
                self.asm.mov(R0, register);
            }
        }

        self.epilog();
    }

    fn finalize(): CodeDescriptor {
        let code = self.asm.finalize();

        CodeDescriptor(
            code,
            CommentTable::new(),
            LocationTable::new(),
        )
    }
}
