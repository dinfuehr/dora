use package::interface::{Architecture, CompilationInfo, config, TRAP_DIV0, TRAP_OVERFLOW};
use package::codegen::{CODE_SIZE_ALIGNMENT, CodeGen, CodeDescriptor, CommentTable, Location, LocationTable};
use package::assembler::arm64::{AssemblerArm64, Cond, Shift, registerName};
use package::assembler::arm64::{R0, R1, R2, R3, R4, R5, R6, R7, R10, R11};
use package::assembler::arm64::{REG_FP, REG_SP, REG_LR, REG_ZERO};
use package::assembler::{Label, RegSet, Register};
use package::graph::{Inst, Op, LocationData, Type};

pub class CodeGenArm64 {
    info: CompilationInfo,
    asm: AssemblerArm64,
    locations: LocationTable,
    comments: CommentTable,
    deferred: Vec[(): ()],
}

impl CodeGenArm64 {
    pub static fn new(info: CompilationInfo): CodeGenArm64 {
        CodeGenArm64(
            info,
            AssemblerArm64::new(),
            LocationTable::new(),
            CommentTable::new(),
            Vec[(): ()]::new(),
        )
    }

    pub fn generate(): Array[UInt8] {
        self.asm.ret();
        self.asm.finalize()
    }

    fn epilog() {
        self.emitComment("epilog");
        self.asm.mov(REG_SP, REG_FP);
        self.asm.ldp_post(REG_FP, REG_LR, REG_SP, 16i32);
        self.asm.ret();
    }

    fn trap(tmp: Register, trap: Int32, loc: Location) {
        self.asm.movz(CCALL_REG_PARAMS(0), trap, 0i32);
        self.mov_imm(tmp, config.trap_trampoline.toInt64());
        self.asm.bl_r(tmp);
        self.locations.insert(self.asm.position(), loc);
    }

    fn mov_imm(dest: Register, imm: Int64) {
        self.asm.movz(dest, (imm & 0xFF_FF).toInt32(), 0i32);
        self.asm.movk(dest, ((imm >> 16i32) & 0xFF_FF).toInt32(), 16i32);
        self.asm.movk(dest, ((imm >> 32i32) & 0xFF_FF).toInt32(), 32i32);
        self.asm.movk(dest, ((imm >> 48i32) & 0xFF_FF).toInt32(), 48i32);
    }

    fn emitDeferredCode() {
        for code in self.deferred {
            code();
        }
    }

    fn emitCheckedDivModCommon(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        assert(inst.op() == Op::CheckedDiv || inst.op() == Op::CheckedMod);
        let is_div = inst.op() == Op::CheckedDiv;

        let dest = loc.getOutput().getRegister();
        let lbl_overflow = self.asm.createLabel();
        let lbl_div = self.asm.createLabel();

        self.asm.movz(REG_TMP1, 0x8000i32, 48i32);
        self.asm.cmp(lhs, REG_TMP1);
        self.asm.bc(Cond::NE, lbl_div);
        self.asm.cmn_imm(rhs, 1i32);
        self.asm.bc(Cond::EQ, lbl_overflow);

        self.asm.bindLabel(lbl_div);
        if is_div {
            self.asm.sdiv(dest, lhs, rhs);
        } else {
            self.asm.sdiv(REG_TMP1, lhs, rhs);
            self.asm.msub(dest, REG_TMP1, rhs, lhs);
        }

        self.deferred.push(|| {
            let op = if is_div { "CheckedDiv" } else { "CheckedMod" };
            self.emitComment("slow path for ${op} overflow");
            self.asm.bindLabel(lbl_overflow);
            self.trap(REG_TMP1, TRAP_OVERFLOW, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }
}

let REG_PARAMS: Array[Register] = Array[Register]::new(R0, R1, R2, R3, R4, R5, R6, R7);
let CCALL_REG_PARAMS: Array[Register] = REG_PARAMS;

let REG_TMP1: Register = R10;
let REG_TMP2: Register = R11;

impl CodeGen for CodeGenArm64 {
    fn allocatableRegisters(): RegSet {
        RegSet::new(R0, R1, R2, R3, R4, R5, R6, R7)
    }

    fn argumentRegister(idx: Int64): Register {
        REG_PARAMS(idx)
    }

    fn getScratchRegister(): Register {
        REG_TMP1
    }

    fn prolog() {
        self.asm.stp_pre(REG_FP, REG_LR, REG_SP, -16i32);
        self.asm.mov(REG_FP, REG_SP);
    }

    fn emitComment(comment: String) {
        self.comments.insert(self.asm.position(), comment);
    }

    fn registerName(register: Register): String {
        registerName(register)
    }

    fn createLabel(): Label {
        self.asm.createLabel()
    }

    fn bindLabel(label: Label) {
        self.asm.bindLabel(label);
    }

    fn emitTrueConst(inst: Inst) {
        let loc = inst.getLocationData();
        let register = loc.getOutput().getRegister();
        self.asm.movz_w(register, 1i32, 0i32);
    }

    fn emitFalseConst(inst: Inst) {
        let loc = inst.getLocationData();
        let register = loc.getOutput().getRegister();
        self.asm.movz_w(register, 0i32, 0i32);
    }

    fn emitInt64Const(inst: Inst) {
        let loc = inst.getLocationData();
        let register = loc.getOutput().getRegister();
        self.mov_imm(register, inst.auxAsInt64());
    }

    fn emitCheckedAdd(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        let output = loc.getOutput().getRegister();
        let lbl_overflow = self.asm.createLabel();

        self.asm.adds(output, lhs, rhs);
        self.asm.bc(Cond::VS, lbl_overflow);

        self.deferred.push(|| {
            self.emitComment("slow path for CheckedAdd overflow");
            self.asm.bindLabel(lbl_overflow);
            self.trap(REG_TMP1, TRAP_OVERFLOW, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }

    fn emitCheckedSub(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        let output = loc.getOutput().getRegister();
        let lbl_overflow = self.asm.createLabel();

        self.asm.subs(output, lhs, rhs);
        self.asm.bc(Cond::VS, lbl_overflow);

        self.deferred.push(|| {
            self.emitComment("slow path for CheckedSub overflow");
            self.asm.bindLabel(lbl_overflow);
            self.trap(REG_TMP1, TRAP_OVERFLOW, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }

    fn emitCheckedMul(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();

        let dest = loc.getOutput().getRegister();
        let lbl_overflow = self.asm.createLabel();
        assert(dest != lhs && dest != rhs);

        self.asm.mul(dest, lhs, rhs);
        self.asm.smulh(REG_TMP1, lhs, rhs);
        self.asm.cmp_sh(REG_TMP1, dest, Shift::ASR, 63i32);
        self.asm.bc(Cond::NE, lbl_overflow);

        self.deferred.push(|| {
            self.emitComment("slow path for CheckedMul overflow");
            self.asm.bindLabel(lbl_overflow);
            self.trap(REG_TMP1, TRAP_OVERFLOW, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }

    fn emitCheckedDiv(inst: Inst) {
        self.emitCheckedDivModCommon(inst);
    }

    fn emitCheckedMod(inst: Inst) {
        self.emitCheckedDivModCommon(inst);
    }

    fn emitDivZeroCheck(inst: Inst) {
        let loc = inst.getLocationData();
        let op = loc.getInput(0).getRegister();

        let lbl_failure = self.asm.createLabel();
        self.asm.cbz(op, lbl_failure);

        self.deferred.push(|| {
            self.emitComment("slow path for div-by-0 check");
            self.asm.bindLabel(lbl_failure);
            self.trap(REG_TMP1, TRAP_DIV0, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }

    fn emitCheckedNeg(inst: Inst) {
        let loc = inst.getLocationData();
        let src = loc.getInput(0).getRegister();
        let dest = loc.getOutput().getRegister();

        let lbl_overflow = self.asm.createLabel();
        self.asm.subs(dest, REG_ZERO, src);
        self.asm.bc(Cond::VS, lbl_overflow);

        self.deferred.push(|| {
            self.emitComment("slow path for CheckedNeg overflow");
            self.asm.bindLabel(lbl_overflow);
            self.trap(REG_TMP1, TRAP_OVERFLOW, self.info.bc.getLocationAt(inst.bytecode_position()));
        });
    }

    fn emitIf(inst: Inst) {
        let loc = inst.getLocationData();
        let opnd = loc.getInput(0).getRegister();

        let currentBlock = inst.getBlock();
        let trueBlock = inst.getTrueBlock();
        let falseBlock = inst.getFalseBlock();

        if currentBlock.postOrderIdx == trueBlock.postOrderIdx + 1i32 {
            self.asm.cbz(opnd, falseBlock.getLabel());
        } else {
            assert(currentBlock.postOrderIdx == falseBlock.postOrderIdx + 1i32);
            self.asm.cbnz(opnd, trueBlock.getLabel());
        }
    }

    fn emitGoto(inst: Inst) {
        let currentBlock = inst.getBlock();
        let targetBlock = inst.getTargetBlock();

        if currentBlock.postOrderIdx != targetBlock.postOrderIdx + 1i32 {
            self.asm.b(targetBlock.getLabel());
        }
    }

    fn emitReturn(inst: Inst) {
        if inst.hasInput() {
            let loc = inst.getLocationData();
            let register = loc.getInput(0).getRegister();
            let ty = inst.getType();

            if R0 != register {
                if ty == Type::Int64 {
                    self.asm.mov(R0, register);
                } else if ty == Type::Bool {
                    self.asm.mov_w(R0, register);
                } else {
                    unreachable[()]();
                }
            }
        }

        self.epilog();
    }

    fn emitMove(inst: Inst) {
        let loc = inst.getLocationData();
        let src = loc.getInput(0).getRegister();
        let dest = loc.getOutput().getRegister();

        self.asm.mov(dest, src);
    }

    fn emitCompare(inst: Inst) {
        let loc = inst.getLocationData();
        let lhs = loc.getInput(0).getRegister();
        let rhs = loc.getInput(1).getRegister();
        let dest = loc.getOutput().getRegister();

        let cond = match inst.op() {
            Op::Greater => Cond::GT,
            Op::GreaterOrEqual => Cond::GE,
            Op::Less => Cond::LT,
            Op::LessOrEqual => Cond::LE,
            Op::Equal => Cond::EQ,
            Op::NotEqual => Cond::NE,
            _ => unreachable[Cond](),
        };

        self.asm.cmp(lhs, rhs);
        self.asm.cset_w(dest, cond);
    }

    fn finalize(): CodeDescriptor {
        self.emitDeferredCode();
        self.asm.resolveJumps();
        self.asm.brk(0i32);

        if self.asm.size() % CODE_SIZE_ALIGNMENT != 0 {
            self.emitComment("align code");
            self.asm.alignCodeSize(CODE_SIZE_ALIGNMENT);
        }

        let code = self.asm.finalize();

        CodeDescriptor(
            code,
            self.comments,
            self.locations,
        )
    }
}
