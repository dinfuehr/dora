use package::assembler::x64::AssemblerX64;
use package::assembler::x64::{RAX, RDI, RSI, RBP, RSP};
use package::assembler::RegSet;
use package::codegen::CodeGen;
use package::interface::CompilationInfo;
use package::interface::Architecture;

pub class CodeGenX64 {
    info: CompilationInfo,
    asm: AssemblerX64,
}

impl CodeGenX64 {
    pub static fn new(info: CompilationInfo): CodeGenX64 {
        CodeGenX64(info, AssemblerX64::new())
    }
}

impl CodeGen for CodeGenX64 {
    fn allocatable_registers(): RegSet {
        RegSet::new(RAX, RDI, RSI)
    }

    fn prolog() {
        self.asm.pushq_r(RBP);
        self.asm.movq_rr(RBP, RSP);
    }

    fn epilog() {
        self.asm.movq_rr(RSP, RBP);
        self.asm.popq_r(RBP);
        self.asm.retq();
    }

    fn finalize(): Array[UInt8] {
        assert(self.info.arch == Architecture::X64);
        self.prolog();
        self.epilog();
        self.asm.finalize()
    }
}