use package::assembler::x64::{AssemblerX64, Address, Immediate, ScaleFactor};
use package::assembler::x64::{RAX, RDI, RDX, RCX, RSI, RBP, RSP};
use package::assembler::x64::{R8, R9};
use package::assembler::{Register, RegSet};
use package::codegen::{CodeGen, CodeDescriptor, CommentTable};
use package::interface::CompilationInfo;
use package::interface::Architecture;
use package::graph::{Inst, Op, LocationData};

pub class CodeGenX64 {
    info: CompilationInfo,
    asm: AssemblerX64,
}

impl CodeGenX64 {
    pub static fn new(info: CompilationInfo): CodeGenX64 {
        CodeGenX64(info, AssemblerX64::new())
    }

    fn epilog() {
        self.asm.movq_rr(RSP, RBP);
        self.asm.popq_r(RBP);
        self.asm.retq();
    }
}

pub let REG_PARAMS: Array[Register] = Array[Register]::new(RDI, RSI, RDX, RCX, R8, R9);

impl CodeGen for CodeGenX64 {
    fn allocatableRegisters(): RegSet {
        RegSet::new(RDI, RSI, RDX, RCX, R8, R9)
    }

    fn prolog() {
        self.asm.pushq_r(RBP);
        self.asm.movq_rr(RBP, RSP);
    }

  fn setLocationConstraints(inst: Inst) {
    let loc = LocationData::new();

    match inst.op() {
        Op::Arg => {
            let idx = inst.auxAsInt32().toInt64();
            loc.setOutputRegister(REG_PARAMS(idx));
        },

        Op::Int64Const => {
            loc.setOutputNeeded();
        },

        Op::Add => {
            loc.setOutputNeeded();
        },

        Op::Return => {
            // no output needed
        },

        _ => {}
    }

    inst.setLocationData(loc);
  }

    fn emit(inst: Inst) {
        let loc = inst.getLocationData();

        match inst.op() {
            Op::Arg => {},

            Op::Int64Const => {
                let register = loc.getOutput().getRegister();
                self.asm.movq_ri(register, Immediate(inst.auxAsInt64()));
            },

            Op::Add => {
                let lhs = loc.getInput(0).getRegister();
                let rhs = loc.getInput(1).getRegister();

                let output = loc.getOutput().getRegister();

                self.asm.lea(output, Address::array(lhs, rhs, ScaleFactor::One, 0i32));
            },

            Op::Return => {
                if inst.hasInput() {
                    let register = loc.getInput(0).getRegister();

                    if RAX != register {
                        self.asm.movq_rr(RAX, register);
                    }
                }

                self.epilog();
            },

            _ => {
                unreachable[()]();
            }
        }
    }

    fn finalize(): CodeDescriptor {
        let code = self.asm.finalize();

        CodeDescriptor(
            code,
            CommentTable::new(),
        )
    }
}