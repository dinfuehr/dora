class AssemblerBuffer {
    let buffer: Vec[UInt8] = Vec[UInt8]();

    fun emitByte(value: UInt8) {
        self.buffer.push(value);
    }

    fun emitInt32(value: Int32) {
        self.emitByte((value & 0xFFI).toUInt8());
        self.emitByte(((value >>> 8) & 0xFFI).toUInt8());
        self.emitByte(((value >>> 16) & 0xFFI).toUInt8());
        self.emitByte(((value >>> 24) & 0xFFI).toUInt8());
    }

    fun emitInt64(value: Int64) {
        self.emitInt32(value.toInt32());
        self.emitInt32((value >>> 32).toInt32());
    }

    fun size() -> Int64 {
        self.buffer.size()
    }

    fun capacity() -> Int64 {
        self.buffer.capacity()
    }

    fun toArray() -> Array[UInt8] {
        self.buffer.toArray()
    }
}

@test fun testAssemblerBufferEmitByte(_x: Testing) {
    let buffer = AssemblerBuffer();
    buffer.emitByte(0x01Y);
    buffer.emitByte(0x02Y);
    assert(buffer.size() == 2L);
}

@test fun testAssemblerBufferEmitInt(_x: Testing) {
    let asm = AssemblerBuffer();
    asm.emitInt32(0x11223344);
    let buffer = asm.toArray();
    assert(buffer(0L) == 0x44Y);
    assert(buffer(1L) == 0x33Y);
    assert(buffer(2L) == 0x22Y);
    assert(buffer(3L) == 0x11Y);
    assert(buffer.size() == 4L);
}

@open @abstract class SlowPath {
    @abstract fun emit(asm: Assembler);
}

@open @abstract class Assembler

class Register(let value: Int32) {
    fun equals(rhs: Register) -> Bool {
        self.value == rhs.value
    }
}

fun assertAsm(buffer: Array[UInt8], start: Int64, bytes: UInt8...) {
    var idx = 0L;

    while idx < bytes.size() {
        let exp = bytes(idx);
        let got = buffer(start + idx);

        if exp != got {
            println("expected ${exp.toStringHex()} at index ${start + idx} but got ${got.toStringHex()}")
        }

        assert(exp == got);
        idx = idx + 1L;
    }
}

fun assertAsmInt32(buffer: Array[UInt8], index: Int64, value: Int32) {
    let b1 = buffer(index).toInt32();
    let b2 = buffer(index+1L).toInt32();
    let b3 = buffer(index+2L).toInt32();
    let b4 = buffer(index+3L).toInt32();

    let got = (b4 << 24) | (b3 << 16) | (b2 << 8) | b1;

    if value != got {
        println("expected ${value.toStringHex()} but got ${got.toStringHex()}");
    }

    assert(value == got);
}

fun assertAsmInt64(buffer: Array[UInt8], index: Int64, value: Int64) {
    assertAsmInt32(buffer, index, value.toInt32());
    assertAsmInt32(buffer, index, (value >>> 32).toInt32());
}

fun printBuffer(buffer: Array[UInt8]) {
    var i = 0L;

    while i < buffer.size() {
        let val = buffer(i);
        if i > 0L { print(" "); }
        print(intToHexString(val.toInt32(), 2));
        i = i + 1L;
    }
}

fun intToHexString(val: Int32, padding: Int32) -> String {
    var val = val;
    var result = "";

    while val != 0 {
        let digit = val & 0xFI;
        val = val >>> 4;

        let digit = if digit < 10 {
            (48 + digit).toChar().unwrap()
        } else {
            (65 + digit - 10).toChar().unwrap()
        };

        result = "${digit}${result}";
    }

    if result.isEmpty() {
        result = "0";
    }

    while result.size().toInt32() < padding {
        result = "0${result}";
    }

    return result;
}