pub mod arm64;
pub mod x64;

class AssemblerBuffer {
    buffer: Vec[UInt8],
    pos: Int64,
}

impl AssemblerBuffer {
    static fn new(): AssemblerBuffer {
        AssemblerBuffer(Vec[UInt8]::new(), 0)
    }

    fn position(): Int64 {
        self.pos
    }

    fn setPosition(newpos: Int64) {
        self.pos = newpos;
    }

    fn emitByte(value: UInt8) {
        self.buffer.push(value);
    }

    fn emitInt32(value: Int32) {
        self.emitByte((value & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 8i32) & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 16i32) & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 24i32) & 0xFFi32).toUInt8());
    }

    fn emitInt64(value: Int64) {
        self.emitInt32(value.toInt32());
        self.emitInt32((value >>> 32i32).toInt32());
    }

    fn patchUInt8(offset: Int64, value: UInt8) {
        self.buffer(offset) = value;
    }

    fn patchInt32(offset: Int64, value: Int32) {
        self.buffer(offset) = (value & 0xFFi32).toUInt8();
        self.buffer(offset + 1i64) = ((value >>> 8i32) & 0xFFi32).toUInt8();
        self.buffer(offset + 2i64) = ((value >>> 16i32) & 0xFFi32).toUInt8();
        self.buffer(offset + 3i64) = ((value >>> 24i32) & 0xFFi32).toUInt8();
    }

    fn size(): Int64 {
        self.buffer.size()
    }

    fn capacity(): Int64 {
        self.buffer.capacity()
    }

    fn toArray(): Array[UInt8] {
        self.buffer.toArray()
    }

    fn createLabel(): Label {
        Label::new()
    }

    fn bindLabel(lbl: Label) {
        lbl.bindTo(self.size());
    }

    fn createAndBindLabel(): Label {
        let lbl = self.createLabel();
        self.bindLabel(lbl);

        lbl
    }
}

pub class Label {
    offset: Int64
}

impl Label {
    static fn new(): Label {
        Label(-1)
    }

    fn bindTo(pos: Int64) {
        assert(pos >= 0i64 && self.offset < 0i64);
        self.offset = pos;
    }

    fn isBound(): Bool {
        self.offset >= 0i64
    }
}

@Test
fn testAssemblerBufferEmitByte() {
    let buffer = AssemblerBuffer::new();
    buffer.emitByte(0x01u8);
    buffer.emitByte(0x02u8);
    assert(buffer.size() == 2i64);
}

@Test
fn testAssemblerBufferEmitInt() {
    let asm = AssemblerBuffer::new();
    asm.emitInt32(0x11223344i32);
    let buffer = asm.toArray();
    assert(buffer(0i64) == 0x44u8);
    assert(buffer(1i64) == 0x33u8);
    assert(buffer(2i64) == 0x22u8);
    assert(buffer(3i64) == 0x11u8);
    assert(buffer.size() == 4i64);
}

pub struct Register(value: Int32)

impl Register {
    fn equals(rhs: Register): Bool {
        self.value == rhs.value
    }
}

class MachineCode {
    bytes: Array[UInt8],
    start: Int64,
}

impl MachineCode {
    static fn new(bytes: Array[UInt8]): MachineCode {
        MachineCode(bytes, 0)
    }

    fn getInt32(idx: Int64): Int32 {
        self.bytes(idx).toInt32() |
            self.bytes(idx+1i64).toInt32() << 8i32 |
            self.bytes(idx+2i64).toInt32() << 16i32 |
            self.bytes(idx+3i64).toInt32() << 24i32
    }
}

fn assertAsm(code: MachineCode, bytes: UInt8...) {
    assert(code.start + bytes.size() <= code.bytes.size());

    for (idx, exp) in bytes.enumerate() {
        let got = code.bytes(code.start + idx);

        if exp != got {
            println("expected ${exp.toStringHex()} at index ${code.start + idx} but got ${got.toStringHex()}");

            let mut i = 0i64;
            print("expected: ");

            while i < bytes.size() {
                if i > 0i64 { print(", "); }
                let value = bytes(i);
                print("${value.toStringHex()}");
                i = i + 1i64;
            }

            i = 0i64;
            println("");
            print("buffer: ");

            while i < bytes.size() {
                if i > 0i64 { print(", "); }
                let value = code.bytes(code.start + i);
                print("${value.toStringHex()}");
                i = i + 1i64;
            }
            println("");
        }

        assert(exp == got);
    }

    code.start = code.start + bytes.size();
}

fn assertAsm32(code: MachineCode, values: Int32...) {
    assert(code.start % 4i64 == 0i64);
    assert(code.bytes.size() % 4i64 == 0i64);

    assert(code.start + values.size() * 4i64 <= code.bytes.size());

    let mut idx = 0i64;

    while idx < values.size() {
        let exp = values(idx);
        let got = code.getInt32(code.start + idx * 4i64);

        if exp != got {
            println("expected ${exp.toStringHex()} at index ${code.start + idx} but got ${got.toStringHex()}");

            let mut i = 0i64;
            print("buffer:   ");

            for (idx, value) in values.enumerate() {
                if i > 0i64 { print(", "); }
                let value = values(i);
                print("${value.toStringHex()}");
                i = i + 1i64;
            }

            i = 0i64;
            println("");
            print("expected: ");

            while i < values.size() {
                if i > 0i64 { print(", "); }
                let value = code.getInt32(code.start + i * 4i64);
                print("${value.toStringHex()}");
                i = i + 1i64;
            }
            println("");
        }

        assert(exp == got);

        idx = idx + 1i64;
    }

    code.start = code.start + values.size() * 4i64;
}

fn assertAsmEnd(code: MachineCode) {
    assert(code.start == code.bytes.size());
}
