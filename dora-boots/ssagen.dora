fun createGraph(bc: BytecodeFunction): Graph {
    let graph = Graph();

    // Create basic blocks and edges between them
    let blockMap = createBlocksWithEdgesFromBytecode(graph, bc);

    // Fill basic blocks with instructions
    let ssagen = SsaGen(graph, bc, blockMap);
    ssagen.run();

    graph
}

class SsaGen(let graph: Graph, let bc: BytecodeFunction, let blockMap: BlockMap) extends BytecodeVisitor {
    var currentBlock: Option[Block] = None;
    var offset: Int32 = 0I;
    var currentDef: Array[HashMap[Block, Inst]] = Array[HashMap[Block, Inst]]::empty();
    var blockTerminated: Bool = false;

    // a block is considered filled when all instructions are inserted
    var filledBlocks: BitSet = BitSet(0L);

    // block is considered sealed when the set of predecessors is final
    var sealedBlocks: BitSet = BitSet(0L);

    // tracks all incomplete phi instructions inserted into unsealed blocks
    let incompletePhis: HashMap[Block, HashMap[BytecodeRegister, PhiInst]] = HashMap();

    fun run() {
        self.prepare();
        self.setupArguments();

        readBytecode(self.bc.code, self);
        assert(self.blockTerminated);
    }

    fun prepare() {
        self.currentBlock = None;
        let blockCount = self.graph.blockCount();

        self.filledBlocks = BitSet(blockCount.toInt64());
        self.sealedBlocks = BitSet(blockCount.toInt64());

        let data = Vec[HashMap[Block, Inst]]();

        for i in range(0I, self.bc.registers.size().toInt32()) {
            data.push(HashMap[Block, Inst]());
        }

        self.currentDef = data.toArray();
    }

    fun setupArguments() {
        var i = 0I;
        let entryBlock = self.graph.getEntryBlock();
        while i < self.bc.arguments {
            let ty = Type::fromBytecodeType(self.bc.registers(i.toInt64()));
            let argInst = ArgInst(i, ty);
            entryBlock.appendInst(argInst);
            self.writeVariable(BytecodeRegister(i), entryBlock, argInst);
            i = i + 1I;
        }
    }

    fun current(): Block = self.currentBlock.getOrPanic();

    fun writeVariable(register: BytecodeRegister, block: Block, value: Inst) {
        self.currentDef(register.value.toInt64()).insert(block, value);
    }

    fun readVariable(register: BytecodeRegister, block: Block): Inst =
        if self.currentDef(register.value.toInt64()).contains(block) {
            self.currentDef(register.value.toInt64())(block).getOrPanic()
        } else {
            self.readVariableRecursive(register, block)
        };

    fun readVariableRecursive(register: BytecodeRegister, block: Block): Inst {
        let value: Inst = if !self.sealedBlocks.contains(block.id.toInt64()) {
            // While all blocks are created with predecessors and successors before
            // this pass in the BlockBuilder already, we still need to handle unsealed blocks.
            // E.g. Register is accessed in while header and updated in the while body.
            // In this case the while header is filled before the while body. If we wouldn't
            // handle unsealed blocks we wouldn't create a Phi instruction, since the
            // while body predecessor is still empty.
            let incomplete = PhiInst();
            block.appendPhi(incomplete);

            if self.incompletePhis.contains(block) {
                self.incompletePhis(block).getOrPanic().insert(register, incomplete);
            } else {
                let map = HashMap[BytecodeRegister, PhiInst]();
                map.insert(register, incomplete);
                self.incompletePhis.insert(block, map);
            }

            incomplete as Inst
        } else if block.predecessors.size() == 1L {
            self.readVariable(register, block.predecessors.first().getOrPanic().source)
        } else {
            let phi = PhiInst();
            block.appendPhi(phi);
            self.writeVariable(register, block, phi);
            self.addPhiOperands(register, phi)
        };

        self.writeVariable(register, block, value);
        value
    }

    fun addPhiOperands(register: BytecodeRegister, phi: PhiInst): Inst {
        for pred in phi.block.getOrPanic().predecessors {
            let inst = self.readVariable(register, pred.source);
            phi.addInput(inst);
        }
        phi.registerUses();
        self.tryRemoveTrivialPhi(phi)
    }

    fun tryRemoveTrivialPhi(phi: PhiInst): Inst {
        var same = None[Inst];

        for inp in phi.inputs {
            let op = inp.value;

            if (same.isSome() && same.getOrPanic() === op) || op === phi {
                continue;
            }

            if same.isSome() {
                return phi;
            }

            same = Some(op);
        }

        if same.isNone() {
            same = Some(UndefInst());
        }

        let users = phi.users();

        phi.replaceWith(same.getOrPanic());
        phi.remove();

        for i in range(0I, users.size().toInt32()) {
            let user = users(i.toInt64());

            if user === phi {
                continue;
            }

            if user is PhiInst {
                self.tryRemoveTrivialPhi(user as PhiInst);
            }
        }

        same.getOrPanic()
    }

    fun markBlockTerminated() {
        self.blockTerminated = true;
    }

    @override fun visitInstruction(offset: Int32) {
        self.offset = offset;

        let block = self.blockMap.blockAt(offset);

        if block.isSome() {
            if self.currentBlock.isSome() {
                self.blockEndReached(block);
            } else {
                self.currentBlock = block;
            }
        }

        self.blockTerminated = false;
    }

    fun blockEndReached(next: Option[Block]) {
        let block = self.current();

        if !self.blockTerminated {
            let gotoInst = GotoInst(next.getOrPanic());
            block.appendInst(gotoInst);
        }

        // We change the current block, that means all instructions
        // are inserted. The block is now filled.
        self.fillBlock(block);

        // We don't really know when to seal a block from the bytecode
        // Try to seal this block if all predecessors are filled.
        self.trySealBlock(block);

        // This block might have a back edge to a loop header. Since this
        // block is now filled, we might be able to seal another block.
        for succ in block.successors {
            self.trySealBlock(succ.target);
        }

        self.currentBlock = next;
    }

    fun fillBlock(block: Block) {
        assert(!self.filledBlocks.contains(block.id.toInt64()));
        self.filledBlocks.insert(block.id.toInt64());
    }

    fun trySealBlock(block: Block) {
        if self.sealedBlocks.contains(block.id.toInt64()) {
            return;
        }

        // all predecessors need to be filled
        for edge in block.predecessors {
            if !self.filledBlocks.contains(edge.source.id.toInt64()) {
                return;
            }
        }

        self.sealBlock(block);
    }

    fun sealBlock(block: Block) {
        assert(!self.sealedBlocks.contains(block.id.toInt64()));
        self.sealedBlocks.insert(block.id.toInt64());

        let map = self.incompletePhis(block);
        if map.isNone() { return; }

        for variableAndPhi in map.getOrPanic() {
            self.addPhiOperands(variableAndPhi.0, variableAndPhi.1);
        }
    }

    @override fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::int32());
    }
    @override fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::int64());
    }
    @override fun visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::float32());
    }
    @override fun visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::float64());
    }

    fun emitBin(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: BinOp, ty: Type) {
        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let destInst = BinaryInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    @override fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::int32());
    }
    @override fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::int64());
    }
    @override fun visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::float32());
    }
    @override fun visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::float64());
    }

    @override fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::int32());
    }
    @override fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::int64());
    }
    @override fun visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::float32());
    }
    @override fun visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::float64());
    }

    fun emitUn(dest: BytecodeRegister, src: BytecodeRegister, op: UnOp, ty: Type) {
        let srcInst = self.readVariable(src, self.current());
        let destInst = UnaryInst(op, ty, srcInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    @override fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::int32());
    }
    @override fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::int64());
    }
    @override fun visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::float32());
    }
    @override fun visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::float64());
    }

    @override fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitDivMod(dest, lhs, rhs, BinOp::Div, Type::int32());
    }
    @override fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitDivMod(dest, lhs, rhs, BinOp::Div, Type::int64());
    }

    fun emitDivMod(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: BinOp, ty: Type) {
        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let divZeroCheck = DivZeroCheck(rhsInst);
        self.current().appendInst(divZeroCheck);
        let destInst = BinaryInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    @override fun visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::float32());
    }
    @override fun visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::float64());
    }

    @override fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitDivMod(dest, lhs, rhs, BinOp::Mod, Type::int32());
    }
    @override fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitDivMod(dest, lhs, rhs, BinOp::Mod, Type::int64());
    }

    @override fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::And, Type::int32());
    }
    @override fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::And, Type::int64());
    }

    @override fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Or, Type::int32());
    }
    @override fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Or, Type::int64());
    }

    @override fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Xor, Type::int32());
    }
    @override fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Xor, Type::int64());
    }

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::bool());
    }
    @override fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::int32());
    }
    @override fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::int64());
    }

    @override fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shl, Type::int32());
    }
    @override fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shr, Type::int32());
    }
    @override fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sar, Type::int32());
    }

    @override fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shl, Type::int64());
    }
    @override fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shr, Type::int64());
    }
    @override fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sar, Type::int64());
    }

    @override fun visitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }

    fun emitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        let srcInst = self.readVariable(src, self.current());
        self.writeVariable(dest, self.current(), srcInst);
    }

    @override fun visitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @override fun visitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::bool());
    }

    fun emitLoadGlobal(dest: BytecodeRegister, glob: GlobalId, ty: Type) {
        let globInst = LoadGlobalInst(ty, glob);
        self.current().appendInst(globInst);
        self.writeVariable(dest, self.current(), globInst);
    }

    @override fun visitStoreGlobal(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::bool());
    }

    fun emitStoreGlobal(src: BytecodeRegister, glob: GlobalId, ty: Type) {
        let srcInst = self.readVariable(src, self.current());
        let globInst = StoreGlobalInst(ty, glob, srcInst);
        self.current().appendInst(globInst);
    }

    @override fun visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @override fun visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroUInt8(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroInt32(dest: BytecodeRegister) {
        let inst = Int32Const(0I);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstZeroInt64(dest: BytecodeRegister) {
        let inst = Int64Const(0L);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstZeroFloat32(dest: BytecodeRegister) {
        let inst = Float32Const(0.0F);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstZeroFloat64(dest: BytecodeRegister) {
        let inst = Float64Const(0.0);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) { unimplemented(); }
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @override fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toInt32().getOrPanic();
        let inst = Int32Const(value);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toInt64().getOrPanic();
        let inst = Int64Const(value);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toFloat32().getOrPanic();
        let inst = Float32Const(value);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toFloat64().getOrPanic();
        let inst = Float64Const(value);
        self.current().appendInst(inst);
        self.writeVariable(dest, self.current(), inst);
    }
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Equal, Type::ptr());
    }
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::NotEqual, Type::ptr());
    }

    @override fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Equal, Type::int32());
    }
    @override fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::NotEqual, Type::int32());
    }
    @override fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Greater, Type::int32());
    }
    @override fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::GreaterOrEqual, Type::int32());
    }
    @override fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Less, Type::int32());
    }
    @override fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::LessOrEqual, Type::int32());
    }

    @override fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @override fun visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @override fun visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    fun emitTest(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: TestOp, ty: Type) {
        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let destInst = TestInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    @override fun visitLoopStart() {
        // nothing to do
    }

    @override fun visitJumpLoop(offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset - offset).getOrPanic();
        let gotoInst = GotoInst(targetBlock);
        self.current().appendInst(gotoInst);
        self.markBlockTerminated();
    }

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) {
        self.emitConditionalJump(opnd, offset, false);
    }
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.emitConditionalJump(opnd, offset, false);
    }
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) {
        self.emitConditionalJump(opnd, offset, true);
    }
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.emitConditionalJump(opnd, offset, true);
    }
    @override fun visitJump(offset: Int32) {
        self.emitJump(offset);
    }
    @override fun visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().getOrPanic();
        self.emitJump(offset);
    }

    fun emitJump(offset: Int32) {
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        let gotoInst = GotoInst(targetBlock);
        self.current().appendInst(gotoInst);
        self.markBlockTerminated();
    }

    fun emitConditionalJump(opnd: BytecodeRegister, offset: Int32, value: Bool) {
        let opndInst = self.readVariable(opnd, self.current());
        let targetBlock = self.blockMap.blockAt(self.offset + offset).getOrPanic();
        let fallthroughBlock = self.blockMap.nextBlockAt(self.offset+1I).getOrPanic();

        let cond = if value {
            IfInst(opndInst, targetBlock, fallthroughBlock)
        } else {
            IfInst(opndInst, fallthroughBlock, targetBlock)
        };

        self.current().appendInst(cond);
        self.markBlockTerminated();
    }

    @override fun visitInvokeDirectVoid(fct: FctId) { unimplemented(); }
    @override fun visitInvokeDirect(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @override fun visitInvokeVirtualVoid(fct: FctId) { unimplemented(); }
    @override fun visitInvokeVirtual(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @override fun visitInvokeStaticVoid(fct: FctId) { unimplemented(); }
    @override fun visitInvokeStatic(dest: BytecodeRegister, fct: FctId) { unimplemented(); }

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }
    @override fun visitNewArray(dest: BytecodeRegister, cls: ClassDefId, length: BytecodeRegister) { unimplemented(); }

    @override fun visitNilCheck(obj: BytecodeRegister) { unimplemented(); }

    @override fun visitArrayLength(dest: BytecodeRegister, arr: BytecodeRegister) { unimplemented(); }
    @override fun visitArrayBoundCheck(arr: BytecodeRegister, idx: BytecodeRegister) { unimplemented(); }

    @override fun visitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitLoadArray(dest, arr, idx); }

    fun emitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        let arrInst = self.readVariable(arr, self.current());
        let idxInst = self.readVariable(idx, self.current());

        let arrayLengthInst = ArrayLength(arrInst);
        self.current().appendInst(arrayLengthInst);

        let boundsCheckInst = BoundsCheck(idxInst, arrayLengthInst);
        self.current().appendInst(boundsCheckInst);

        let arrayGetInst = ArrayGet(arrInst, idxInst, Type::Int32);
        self.current().appendInst(arrayGetInst);

        self.writeVariable(dest, self.current(), arrayGetInst);
    }

    @override fun visitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) { self.emitStoreArray(src, arr, idx); }

    fun emitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        let srcInst = self.readVariable(src, self.current());
        let arrInst = self.readVariable(arr, self.current());
        let idxInst = self.readVariable(idx, self.current());

        let arrayLengthInst = ArrayLength(arrInst);
        self.current().appendInst(arrayLengthInst);

        let boundsCheckInst = BoundsCheck(idxInst, arrayLengthInst);
        self.current().appendInst(boundsCheckInst);

        let arraySetInst = ArraySet(arrInst, idxInst, srcInst);
        self.current().appendInst(arraySetInst);
    }

    @override fun visitRetVoid() {
        let inst = ReturnVoidInst();
        self.current().appendInst(inst);
        self.markBlockTerminated();
    }

    @override fun visitRet(opnd: BytecodeRegister) {
        let ty = self.bc.registers(opnd.value.toInt64());
        let ty = Type::fromBytecodeType(ty);
        self.emitRet(opnd, ty);
    }

    fun emitRet(opnd: BytecodeRegister, ty: Type) {
        let value = self.readVariable(opnd, self.current());
        let inst = ReturnInst(value, ty);
        self.current().appendInst(inst);
        self.markBlockTerminated();
    }
}
