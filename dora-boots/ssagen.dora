use std::HashMap;
use std::BitSet;

use package::graph::Graph;
use package::graph::Block;
use package::graph::Inst;
use package::graph::Op;
use package::graph::createInt32Const;
use package::graph::createInt64Const;
use package::graph::createFloat32Const;
use package::graph::createFloat64Const;
use package::graph::createIfInst;
use package::graph::createArrayLength;
use package::graph::createBoundsCheck;
use package::graph::createArrayGet;
use package::graph::createArraySet;
use package::graph::createReturnInst;
use package::graph::createReturnVoidInst;
use package::graph::createGotoInst;
use package::graph::createTestInst;
use package::graph::createStoreGlobalInst;
use package::graph::createLoadGlobalInst;
use package::graph::createBinaryInst;
use package::graph::createDivZeroCheck;
use package::graph::createUnaryInst;
use package::graph::createUndefInst;
use package::graph::createPhiInst;
use package::graph::createArgInst;
use package::graph::ty::Type;
use package::ssagen_block::BlockMap;
use package::ssagen_block::createBlocksWithEdgesFromBytecode;
use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::BytecodeType;
use package::bytecode::data::GlobalId;
use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::reader::BytecodeIterator;

pub fn createGraph(bc: BytecodeFunction): Graph {
    let graph = Graph::new();

    // Create basic blocks and edges between them
    let blockMap = createBlocksWithEdgesFromBytecode(graph, bc);

    // Fill basic blocks with instructions
    let ssagen = SsaGen::new(graph, bc, blockMap);
    ssagen.run();

    graph
}

class SsaGen {
    graph: Graph,
    bc: BytecodeFunction,
    blockMap: BlockMap,
    currentBlock: Option[Block],
    offset: Int32,
    currentDef: Array[HashMap[Block, Inst]],
    blockTerminated: Bool,

    // a block is considered filled when all instructions are inserted
    filledBlocks: BitSet,

    // block is considered sealed when the set of predecessors is final
    sealedBlocks: BitSet,

    // tracks all incomplete phi instructions inserted into unsealed blocks
    incompletePhis: HashMap[Block, HashMap[BytecodeRegister, Inst]],
}

impl SsaGen {
    static fn new(graph: Graph, bc: BytecodeFunction, blockMap: BlockMap): SsaGen {
        SsaGen(
            graph,
            bc,
            blockMap,
            None[Block],
            0i32,
            Array[HashMap[Block, Inst]]::new(),
            false,
            BitSet::new(0),
            BitSet::new(0),
            HashMap[Block, HashMap[BytecodeRegister, Inst]]::new(),
        )
    }

    fn run() {
        self.prepare();
        self.setupArguments();

        for instInfo in BytecodeIterator::new(self.bc.code) {
            self.instructionStart(instInfo.start.toInt32());
            self.processInstruction(instInfo.inst);
        }

        assert(self.blockTerminated);
    }

    fn prepare() {
        self.currentBlock = None;
        let blockCount = self.graph.blockCount();

        self.filledBlocks = BitSet::new(blockCount.toInt64());
        self.sealedBlocks = BitSet::new(blockCount.toInt64());

        let data = Vec[HashMap[Block, Inst]]::new();

        for i in std::range(0i32, self.bc.registers.size().toInt32()) {
            data.push(HashMap[Block, Inst]::new());
        }

        self.currentDef = data.toArray();
    }

    fn setupArguments() {
        let mut i = 0i32;
        let entryBlock = self.graph.getEntryBlock();
        while i < self.bc.arguments {
            let ty = Type::fromBytecodeType(self.bc.registers(i.toInt64()));
            let argInst = createArgInst(i, ty);
            entryBlock.appendInst(argInst);
            self.writeVariable(BytecodeRegister(i), entryBlock, argInst);
            i = i + 1i32;
        }
    }

    fn current(): Block {
        self.currentBlock.getOrPanic()
    }

    fn writeVariable(register: BytecodeRegister, block: Block, value: Inst) {
        self.currentDef(register.value.toInt64()).insert(block, value);
    }

    fn readVariable(register: BytecodeRegister, block: Block): Inst {
        if self.currentDef(register.value.toInt64()).contains(block) {
            self.currentDef(register.value.toInt64())(block).getOrPanic()
        } else {
            self.readVariableRecursive(register, block)
        }
    }

    fn readVariableRecursive(register: BytecodeRegister, block: Block): Inst {
        let value: Inst = if !self.sealedBlocks.contains(block.id().toInt64()) {
            // While all blocks are created with predecessors and successors before
            // this pass in the BlockBuilder already, we still need to handle unsealed blocks.
            // E.g. Register is accessed in while header and updated in the while body.
            // In this case the while header is filled before the while body. If we wouldn't
            // handle unsealed blocks we wouldn't create a Phi instruction, since the
            // while body predecessor is still empty.
            let incomplete = createPhiInst();
            block.appendPhi(incomplete);

            if self.incompletePhis.contains(block) {
                self.incompletePhis(block).getOrPanic().insert(register, incomplete);
            } else {
                let map = HashMap[BytecodeRegister, Inst]::new();
                map.insert(register, incomplete);
                self.incompletePhis.insert(block, map);
            }

            incomplete
        } else if block.predecessors.size() == 1i64 {
            self.readVariable(register, block.predecessors.first().getOrPanic().source)
        } else {
            let phi = createPhiInst();
            block.appendPhi(phi);
            self.writeVariable(register, block, phi);
            self.addPhiOperands(register, phi)
        };

        self.writeVariable(register, block, value);
        value
    }

    fn addPhiOperands(register: BytecodeRegister, phi: Inst): Inst {
        for pred in phi.getBlock().predecessors {
            let inst = self.readVariable(register, pred.source);
            phi.addInput(inst);
        }
        phi.registerUses();
        self.tryRemoveTrivialPhi(phi)
    }

    fn tryRemoveTrivialPhi(phi: Inst): Inst {
        let mut same = None[Inst];

        for inp in phi.getInputs() {
            let op = inp.getValue();

            if (same.isSome() && same.getOrPanic() === op) || op === phi {
                continue;
            }

            if same.isSome() {
                return phi;
            }

            same = Some(op);
        }

        if same.isNone() {
            same = Some(createUndefInst());
        }

        let users = phi.users();

        phi.replaceWith(same.getOrPanic());
        phi.remove();

        for i in std::range(0i32, users.size().toInt32()) {
            let user = users(i.toInt64());

            if user === phi {
                continue;
            }

            if user.isPhi() {
                self.tryRemoveTrivialPhi(user);
            }
        }

        same.getOrPanic()
    }

    fn markBlockTerminated() {
        self.blockTerminated = true;
    }

    fn instructionStart(offset: Int32) {
        self.offset = offset;

        let block = self.blockMap.blockAt(offset.toInt64());

        if block.isSome() {
            if self.currentBlock.isSome() {
                self.blockEndReached(block);
            } else {
                self.currentBlock = block;
            }
        }

        self.blockTerminated = false;
    }

    fn processInstruction(inst: BytecodeInstruction) {
       match inst {
            BytecodeInstruction::Add(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Add);
            },
            BytecodeInstruction::Sub(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Sub);
            },
            BytecodeInstruction::Neg(dest, src) => {
                self.emitUn(dest, src, Op::Neg);
            },
            BytecodeInstruction::Mul(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Mul);
            },
            BytecodeInstruction::Div(dest, lhs, rhs) => {
                self.emitDivMod(dest, lhs, rhs, Op::Div);
            },
            BytecodeInstruction::Mod(dest, lhs, rhs) => {
                self.emitDivMod(dest, lhs, rhs, Op::Div);
            },
            BytecodeInstruction::And(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::And);
            },
            BytecodeInstruction::Or(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Or);
            },
            BytecodeInstruction::Xor(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Xor);
            },
            BytecodeInstruction::Not(dest, src) => {
                self.emitUn(dest, src, Op::Not);
            },
            BytecodeInstruction::Shl(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Shl);
            },
            BytecodeInstruction::Shr(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Shr);
            },
            BytecodeInstruction::Sar(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Sar);
            },

            BytecodeInstruction::Mov(dest, src) => {
                self.emitMov(dest, src);
            },

            BytecodeInstruction::LoadTupleElement(dest, src, idx)  => {
                unimplemented();
            },
            BytecodeInstruction::LoadEnumElement(dest, src, idx) => {                
                unimplemented();

            },
            BytecodeInstruction::LoadEnumVariant(dest, src, idx) => {
                unimplemented();
            },
            BytecodeInstruction::LoadStructField(dest, src, idx) => {
                unimplemented();
            },

            BytecodeInstruction::LoadField(dest, src, idx) => {
                unimplemented();
            },
            BytecodeInstruction::StoreField(dest, src, idx) => {
                unimplemented();
            },

            BytecodeInstruction::LoadGlobal(dest, global_id) => {
                unimplemented();
            },
            BytecodeInstruction::StoreGlobal(src, global_id) => {
                unimplemented();
            },

            BytecodeInstruction::PushRegister(src) => {
                unimplemented();
            },
            
            BytecodeInstruction::ConstTrue(dest) => {
                unimplemented();
            },
            BytecodeInstruction::ConstFalse(dest) => {
                unimplemented();
            },
            BytecodeInstruction::ConstUInt8(dest, value) => {
                unimplemented();
            },
            BytecodeInstruction::ConstChar(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::ConstInt32(dest, idx) => {
                let value = self.bc.constPool(idx).toInt32().getOrPanic();
                let inst = createInt32Const(value);
                self.current().appendInst(inst);
                self.writeVariable(dest, self.current(), inst);
            },
            BytecodeInstruction::ConstInt64(dest, idx) => {
                let value = self.bc.constPool(idx).toInt64().getOrPanic();
                let inst = createInt64Const(value);
                self.current().appendInst(inst);
                self.writeVariable(dest, self.current(), inst);
            },
            BytecodeInstruction::ConstFloat32(dest, idx) => {
                let value = self.bc.constPool(idx).toFloat32().getOrPanic();
                let inst = createFloat32Const(value);
                self.current().appendInst(inst);
                self.writeVariable(dest, self.current(), inst);

            },
            BytecodeInstruction::ConstFloat64(dest, idx) => {
                let value = self.bc.constPool(idx).toFloat64().getOrPanic();
                let inst = createFloat64Const(value);
                self.current().appendInst(inst);
                self.writeVariable(dest, self.current(), inst);
            },
            BytecodeInstruction::ConstString(dest, idx) => {
                unimplemented();
            },

            BytecodeInstruction::TestIdentity(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::TestIdentity);
            },
            BytecodeInstruction::TestEq(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Equal);
            },
            BytecodeInstruction::TestNe(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::NotEqual);
            },
            BytecodeInstruction::TestGt(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Greater);
            },
            BytecodeInstruction::TestGe(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::GreaterOrEqual);
            },
            BytecodeInstruction::TestLt(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::Less);
            },
            BytecodeInstruction::TestLe(dest, lhs, rhs) => {
                self.emitBin(dest, lhs, rhs, Op::LessOrEqual);
            },

            BytecodeInstruction::JumpLoop(distance) => {
                let targetBlock = self.blockMap.blockAt((self.offset - distance).toInt64()).getOrPanic();
                let gotoInst = createGotoInst(targetBlock);
                self.current().appendInst(gotoInst);
                self.markBlockTerminated();
            },
            BytecodeInstruction::LoopStart => {
                // nothing to do
            },
            BytecodeInstruction::Jump(distance) => {
                self.emitJump(distance);
            },
            BytecodeInstruction::JumpIfFalse(opnd, distance) => {
                self.emitConditionalJump(opnd, distance, false);
            },
            BytecodeInstruction::JumpIfTrue(opnd, distance) => {
                self.emitConditionalJump(opnd, distance, true);
            },

            BytecodeInstruction::InvokeDirect(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::InvokeVirtual(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::InvokeStatic(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::InvokeGenericStatic(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::InvokeGenericDirect(dest, idx) => {
                unimplemented();
            },

            BytecodeInstruction::NewObject(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::NewArray(dest, idx, length) => {
                unimplemented();
            },
            BytecodeInstruction::NewTuple(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::NewEnum(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::NewStruct(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::NewTraitObject(dest, idx, obj) => {
                unimplemented();
            },
            BytecodeInstruction::NewLambda(dest, idx) => {
                unimplemented();
            },
            BytecodeInstruction::ArrayLength(dest, src) => {
                unimplemented();
            },
            BytecodeInstruction::LoadArray(dest, arr, idx) => {
                self.emitLoadArray(dest, arr, idx);
            },
            BytecodeInstruction::StoreArray(src, arr, idx) => {
                self.emitStoreArray(src, arr, idx);
            },
            BytecodeInstruction::Ret(opnd) => {
                let ty = self.bc.registers(opnd.value.toInt64());
                let ty = Type::fromBytecodeType(ty);
                self.emitRet(opnd, ty);
            },
        }
    }

    fn blockEndReached(next: Option[Block]) {
        let block = self.current();

        if !self.blockTerminated {
            let gotoInst = createGotoInst(next.getOrPanic());
            block.appendInst(gotoInst);
        }

        // We change the current block, that means all instructions
        // are inserted. The block is now filled.
        self.fillBlock(block);

        // We don't really know when to seal a block from the bytecode
        // Try to seal this block if all predecessors are filled.
        self.trySealBlock(block);

        // This block might have a back edge to a loop header. Since this
        // block is now filled, we might be able to seal another block.
        for succ in block.successors {
            self.trySealBlock(succ.target);
        }

        self.currentBlock = next;
    }

    fn fillBlock(block: Block) {
        assert(!self.filledBlocks.contains(block.id().toInt64()));
        self.filledBlocks.insert(block.id().toInt64());
    }

    fn trySealBlock(block: Block) {
        if self.sealedBlocks.contains(block.id().toInt64()) {
            return;
        }

        // all predecessors need to be filled
        for edge in block.predecessors {
            if !self.filledBlocks.contains(edge.source.id().toInt64()) {
                return;
            }
        }

        self.sealBlock(block);
    }

    fn sealBlock(block: Block) {
        assert(!self.sealedBlocks.contains(block.id().toInt64()));
        self.sealedBlocks.insert(block.id().toInt64());

        let map = self.incompletePhis(block);
        if map.isNone() { return; }

        for variableAndPhi in map.getOrPanic() {
            self.addPhiOperands(variableAndPhi.0, variableAndPhi.1);
        }
    }

    fn emitBin(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: Op) {
        let registerType = self.bc.registers(lhs.value.toInt64());

        let ty = match registerType {
            BytecodeType::Int32 => Type::int32(),
            BytecodeType::Int64 => Type::int64(),
            BytecodeType::Float32 => Type::float32(),
            BytecodeType::Float64 => Type::float64(),
            _ => unreachable[Type](),
        };

        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let destInst = createBinaryInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    fn emitUn(dest: BytecodeRegister, src: BytecodeRegister, op: Op) {
        let registerType = self.bc.registers(dest.value.toInt64());

        let ty = match registerType {
            BytecodeType::Int32 => Type::int32(),
            BytecodeType::Int64 => Type::int64(),
            BytecodeType::Float32 => Type::float32(),
            BytecodeType::Float64 => Type::float64(),
            _ => unreachable[Type](),
        };

        let srcInst = self.readVariable(src, self.current());
        let destInst = createUnaryInst(op, ty, srcInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    fn emitDivMod(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: Op) {
        let registerType = self.bc.registers(dest.value.toInt64());

        let ty = match registerType {
            BytecodeType::Int32 => Type::int32(),
            BytecodeType::Int64 => Type::int64(),
            BytecodeType::Float32 => Type::float32(),
            BytecodeType::Float64 => Type::float64(),
            _ => unreachable[Type](),
        };
        
        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let divZeroCheck = createDivZeroCheck(rhsInst);
        self.current().appendInst(divZeroCheck);
        let destInst = createBinaryInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    fn emitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        let srcInst = self.readVariable(src, self.current());
        self.writeVariable(dest, self.current(), srcInst);
    }

    fn emitLoadGlobal(dest: BytecodeRegister, glob: GlobalId, ty: Type) {
        let globInst = createLoadGlobalInst(ty, glob);
        self.current().appendInst(globInst);
        self.writeVariable(dest, self.current(), globInst);
    }

    fn emitStoreGlobal(src: BytecodeRegister, glob: GlobalId, ty: Type) {
        let srcInst = self.readVariable(src, self.current());
        let globInst = createStoreGlobalInst(ty, glob, srcInst);
        self.current().appendInst(globInst);
    }

    fn emitTest(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: Op) {
        let registerType = self.bc.registers(lhs.value.toInt64());

        let ty = match registerType {
            BytecodeType::Int32 => Type::int32(),
            BytecodeType::Int64 => Type::int64(),
            BytecodeType::Float32 => Type::float32(),
            BytecodeType::Float64 => Type::float64(),
            _ => unreachable[Type](),
        };

        let lhsInst = self.readVariable(lhs, self.current());
        let rhsInst = self.readVariable(rhs, self.current());
        let destInst = createTestInst(op, ty, lhsInst, rhsInst);
        self.current().appendInst(destInst);
        self.writeVariable(dest, self.current(), destInst);
    }

    fn emitJump(offset: Int32) {
        let targetBlock = self.blockMap.blockAt((self.offset + offset).toInt64()).getOrPanic();
        let gotoInst = createGotoInst(targetBlock);
        self.current().appendInst(gotoInst);
        self.markBlockTerminated();
    }

    fn emitConditionalJump(opnd: BytecodeRegister, distance: Int32, value: Bool) {
        let opndInst = self.readVariable(opnd, self.current());
        let targetBlock = self.blockMap.blockAt((self.offset + distance).toInt64()).getOrPanic();
        let fallthroughBlock = self.blockMap.nextBlockAt((self.offset+1i32).toInt64()).getOrPanic();

        let cond = if value {
            createIfInst(opndInst, targetBlock, fallthroughBlock)
        } else {
            createIfInst(opndInst, fallthroughBlock, targetBlock)
        };

        self.current().appendInst(cond);
        self.markBlockTerminated();
    }

    fn emitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        let arrInst = self.readVariable(arr, self.current());
        let idxInst = self.readVariable(idx, self.current());

        let arrayLengthInst = createArrayLength(arrInst);
        self.current().appendInst(arrayLengthInst);

        let boundsCheckInst = createBoundsCheck(idxInst, arrayLengthInst);
        self.current().appendInst(boundsCheckInst);

        let arrayGetInst = createArrayGet(arrInst, idxInst, Type::Int32);
        self.current().appendInst(arrayGetInst);

        self.writeVariable(dest, self.current(), arrayGetInst);
    }

    fn emitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        let srcInst = self.readVariable(src, self.current());
        let arrInst = self.readVariable(arr, self.current());
        let idxInst = self.readVariable(idx, self.current());

        let arrayLengthInst = createArrayLength(arrInst);
        self.current().appendInst(arrayLengthInst);

        let boundsCheckInst = createBoundsCheck(idxInst, arrayLengthInst);
        self.current().appendInst(boundsCheckInst);

        let arraySetInst = createArraySet(arrInst, idxInst, srcInst);
        self.current().appendInst(arraySetInst);
    }

    fn emitRet(opnd: BytecodeRegister, ty: Type) {
        if ty.isUnit() {
            let inst = createReturnVoidInst();
            self.current().appendInst(inst);
            self.markBlockTerminated();
        } else {
            let value = self.readVariable(opnd, self.current());
            let inst = createReturnInst(value, ty);
            self.current().appendInst(inst);
            self.markBlockTerminated();
        }
    }
}
