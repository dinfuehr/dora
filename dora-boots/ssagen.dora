fun createGraph(bc: BytecodeFunction) -> Graph {
    let graph = Graph();

    let blockBuilder = BlockBuilder(graph, bc);
    blockBuilder.run();

    let ssagen = SsaGen(graph, bc, blockBuilder);
    ssagen.run();

    graph
}

class SsaGen(let graph: Graph, let bc: BytecodeFunction, let blockBuilder: BlockBuilder): BytecodeVisitor {
    var currentBlock: Block;
    var offset: Int = 0;
    var currentDef: Array[HashMap[Block, Inst]];
    var blockTerminated: Bool = false;

    // a block is considered filled when all instructions are inserted
    var filledBlocks: BitSet = BitSet(0);

    // block is considered sealed when the set of predecessors is final
    var sealedBlocks: BitSet = BitSet(0);

    let incompletePhis: HashMap[Block, HashMap[BytecodeRegister, PhiInst]] = HashMap[Block, HashMap[BytecodeRegister, PhiInst]]();

    fun run() {
        self.prepare();
        self.setupArguments();

        readBytecode(self.bc.code, self);
        assert(self.blockTerminated);
        self.blockEndReached(nil);
    }

    fun prepare() {
        self.currentBlock = self.graph.getEntryBlock();

        self.currentDef = Array[HashMap[Block, Inst]](self.bc.registers.length());

        let blockCount = self.graph.blocks.length();

        self.filledBlocks = BitSet(blockCount);
        self.sealedBlocks = BitSet(blockCount);

        for i in range(0, self.currentDef.length()) {
            self.currentDef(i) = HashMap[Block, Inst]();
        }
    }

    fun setupArguments() {
        var i = 0;
        let entryBlock = self.graph.getEntryBlock();
        while i < self.bc.arguments {
            let ty = Type::fromBytecodeType(self.bc.registers.get(i));
            let argInst = ArgInst(i, ty);
            entryBlock.appendInst(argInst);
            self.writeVariable(BytecodeRegister(i), entryBlock, argInst);
            i = i + 1;
        }
    }

    fun writeVariable(register: BytecodeRegister, block: Block, value: Inst) {
        self.currentDef.get(register.value).insert(block, value);
    }

    fun readVariable(register: BytecodeRegister, block: Block) -> Inst {
        if self.currentDef.get(register.value).contains(block) {
            self.currentDef.get(register.value).get(block).unwrap()
        } else {
            self.readVariableRecursive(register, block)
        }
    }

    fun readVariableRecursive(register: BytecodeRegister, block: Block) -> Inst {
        let value: Inst = if !self.sealedBlocks.contains(block.id) {
            // While all blocks are created with predecessors and successors before
            // this pass in BlockBuilder already, we still need to handle unsealed blocks.
            // E.g. Register is accessed in while header and updated in the while body.
            // In this case the while header is filled before the while body. If we wouldn't
            // handle unsealed blocks we wouldn't create a Phi instruction, since the
            // while body predecessor is still empty.
            let incomplete = PhiInst();
            block.appendPhi(incomplete);

            if self.incompletePhis.contains(block) {
                self.incompletePhis.get(block).unwrap().insert(register, incomplete);
            } else {
                let map = HashMap[BytecodeRegister, PhiInst]();
                map.insert(register, incomplete);
                self.incompletePhis.insert(block, map);
            }

            incomplete as Inst
        } else if block.predecessors.length() == 1 {
            self.readVariable(register, block.predecessors.first().unwrap())
        } else {
            let phi = PhiInst();
            block.appendPhi(phi);
            self.writeVariable(register, block, phi);
            self.addPhiOperands(register, phi)
        };

        self.writeVariable(register, block, value);
        value
    }

    fun addPhiOperands(register: BytecodeRegister, phi: PhiInst) -> Inst {
        let it = phi.block.unwrap().predecessors.makeIterator();
        while it.hasNext() {
            let pred = it.next();
            let inst = self.readVariable(register, pred);
            phi.addInput(inst);
        }
        phi.registerUses();
        self.tryRemoveTrivialPhi(phi)
    }

    fun tryRemoveTrivialPhi(phi: PhiInst) -> Inst {
        var same = none[Inst]();

        let it = phi.inputs.makeIterator();
        while it.hasNext() {
            let op = it.next().value;

            if (same.isSome() && same.unwrap() === op) || op === phi {
                continue;
            }

            if same.isSome() {
                return phi;
            }

            same = some[Inst](op);
        }

        if same.isNone() {
            same = some[Inst](UndefInst());
        }

        let users = phi.users();

        phi.replaceWith(same.unwrap());
        phi.remove();

        for i in range(0, users.length()) {
            let user = users(i);

            if user === phi {
                continue;
            }

            if user is PhiInst {
                self.tryRemoveTrivialPhi(user as PhiInst);
            }
        }

        same.unwrap()
    }

    fun markBlockTerminated() {
        self.blockTerminated = true;
    }

    @override fun visitInstruction(offset: Int) {
        self.offset = offset;

        let block = self.blockBuilder.blockAt(offset);

        if block.isSome() {
            self.blockEndReached(block.unwrap());
        }

        self.blockTerminated = false;
    }

    fun blockEndReached(next: Block) {
        let block = self.currentBlock;

        if !self.blockTerminated {
            let gotoInst = GotoInst(next);
            block.appendInst(gotoInst);
        }

        // We change the current block, that means all instructions
        // are inserted. The block is now filled.
        self.fillBlock(block);

        // We don't really know when to seal a block from the bytecode
        // Try to seal this block if all predecessors are filled.
        self.trySealBlock(block);

        // This block might have a back edge to a loop header. Since this
        // block is now filled, we might be able to seal another block.
        let it = block.successors.makeIterator();

        while it.hasNext() {
            let succ = it.next();
            self.trySealBlock(succ);
        }

        self.currentBlock = next;
    }

    fun fillBlock(block: Block) {
        assert(!self.filledBlocks.contains(block.id));
        self.filledBlocks.insert(block.id);
    }

    fun trySealBlock(block: Block) {
        if self.sealedBlocks.contains(block.id) {
            return;
        }

        // all predecessors need to be filled
        let it = block.predecessors.makeIterator();

        while it.hasNext() {
            let pred = it.next();
            if !self.filledBlocks.contains(pred.id) {
                return;
            }
        }

        self.sealBlock(block);
    }

    fun sealBlock(block: Block) {
        assert(!self.sealedBlocks.contains(block.id));
        self.sealedBlocks.insert(block.id);

        let map = self.incompletePhis.get(block);
        if map.isNone() { return; }

        let it = map.unwrap().makeIterator();

        while it.hasNext() {
            let variableAndPhi = it.next();
            self.addPhiOperands(variableAndPhi.0, variableAndPhi.1);
        }
    }

    @override fun visitAddInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::int());
    }
    @override fun visitAddLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::long());
    }
    @override fun visitAddFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::float());
    }
    @override fun visitAddDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Add, Type::double());
    }

    fun emitBin(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: BinOp, ty: Type) {
        let lhsInst = self.readVariable(lhs, self.currentBlock);
        let rhsInst = self.readVariable(rhs, self.currentBlock);
        let destInst = BinaryInst(op, ty, lhsInst, rhsInst);
        self.currentBlock.appendInst(destInst);
        self.writeVariable(dest, self.currentBlock, destInst);
    }

    @override fun visitSubInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::int());
    }
    @override fun visitSubLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::long());
    }
    @override fun visitSubFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::float());
    }
    @override fun visitSubDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sub, Type::double());
    }

    @override fun visitNegInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::int());
    }
    @override fun visitNegLong(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::long());
    }
    @override fun visitNegFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::float());
    }
    @override fun visitNegDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Neg, Type::double());
    }

    fun emitUn(dest: BytecodeRegister, src: BytecodeRegister, op: UnOp, ty: Type) {
        let srcInst = self.readVariable(src, self.currentBlock);
        let destInst = UnaryInst(op, ty, srcInst);
        self.currentBlock.appendInst(destInst);
        self.writeVariable(dest, self.currentBlock, destInst);
    }

    @override fun visitMulInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::int());
    }
    @override fun visitMulLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::long());
    }
    @override fun visitMulFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::float());
    }
    @override fun visitMulDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mul, Type::double());
    }

    @override fun visitDivInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::int());
    }
    @override fun visitDivLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::long());
    }
    @override fun visitDivFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::float());
    }
    @override fun visitDivDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Div, Type::double());
    }

    @override fun visitModInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mod, Type::int());
    }
    @override fun visitModLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Mod, Type::long());
    }

    @override fun visitAndInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::And, Type::int());
    }
    @override fun visitAndLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::And, Type::long());
    }

    @override fun visitOrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Or, Type::int());
    }
    @override fun visitOrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Or, Type::long());
    }

    @override fun visitXorInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Xor, Type::int());
    }
    @override fun visitXorLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Xor, Type::long());
    }

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::bool());
    }
    @override fun visitNotInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::int());
    }
    @override fun visitNotLong(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitUn(dest, src, UnOp::Not, Type::long());
    }

    @override fun visitShlInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shl, Type::int());
    }
    @override fun visitShrInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shr, Type::int());
    }
    @override fun visitSarInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sar, Type::int());
    }

    @override fun visitShlLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shl, Type::long());
    }
    @override fun visitShrLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Shr, Type::long());
    }
    @override fun visitSarLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitBin(dest, lhs, rhs, BinOp::Sar, Type::long());
    }

    @override fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovByte(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovInt(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovLong(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovFloat(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovDouble(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }
    @override fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitMov(dest, src);
    }

    fun emitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        let srcInst = self.readVariable(src, self.currentBlock);
        self.writeVariable(dest, self.currentBlock, srcInst);
    }

    @override fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldByte(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldInt(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldLong(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldFloat(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldDouble(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @override fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldByte(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldInt(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldLong(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldFloat(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldDouble(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }
    @override fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { unimplemented(); }

    @override fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::bool());
    }
    @override fun visitLoadGlobalByte(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::byte());
    }
    @override fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::char());
    }
    @override fun visitLoadGlobalInt(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::int());
    }
    @override fun visitLoadGlobalLong(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::long());
    }
    @override fun visitLoadGlobalFloat(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::float());
    }
    @override fun visitLoadGlobalDouble(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::double());
    }
    @override fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) {
        self.emitLoadGlobal(dest, glob, Type::ptr());
    }

    fun emitLoadGlobal(dest: BytecodeRegister, glob: GlobalId, ty: Type) {
        let globInst = LoadGlobalInst(ty, glob);
        self.currentBlock.appendInst(globInst);
        self.writeVariable(dest, self.currentBlock, globInst);
    }

    @override fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::bool());
    }
    @override fun visitStoreGlobalByte(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::byte());
    }
    @override fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::char());
    }
    @override fun visitStoreGlobalInt(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::int());
    }
    @override fun visitStoreGlobalLong(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::long());
    }
    @override fun visitStoreGlobalFloat(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::float());
    }
    @override fun visitStoreGlobalDouble(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::double());
    }
    @override fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) {
        self.emitStoreGlobal(src, glob, Type::ptr());
    }

    fun emitStoreGlobal(src: BytecodeRegister, glob: GlobalId, ty: Type) {
        let srcInst = self.readVariable(src, self.currentBlock);
        let globInst = StoreGlobalInst(ty, glob, srcInst);
        self.currentBlock.appendInst(globInst);
    }

    @override fun visitPushRegister(src: BytecodeRegister) { unimplemented(); }

    @override fun visitConstNil(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstTrue(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstFalse(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroByte(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroChar(dest: BytecodeRegister) { unimplemented(); }
    @override fun visitConstZeroInt(dest: BytecodeRegister) {
        let inst = IntConst(0);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstZeroLong(dest: BytecodeRegister) {
        let inst = LongConst(0L);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstZeroFloat(dest: BytecodeRegister) {
        let inst = FloatConst(0.0F);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstZeroDouble(dest: BytecodeRegister) {
        let inst = DoubleConst(0.0);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstByte(dest: BytecodeRegister, value: Byte) { unimplemented(); }
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }
    @override fun visitConstInt(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toInt().unwrap();
        let inst = IntConst(value);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstLong(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toLong().unwrap();
        let inst = LongConst(value);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstFloat(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toFloat().unwrap();
        let inst = FloatConst(value);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstDouble(dest: BytecodeRegister, idx: ConstPoolId) {
        let value = self.bc.constPool(idx).toDouble().unwrap();
        let inst = DoubleConst(value);
        self.currentBlock.appendInst(inst);
        self.writeVariable(dest, self.currentBlock, inst);
    }
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { unimplemented(); }

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Equal, Type::ptr());
    }
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::NotEqual, Type::ptr());
    }

    @override fun visitTestEqInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Equal, Type::int());
    }
    @override fun visitTestNeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::NotEqual, Type::int());
    }
    @override fun visitTestGtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Greater, Type::int());
    }
    @override fun visitTestGeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::GreaterOrEqual, Type::int());
    }
    @override fun visitTestLtInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::Less, Type::int());
    }
    @override fun visitTestLeInt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitTest(dest, lhs, rhs, TestOp::LessOrEqual, Type::int());
    }

    @override fun visitTestEqLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeLong(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @override fun visitTestEqFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeFloat(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    @override fun visitTestEqDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestNeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestGeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLtDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }
    @override fun visitTestLeDouble(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { unimplemented(); }

    fun emitTest(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister, op: TestOp, ty: Type) {
        let lhsInst = self.readVariable(lhs, self.currentBlock);
        let rhsInst = self.readVariable(rhs, self.currentBlock);
        let destInst = TestInst(op, ty, lhsInst, rhsInst);
        self.currentBlock.appendInst(destInst);
        self.writeVariable(dest, self.currentBlock, destInst);
    }

    @override fun visitJumpLoop(offset: Int) {
        let targetBlock = self.blockBuilder.blockAt(self.offset - offset).unwrap();
        let gotoInst = GotoInst(targetBlock);
        self.currentBlock.appendInst(gotoInst);
        self.markBlockTerminated();
    }
    
    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int) {
        self.emitConditionalJump(opnd, offset, false);
    }
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt().unwrap();
        self.emitConditionalJump(opnd, offset, false);
    }
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int) {
        self.emitConditionalJump(opnd, offset, true);
    }
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt().unwrap();
        self.emitConditionalJump(opnd, offset, true);
    }
    @override fun visitJump(offset: Int) {
        self.emitJump(offset);
    }
    @override fun visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt().unwrap();
        self.emitJump(offset);
    }

    fun emitJump(offset: Int) {
        let targetBlock = self.blockBuilder.blockAt(self.offset + offset).unwrap();
        let gotoInst = GotoInst(targetBlock);
        self.currentBlock.appendInst(gotoInst);
        self.markBlockTerminated();
    }

    fun emitConditionalJump(opnd: BytecodeRegister, offset: Int, value: Bool) {
        let opndInst = self.readVariable(opnd, self.currentBlock);
        let targetBlock = self.blockBuilder.blockAt(self.offset + offset).unwrap();
        let fallthroughBlock = self.blockBuilder.nextBlockAt(self.offset+1).unwrap();

        let cond = if value {
            IfInst(opndInst, targetBlock, fallthroughBlock)
        } else {
            IfInst(opndInst, fallthroughBlock, targetBlock)
        };

        self.currentBlock.appendInst(cond);
        self.markBlockTerminated();
    }

    @override fun visitInvokeDirectVoid(fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @override fun visitInvokeVirtualVoid(fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @override fun visitInvokeStaticVoid(fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticByte(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticInt(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticLong(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticFloat(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticDouble(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }
    @override fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId, count: Int) { unimplemented(); }

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { unimplemented(); }

    @override fun visitRetVoid() {
        let inst = ReturnVoidInst();
        self.currentBlock.appendInst(inst);
        self.markBlockTerminated();
    }

    @override fun visitRetBool(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::bool());
    }
    @override fun visitRetByte(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::byte());
    }
    @override fun visitRetChar(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::char());
    }
    @override fun visitRetInt(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::int());
    }
    @override fun visitRetLong(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::long());
    }
    @override fun visitRetFloat(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::float());
    }
    @override fun visitRetDouble(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::double());
    }
    @override fun visitRetPtr(opnd: BytecodeRegister) {
        self.emitRet(opnd, Type::ptr());
    }

    fun emitRet(opnd: BytecodeRegister, ty: Type) {
        let value = self.readVariable(opnd, self.currentBlock);
        let inst = ReturnInst(value, ty);
        self.currentBlock.appendInst(inst);
        self.markBlockTerminated();
    }
}
