use package::assembler::{FloatRegister, Register};
use package::bytecode::data::BytecodeType;
use package::codegen::CodeGen;
use package::compilation::CompilationInfo;
use package::graph::{Graph, InputOutputOverlap, Inst, Location, LocationData, Op, Operand, Policy, StackSlot, Type};
use package::interface::{config, PTR_SIZE, Architecture};

pub fn ensureLocationData(graph: Graph, codegen: CodeGen, ci: CompilationInfo): Int32 {
    let argumentLocations = computeArgumentLocations(codegen, ci);

    let annotator = LocationAnnotation(graph, codegen, ci, 0i32, argumentLocations);
    annotator.annotate();
    annotator.maxOutgoingArgsSize
}

class LocationAnnotation {
    graph: Graph,
    codegen: CodeGen,
    ci: CompilationInfo,
    maxOutgoingArgsSize: Int32,
    argumentLocations: Array[Location],
}

impl LocationAnnotation {
    fn annotate() {
        for block in self.graph.insertionOrderIterator() {
            for inst in block.phisIterator() {
                let loc_data = LocationData::new(inst);
                inst.setLocationData(loc_data);
            }

            for inst in block.instructionsIterator() {
                self.annotateInst(inst);
            }
        }
    }

    fn annotateInst(inst: Inst) {
        let loc = LocationData::new(inst);
        inst.setLocationData(loc);
        let arch = config.architecture;

        match inst.op() {
            Op::Arg => {
                let location = self.argumentLocations(inst.getArgIndex().toInt64());

                if inst.getValueType().isAnyFloat() {
                    if location.isFloatRegister() {
                        useOutputFloatRegisterFixed(inst, location.getFloatRegister(), InputOutputOverlap::NoOverlap);
                    } else  {
                        useOutputFloatStack(inst, location);
                    }
                } else {
                    if location.isRegister() {
                        useOutputRegisterFixed(inst, location.getRegister(), InputOutputOverlap::NoOverlap);
                    } else  {
                        useOutputFixedStack(inst, location);
                    }
                }
            }

            Op::TrueConst |
            Op::FalseConst => {
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::UInt8Const
            | Op::Int32Const
            | Op::Int64Const
            | Op::StringConst
            | Op::NullConst => {
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::Float32Const
            | Op::Float64Const => {
                useOutputFloatRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::DivZeroCheck => {
                useInputRegister(inst, 0);
            }

            Op::Greater
            | Op::GreaterOrEqual
            | Op::Less
            | Op::LessOrEqual
            | Op::Equal
            | Op::NotEqual => {
                if inst.getOperationType().isAnyFloat() {
                    useInputFloatRegister(inst, 0);
                    useInputFloatRegister(inst, 1);
                } else {
                    useInputRegister(inst, 0);
                    useInputRegister(inst, 1);
                }

                useOutputRegister(inst, InputOutputOverlap::Overlap);
            }

            Op::CheckedAdd => {
                self.codegen.annotateCheckedAdd(inst);
            }

            Op::CheckedSub => {
                self.codegen.annotateCheckedSub(inst);
            }

            Op::CheckedMul => {
                self.codegen.annotateCheckedMul(inst);
            }

            Op::And => {
                self.codegen.annotateAnd(inst);
            }

            Op::Or => {
                self.codegen.annotateOr(inst);
            }

            Op::Xor => {
                self.codegen.annotateXor(inst);
            }

            Op::Sar => {
                self.codegen.annotateSar(inst);
            }

            Op::Shr => {
                self.codegen.annotateShr(inst);
            }

            Op::Shl => {
                self.codegen.annotateShl(inst);
            }

            Op::Add
            | Op::Sub
            | Op::Mul
            | Op::Div => {
                if inst.getValueType().isAnyFloat() {
                    useInputFloatRegister(inst, 0);
                    useInputFloatRegister(inst, 1);
                    useOutputFloatRegister(inst, InputOutputOverlap::Overlap);
                } else {
                    useInputRegister(inst, 0);
                    useInputRegister(inst, 1);
                    useOutputRegister(inst, InputOutputOverlap::Overlap);
                }
            }

            Op::CheckedDiv => {
                self.codegen.annotateCheckedDiv(inst);
            }

            Op::CheckedMod => {
                self.codegen.annotateCheckedMod(inst);
            }

            Op::Neg | Op::CheckedNeg => {
                if inst.getValueType().isAnyFloat() {
                    useInputFloatRegister(inst, 0);
                    useOutputFloatRegister(inst, InputOutputOverlap::Overlap);
                } else {
                    useInputRegister(inst, 0);
                    useOutputRegister(inst, InputOutputOverlap::Overlap);
                }
            }

            Op::If => {
                useInputRegister(inst, 0);
            }

            Op::Goto => {}

            Op::Return => {
                self.codegen.annotateReturn(inst);
            }

            Op::InvokeStatic
            | Op::InvokeDirect
            | Op::InvokeVirtual
            | Op::InvokeLambda
            => {
                let outgoingArgsSize = annotateCall(inst, loc, self.codegen, self.ci);
                self.maxOutgoingArgsSize = Int32::max(self.maxOutgoingArgsSize, outgoingArgsSize);
            }

            Op::ArrayLength => {
                useInputRegister(inst, 0);
                useOutputRegister(inst, InputOutputOverlap::Overlap);
            }

            Op::BoundsCheck => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
            }

            Op::LoadArray => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);

                if inst.getValueType().isAnyFloat() {
                    useOutputFloatRegister(inst, InputOutputOverlap::NoOverlap);
                } else {
                    useOutputRegister(inst, InputOutputOverlap::NoOverlap);
                }
            }

            Op::StoreArray => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);

                if inst.getOperationType().isAnyFloat() {
                    useInputFloatRegister(inst, 2);
                } else {
                    useInputRegister(inst, 2);
                }

                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
            }

            Op::NewObject | Op::NewLambda => {
                addTempRegister(inst);
                useOutputRegister(inst, InputOutputOverlap::Overlap);
                needsRegisterSnapshot(inst);
            }

            Op::NewArray => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
                useOutputRegister(inst, InputOutputOverlap::Overlap);
                addTempRegister(inst);
                needsRegisterSnapshot(inst);
            }

            Op::LoadGlobal => {
                if inst.getOperationType().isAnyFloat() {
                    useOutputFloatRegister(inst,  InputOutputOverlap::NoOverlap);
                } else {
                    useOutputRegister(inst,  InputOutputOverlap::NoOverlap);
                }
            }

            Op::GetGlobalAddress => {
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::EnsureGlobalInitialized => {
                addTempRegister(inst);
                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
                needsRegisterSnapshot(inst);
            }

            Op::StoreGlobal => {
                if inst.getOperationType().isAnyFloat() {
                    useInputFloatRegister(inst, 0);
                } else {
                    useInputRegister(inst, 0);
                }
            }

            Op::MarkGlobalInitialized => {
                if config.architecture == Architecture::Arm64 {
                    addTempRegister(inst);
                }
            }

            Op::ThreadCurrent => {
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::AllocateStack => {
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::Load => {
                useInputRegister(inst, 0);

                if inst.getValueType().isAnyFloat() {
                    useOutputFloatRegister(inst, InputOutputOverlap::Overlap);
                } else {
                    useOutputRegister(inst, InputOutputOverlap::Overlap);
                }
            }

            Op::Store => {
                useInputRegister(inst, 0);

                if inst.getOperationType().isAnyFloat() {
                    useInputFloatRegister(inst, 1);
                } else {
                    useInputRegister(inst, 1);
                }

                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
            }

            Op::StoreWb => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
                needsRegisterSnapshot(inst);
            }

            Op::StoreArrayWb => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
                useInputRegister(inst, 2);
                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
                needsRegisterSnapshot(inst);
            }

            Op::StoreArrayAddressWb => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
                useInputRegister(inst, 2);
                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
                needsRegisterSnapshot(inst);
            }

            Op::GetElementPtr => {
                useInputRegister(inst, 0);
                useInputRegister(inst, 1);
                useOutputRegister(inst, InputOutputOverlap::NoOverlap);
            }

            Op::Abort => {}

            Op::Assert => {
                useInputRegister(inst, 0);
                setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
            }

            Op::Not => {
                self.codegen.annotateNot(inst);
            }

            Op::Convert => {
                if inst.getSourceType().isAnyFloat() {
                    useInputFloatRegister(inst, 0);
                } else {
                    useInputRegister(inst, 0);
                }

                if inst.getValueType().isAnyFloat() {
                    useOutputFloatRegister(inst, InputOutputOverlap::Overlap);
                } else {
                    useOutputRegister(inst, InputOutputOverlap::Overlap);
                }
            }

            Op::CompareOrdering => {
                self.codegen.annotateCompareOrdering(inst);
            }

            Op::Bitcast => {
                self.codegen.annotateBitcast(inst);
            }


            Op::RoundDown => {
                self.codegen.annotateRoundDown(inst);
            }

            Op::RoundUp => {
                self.codegen.annotateRoundUp(inst);
            }

            Op::RoundHalfEven => {
                self.codegen.annotateRoundHalfEven(inst);
            }

            Op::RoundToZero => {
                self.codegen.annotateRoundToZero(inst);
            }

            Op::Abs => {
                self.codegen.annotateAbs(inst);
            }

            _ => {
                println("unsupported op ${inst.op().name()}");
                unreachable[()]();
            }
        }
    }
}

fn computeArgumentLocations(codegen: CodeGen, ci: CompilationInfo): Array[Location] {
    let arguments = ci.bc.arguments.toInt64();
    let locations = Vec[Location]::new();
    locations.reserve(arguments);
    let mut gp_idx = 0;
    let mut fp_idx = 0;
    let mut next_fp_offset = PTR_SIZE * 2i32;

    let gp_argument_registers = codegen.argumentRegisters();
    let fp_argument_registers = codegen.argumentFloatRegisters();

    let retTy = ci.returnType.specialize(ci.typeParams);

    if retTy.isStruct() || retTy.isTuple() {
        locations.push(gp_argument_registers(gp_idx).toLocation());
        gp_idx = gp_idx + 1;
    }

    for idx in std::range(0, arguments) {
        let ty = ci.bc.registers(idx);
        let ty = ty.specialize(ci.typeParams);

        if ty.isUnit() {
            continue;
        }

        let uses_fp_reg = match ty {
            BytecodeType::Float32 | BytecodeType::Float64 => true,
            BytecodeType::Struct(_, _)
            | BytecodeType::Tuple(_)
            | BytecodeType::Bool
            | BytecodeType::UInt8
            | BytecodeType::Int32
            | BytecodeType::Char
            | BytecodeType::Int64
            | BytecodeType::Class(_, _)
            | BytecodeType::Ptr
            | BytecodeType::Lambda(_, _)
            | BytecodeType::Trait(_, _)
            | BytecodeType::Enum(_, _) => false,
            BytecodeType::Unit
            | BytecodeType::This
            | BytecodeType::TypeParam(_)
            | BytecodeType::TypeAlias(_) => unreachable[Bool](),
        };

        if uses_fp_reg {
            if fp_idx < fp_argument_registers.size() {
                locations.push(fp_argument_registers(fp_idx).toLocation());
            } else {
                locations.push(Location::fp(next_fp_offset));
                next_fp_offset = next_fp_offset + PTR_SIZE;
            }
            fp_idx = fp_idx + 1;
        } else {
            if gp_idx < gp_argument_registers.size() {
                locations.push(gp_argument_registers(gp_idx).toLocation());
            } else {
                locations.push(Location::fp(next_fp_offset));
                next_fp_offset = next_fp_offset + PTR_SIZE;
            }

            gp_idx = gp_idx + 1;
        }
    }


    locations.toArray()
}

fn annotateCall(inst: Inst, loc: LocationData, codegen: CodeGen, ci: CompilationInfo): Int32 {
    let mut idx = 0;
    let mut gp_idx = 0;
    let mut fp_idx = 0;
    let mut next_sp_offset: Int32 = 0;

    let gp_regs = codegen.argumentRegisters();
    let fp_regs = codegen.argumentFloatRegisters();

    for input in inst.getInputs() {
        if input.getValue().getValueType().isAnyFloat() {
            if fp_idx < fp_regs.size() {
                useInputFloatRegisterFixed(inst, idx, fp_regs(fp_idx));
            } else {
                useInputFloatStack(inst, idx, StackSlot::sp(next_sp_offset));
                next_sp_offset = next_sp_offset + PTR_SIZE;
            }
            fp_idx = fp_idx + 1;
        } else {
            if gp_idx < gp_regs.size() {
                useInputRegisterFixed(inst, idx, gp_regs(gp_idx));
            } else {
                useInputStack(inst, idx, StackSlot::sp(next_sp_offset));
                next_sp_offset = next_sp_offset + PTR_SIZE;
            }
            gp_idx = gp_idx + 1;
        }
        idx = idx + 1;
    }

    if inst.op() == Op::InvokeVirtual || inst.op() == Op::InvokeLambda {
        addTempRegister(inst);
    }

    let ty = inst.getValueType();

    if ty.isUnit() {
        setOutputOverlaps(inst, InputOutputOverlap::NoOverlap);
    } else {
        if ty.isAnyFloat() {
            let reg = codegen.getFloatReturnRegister();
            useOutputFloatRegisterFixed(inst, reg, InputOutputOverlap::NoOverlap);
        } else {
            let reg = codegen.getReturnRegister();
            useOutputRegisterFixed(inst, reg, InputOutputOverlap::NoOverlap);
        }
    }

    next_sp_offset
}

pub fn useOutputRegister(inst: Inst, overlaps: InputOutputOverlap) {
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::AnyReg, Location::None), overlaps);
}

pub fn useOutputRegisterFixed(inst: Inst, reg: Register, overlap: InputOutputOverlap) {
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::FixedReg, Location::Reg(reg)), overlap);
}

pub fn useOutputFloatRegister(inst: Inst, overlap: InputOutputOverlap) {
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::AnyFloatReg, Location::None), overlap);
}

pub fn useOutputFloatRegisterFixed(inst: Inst, reg: FloatRegister, overlap: InputOutputOverlap) {
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::FixedFloatReg, Location::FloatReg(reg)), overlap);
}

pub fn useInputRegister(inst: Inst, idx: Int64) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::AnyReg, Location::None));
}

pub fn useInputRegisterFixed(inst: Inst, idx: Int64, reg: Register) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::FixedReg, Location::Reg(reg)));
    applyHint(inst.getInput(idx).getValue(), Location::Reg(reg));
}

pub fn useInputFloatRegister(inst: Inst, idx: Int64) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::AnyFloatReg, Location::None));
}

pub fn useInputFloatRegisterFixed(inst: Inst, idx: Int64, reg: FloatRegister) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::FixedFloatReg, Location::FloatReg(reg)));
    applyHint(inst.getInput(idx).getValue(), Location::FloatReg(reg));
}

pub fn useInputStack(inst: Inst, idx: Int64, stack: StackSlot) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::FixedStack, Location::Stack(stack)));
}

pub fn useInputFloatStack(inst: Inst, idx: Int64, stack: StackSlot) {
    let loc = inst.getLocationData();
    loc.setInput(idx, Operand::new(Policy::FixedFloatStack, Location::Stack(stack)));
}

pub fn useOutputSameAsFirstInput(inst: Inst) {
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::SameAsFirstInput, Location::None), InputOutputOverlap::Overlap);
}

pub fn useOutputFloatStack(inst: Inst, stack: Location) {
    assert(stack.isStack());
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::FixedFloatStack, stack), InputOutputOverlap::Overlap);
}

pub fn useOutputFixedStack(inst: Inst, stack: Location) {
    assert(stack.isStack());
    let loc = inst.getLocationData();
    loc.setOutput(Operand::new(Policy::FixedStack, stack), InputOutputOverlap::Overlap);
}

pub fn addTempRegister(inst: Inst) {
    let loc = inst.getLocationData();
    loc.addTemp(Operand::new(Policy::AnyReg, Location::None));
}

pub fn addTempRegisterFixed(inst: Inst, reg: Register) {
    let loc = inst.getLocationData();
    loc.addTemp(Operand::new(Policy::FixedReg, Location::Reg(reg)));
}

pub fn setOutputOverlaps(inst: Inst, overlaps: InputOutputOverlap) {
    let loc = inst.getLocationData();
    loc.setOutputOverlaps(overlaps)
}

pub fn needsRegisterSnapshot(inst: Inst) {
    let loc = inst.getLocationData();
    loc.setNeedsRegisterSnapshot();
}

fn applyHint(inst: Inst, location: Location) {
    let loc = inst.getLocationData();

    if !loc.getHint().isNone() {
        return;
    }

    loc.setHint(location);
}
