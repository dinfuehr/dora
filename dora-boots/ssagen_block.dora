use std::BitSet;
use std::HashMap;

use package::bytecode::data::BytecodeFunction;
use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::reader::BytecodeIterator;
use package::graph::Graph;
use package::graph::Block;

pub fn createBlocksWithEdgesFromBytecode(graph: Graph, bc: BytecodeFunction): BlockMap {
    let blockMap = BlockMap::new(bc);

    // The first pass creates blocks
    BlockCreator::new(graph, bc, blockMap).run();

    // The second pass creates edges between blocks
    EdgeCreator::new(graph, bc, blockMap).run();

    blockMap
}

pub class BlockMap {
    bc: BytecodeFunction,
    blocks: HashMap[Int64, Block],
}

impl BlockMap {
    static fn new(bc: BytecodeFunction): BlockMap {
        BlockMap(bc, HashMap[Int64, Block]::new())
    }

    pub fn insert(offset: Int64, block: Block) {
        self.blocks.insert(offset, block);
    }

    pub fn blockAt(offset: Int64): Option[Block] {
        self.blocks(offset)
    }

    pub fn nextBlockAt(offset: Int64): Option[Block] {
        let mut offset = offset;

        while offset < self.bc.code.size() {
            let result = self.blockAt(offset);
            if result.isSome() { return result; }
            offset = offset + 1i64;
        }

        None
    }
}

class EdgeCreator {
    graph: Graph,
    bc: BytecodeFunction,
    blockMap: BlockMap,
    offset: Int64,
    currentBlock: Option[Block],
    blockTerminated: Bool,
}

impl EdgeCreator {
    static fn new(graph: Graph, bc: BytecodeFunction, blockMap: BlockMap): EdgeCreator {
        EdgeCreator(graph, bc, blockMap, 0, None[Block], false)
    }

    fn run() {
        for instInfo in BytecodeIterator::new(self.bc.code) {
            self.offset = instInfo.start;
            self.instructionStart();
            self.processInstruction(instInfo.start, instInfo.size, instInfo.inst);
        }
    }

    fn processInstruction(start: Int64, size: Int64, inst: BytecodeInstruction) {
        match inst {
            BytecodeInstruction::JumpLoop(distance) => {
                let targetBlock = self.blockMap.blockAt(self.offset - distance.toInt64()).getOrPanic();
                self.currentBlock.getOrPanic().addSuccessor(targetBlock);
                self.markBlockTerminated();
            },
            BytecodeInstruction::JumpIfFalse(_opnd, distance) => {
                let targetBlock = self.blockMap.blockAt(self.offset + distance.toInt64()).getOrPanic();
                self.currentBlock.getOrPanic().addSuccessor(targetBlock);
            },
            BytecodeInstruction::JumpIfTrue(_opnd, distance) => {
                let targetBlock = self.blockMap.blockAt(self.offset + distance.toInt64()).getOrPanic();
                self.currentBlock.getOrPanic().addSuccessor(targetBlock);
            },
            BytecodeInstruction::Jump(distance) => {
                let targetBlock = self.blockMap.blockAt(self.offset + distance.toInt64()).getOrPanic();
                self.currentBlock.getOrPanic().addSuccessor(targetBlock);
                self.markBlockTerminated();
            },
            BytecodeInstruction::Ret(_) => {
                self.markBlockTerminated();
            },

            _ => {
                // Non-terminator instruction
            },
        }
    }

    fn instructionStart() {
        let result = self.blockMap.blocks(self.offset);

        if result.isSome() {
            let nextBlock = result.getOrPanic();

            if self.currentBlock.isSome() {
                if !self.blockTerminated {
                    self.currentBlock.getOrPanic().addSuccessor(nextBlock);
                }
            }

            self.currentBlock = Some(nextBlock);
        }

        self.blockTerminated = false;
    }

    fn markBlockTerminated() {
        self.blockTerminated = true;
    }
}

class BlockCreator {
    graph: Graph,
    bc: BytecodeFunction,
    blockMap: BlockMap,
    blockStarts: BitSet,
}

impl BlockCreator {
    static fn new(graph: Graph, bc: BytecodeFunction, blockMap: BlockMap): BlockCreator {
        BlockCreator(
            graph,
            bc,
            blockMap,
            BitSet::new(bc.code.size())
        )
    }

    fn run() {
        // create block for first instruction
        let entryBlock = self.ensureBlock(0).getOrPanic();
        self.graph.setEntryBlock(entryBlock);

        for instInfo in BytecodeIterator::new(self.bc.code) {
            let start = instInfo.start;

            if self.blockStarts.contains(start) {
                self.ensureBlock(start);
            }

            self.processInstruction(start, instInfo.size, instInfo.inst);
        }
    }

    fn processInstruction(start: Int64, size: Int64, inst: BytecodeInstruction) {
        match inst {
            BytecodeInstruction::Ret(_) => {
                self.ensureBlock(start + size);
            },
            BytecodeInstruction::LoopStart => {
                self.ensureBlock(start);
            },
            BytecodeInstruction::JumpLoop(distance) => {
                let target = start - distance.toInt64();
                assert(self.blockMap.blockAt(target).isSome());
            },
            BytecodeInstruction::JumpIfFalse(_opnd, distance) => {
                self.ensureBlockLazy(start + distance.toInt64());
                self.ensureBlock(start + size);
            },
            BytecodeInstruction::JumpIfTrue(_opnd, distance) => {
                self.ensureBlockLazy(start + distance.toInt64());
                self.ensureBlock(start + size);
            },
            BytecodeInstruction::Jump(distance) => {
                self.ensureBlockLazy(start + distance.toInt64());
                self.ensureBlock(start + size);
            },

            _ => {
                // Non-terminator instruction
            },
        }
    }

    fn ensureBlock(offset: Int64): Option[Block] {
        assert(offset <= self.bc.code.size());
        if offset == self.bc.code.size() {
            return None;
        }

        let result = self.blockMap.blockAt(offset);
        if result.isSome() { return result; }

        let block = Block::new();
        self.graph.addBlock(block);
        self.blockMap.insert(offset, block);
        Some(block)
    }

    fn ensureBlockLazy(offset: Int64) {
        self.blockStarts.insert(offset);
    }
}
