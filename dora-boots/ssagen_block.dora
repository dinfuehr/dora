class BlockBuilder(let graph: Graph, let bc: BytecodeFunction): EmptyBytecodeVisitor {
    var offset: Int = 0;
    var currentBlock: Block;
    var blockTerminated: Bool = false;
    var blocks: HashMap[Int, Block] = HashMap[Int, Block]();

    fun run() {
        let blockCreator = SsagenCreateBlocks(self.graph, self.bc, self.blocks);
        blockCreator.run();

        self.currentBlock = self.graph.getEntryBlock();

        // iterate all bytecodes
        readBytecode(self.bc.code, self);
    }

    fun blockCount() -> Int {
        self.blocks.length().toInt()
    }

    fun blockAt(offset: Int) -> Option[Block] {
        self.blocks.get(offset)
    }

    fun nextBlockAt(offset: Int) -> Option[Block] {
        var offset = offset;
        while offset < self.bc.code.length() {
            let result = self.blockAt(offset);
            if result.isSome() { return result; }
            offset = offset + 1;
        }

        none[Block]()
    }

    fun markBlockTerminated() {
        self.blockTerminated = true;
    }

    @override fun visitInstruction(offset: Int) {
        self.offset = offset;

        let result = self.blocks.get(offset);

        if result.isSome() {
            let nextBlock = result.unwrap();

            if !self.blockTerminated {
                self.currentBlock.addSuccessor(nextBlock);
            }

            self.currentBlock = nextBlock;
        }

        self.blockTerminated = false;
    }

    @override fun visitJumpLoop(offset: Int) {
        let targetBlock = self.blockAt(self.offset - offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
        self.markBlockTerminated();
    }

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int) {
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
    }
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
    }
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int) {
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
    }
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
    }
    @override fun visitJump(offset: Int) {
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
        self.markBlockTerminated();
    }
    @override fun visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        let targetBlock = self.blockAt(self.offset + offset).unwrap();
        self.currentBlock.addSuccessor(targetBlock);
        self.markBlockTerminated();
    }

    @override fun visitRetVoid() {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }

    @override fun visitRetBool(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetUInt8(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetChar(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetInt32(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }

    @override fun visitRetInt64(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetFloat(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetDouble(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
    @override fun visitRetPtr(opnd: BytecodeRegister) {
        self.currentBlock.addSuccessor(self.graph.getExitBlock());
        self.markBlockTerminated();
    }
}

class SsagenCreateBlocks(let graph: Graph, let bc: BytecodeFunction, let blocks: HashMap[Int, Block]): EmptyBytecodeVisitor {
    var offset: Int = 0;
    var nextInstructionIsBlockStart: Bool = false;

    fun run() {
        let entryBlock = Block();
        self.graph.addBlock(entryBlock);
        self.graph.setEntryBlock(entryBlock);

        let exitBlock = Block();
        self.graph.addBlock(exitBlock);
        self.graph.setExitBlock(exitBlock);

        // create block for first instruction
        self.ensureBlockAt(0);

        // iterate all bytecodes
        readBytecode(self.bc.code, self);
    }

    fun ensureBlockAt(offset: Int) {
        let result = self.blocks.get(offset);
        if result.isSome() { return; }

        let block = Block();
        self.graph.addBlock(block);
        self.blocks.insert(offset, block);
    }

    fun markNextInstructionAsBlockStart() {
        self.nextInstructionIsBlockStart = true;
    }

    @override fun visitInstruction(offset: Int) {
        self.offset = offset;

        if self.nextInstructionIsBlockStart {
            self.ensureBlockAt(offset);
            self.nextInstructionIsBlockStart = false;
        }
    }

    @override fun visitJumpLoop(offset: Int) {
        self.ensureBlockAt(self.offset - offset);
    }

    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int) {
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int) {
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitJump(offset: Int) {
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitJumpConst(idx: ConstPoolId) {
        let offset = self.bc.constPool(idx).toInt32().unwrap();
        self.ensureBlockAt(self.offset + offset);
        self.markNextInstructionAsBlockStart();
    }

    @override fun visitRetVoid() {
        self.markNextInstructionAsBlockStart();
    }

    @override fun visitRetBool(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetUInt8(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetChar(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetInt32(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetInt64(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetFloat(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetDouble(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
    @override fun visitRetPtr(opnd: BytecodeRegister) {
        self.markNextInstructionAsBlockStart();
    }
}