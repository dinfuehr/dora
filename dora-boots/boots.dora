use package::assembler::{RegMap, RegSet, Register};
use package::codegen::CodeGen;
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;
use package::codegen::{emitInst, CodeDescriptor, setLocationConstraints};
use package::dominator::buildDominatorTree;
use package::graph::{createMove, Block, Graph, Inst, Location, LocationData, Op, opName};
use package::graph::dump::dumpGraph;
use package::graph_builder::createGraph;
use package::interface::{Architecture, CompilationInfo};
use package::interface::{compile, config, getSystemConfig};
use package::liveness::computeLiveness;

mod assembler;
mod bytecode;
mod codegen;
mod dce;
mod deserializer;
mod dominator_test;
mod dominator;
mod graph;
mod graph_builder_tests;
mod graph_builder;
mod interface;
mod liveness;
mod serializer;

pub fn compileFunction(ci: CompilationInfo): CodeDescriptor {
    let graph = createGraph(ci.bc);
    let codegen = createCodeGen(ci);

    buildDominatorTree(graph);
    computeLiveness(graph);

    if (ci.emitGraph) {
        println("after graph building:");
        println(dumpGraph(graph, config.architecture));
    }

    ensureLocationData(graph, codegen);
    allocateRegisters(graph, codegen);
    removePhis(graph, codegen);

    if (ci.emitGraph) {
        println("after register allocation:");
        println(dumpGraph(graph, config.architecture));
    }

    generate(graph, codegen)
}

fn ensureLocationData(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for inst in block.phisIterator() {
            setLocationConstraints(codegen, inst);
        }

        for inst in block.instructionsIterator() {
            setLocationConstraints(codegen, inst);
        }
    }
}

fn allocateRegisters(graph: Graph, codegen: CodeGen) {
    for block in graph.reversePostOrderIterator() {
        let dominator = block.getDominator();

        let inRegs = if dominator.isSome() {
            let dominator = dominator.getOrPanic();
            dominator.getInRegs().clone()
        } else {
            assert(block === graph.getEntryBlock());
            RegMap[Inst]::new(codegen.allocatableRegisters())
        };

        let dropRegisters: Vec[Register] = Vec[Register]::new();

        for (reg, inst) in inRegs {
            if !block.getLiveIn().contains(inst.id().toInt64()) {
                dropRegisters.push(reg);
            }
        }

        for reg in dropRegisters {
            inRegs.free(reg);
        }

        for inst in block.phisIterator() {
            let loc = inst.getLocationData();

            /*for input in inst.getInputs() {
                let value = input.getValue();

                if value.getLastUse() === input {
                    let output = value.getLocationData().getOutput();
                    if !output.hasRegister() {
                        println("no register for inst ${value.id()}");
                    }
                    inRegs.free(output.getRegister());
                }
            }*/

            // pick a register
            let register = inRegs.acquire(inst).getOrPanic();
            loc.getOutput().setRegister(register);
            
        }

        for inst in block.instructionsIterator() {
            let loc = inst.getLocationData();
            let mut idx = 0;

            for input in inst.getInputs() {
                let value = input.getValue();
                let output = value.getLocationData().getOutput();
                loc.getInput(idx).setRegister(output.getRegister());
                idx = idx + 1;
            }

            if loc.hasOutput() {
                let output = loc.getOutput();

                if output.hasRegister() {
                    // fixed register was already assigned
                    inRegs.pick(output.getRegister(), inst);
                } else {
                    // pick a register
                    let register = inRegs.acquire(inst).getOrPanic();
                    output.setRegister(register);
                    inRegs.acquire(inst).getOrPanic();
                }
            }

            for input in inst.getInputs() {
                let value = input.getValue();

                if value.getLastUse() === input {
                    let output = value.getLocationData().getOutput();
                    inRegs.free(output.getRegister());
                }
            }

        }

        block.setInRegs(inRegs);
    }
}

fn removePhis(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        for predecessorEdge in block.predecessors {
            let predecessor = predecessorEdge.source;
            let moves = ParallelMoveResolver::new();

            for phi in block.phisIterator() {
                let phiDestRegister = phi.getLocationData().getOutput().getRegister();
                let value = phi.getInput(predecessorEdge.targetIdx).getValue();

                // Critical edges are not supported yet.
                assert(predecessor.successors.size() == 1);

                let valueRegister = value.getLocationData().getOutput().getRegister();

                moves.add(phiDestRegister, valueRegister);
            }

            moves.resolve(predecessor);
        }
    }
}

class ParallelMoveResolver {
    moves: Vec[(Register, Register)],
}

impl ParallelMoveResolver {
    static fn new(): ParallelMoveResolver {
        ParallelMoveResolver(
            Vec[(Register, Register)]::new(),
        )
    }

    fn add(dest: Register, src: Register) {
        if dest == src { return; }
        self.moves.push((dest, src));
    }

    fn resolve(predecessor: Block) {
        // TODO: Check dependencies between moves.
        for (dest, src) in self.moves {
            let inst = createMove(dest, src);
            let terminator = predecessor.lastInst();
            assert(terminator.isTerminator());
            predecessor.insertBefore(inst, terminator);
        }
    }
}

fn generate(graph: Graph, codegen: CodeGen): CodeDescriptor {
    codegen.prolog();

    for block in graph.insertionOrderIterator() {
        block.setLabel(codegen.createLabel());
    }

    for block in graph.reversePostOrderIterator() {
        codegen.emitComment("Block ${block.id()}");
        codegen.bindLabel(block.getLabel());

        for inst in block.instructionsIterator() {
            emitInst(codegen, inst);
        }
    }

    codegen.finalize()
}

fn createCodeGen(ci: CompilationInfo): CodeGen {
    match config.architecture {
        Architecture::X64 => CodeGenX64::new(ci) as CodeGen,
        Architecture::Arm64 => CodeGenArm64::new(ci) as CodeGen,
    }
}