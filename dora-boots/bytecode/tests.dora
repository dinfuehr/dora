use package::bytecode::reader::decodeBytecode;
use package::bytecode::builder::BytecodeBuilder;
use package::bytecode::data::{BytecodeRegister, BytecodeType};
use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::data::ConstPoolId;

@Test
fn testBytecodeRet() {
    let writer = BytecodeBuilder::new();
    let r0 = writer.addRegister(BytecodeType::Unit);
    writer.emitRet(r0);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).op {
        BytecodeInstruction::Ret(reg) => {
            assert(r0 == reg);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeRetInt() {
    let writer = BytecodeBuilder::new();
    writer.emitRet(BytecodeRegister(17i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).op {
        BytecodeInstruction::Ret(opnd) => {
            assert(opnd.value == 17i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeRetWide() {
    let writer = BytecodeBuilder::new();
    writer.emitRet(BytecodeRegister(256i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).op {
        BytecodeInstruction::Ret(opnd) => {
            assert(opnd.value == 256i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeMov() {
    let writer = BytecodeBuilder::new();
    writer.emitMov(BytecodeRegister(0i32), BytecodeRegister(1i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).op {
        BytecodeInstruction::Mov(dest, src) => {
            assert(dest.value == 0i32 && src.value == 1i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeMovWide() {
    let writer = BytecodeBuilder::new();
    writer.emitMov(BytecodeRegister(256i32), BytecodeRegister(255i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 5);

    match instructions(0).op {
        BytecodeInstruction::Mov(dest, src) => {
            assert(dest.value == 256i32 && src.value == 255i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstByte() {
    let writer = BytecodeBuilder::new();
    writer.emitConstByte(BytecodeRegister(127i32), 255u8);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).op {
        BytecodeInstruction::ConstUInt8(dest, value) => {
            assert(dest.value == 127i32 && value == 255u8);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstByteWide() {
    let writer = BytecodeBuilder::new();
    writer.emitConstByte(BytecodeRegister(128i32), 255u8);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 4);

    match instructions(0).op {
        BytecodeInstruction::ConstUInt8(dest, value) => {
            assert(dest.value == 128i32 && value == 255u8);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeConstString() {
    let writer = BytecodeBuilder::new();
    writer.emitConstString(BytecodeRegister(7i32), ConstPoolId(0i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 3);

    match instructions(0).op {
        BytecodeInstruction::ConstString(dest, idx) => {
            assert(dest.value == 7i32 && idx.value == 0i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeSubFloat32() {
    let writer = BytecodeBuilder::new();
    writer.emitSub(BytecodeRegister(2i32), BytecodeRegister(9i32), BytecodeRegister(127i32));
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 4);

    match instructions(0).op {
        BytecodeInstruction::Sub(dest, lhs, rhs) => {
            assert(dest.value == 2i32 && lhs.value == 9i32 && rhs.value == 127i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpBack() {
    let writer = BytecodeBuilder::new();
    let lbl = writer.defineLabel();
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 2);

    match instructions(0).op {
        BytecodeInstruction::JumpLoop(distance) => {
            assert(distance == 0i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpBackWide() {
    let writer = BytecodeBuilder::new();
    let r0 = writer.addRegister(BytecodeType::Unit);
    let lbl = writer.defineLabel();
    let mut i = 0i32;
    while i < 128i32 {
        writer.emitRet(r0);
        i = i + 1i32;
    }
    writer.emitJumpLoop(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 129);
    assert(instructions(128).size == 3);

    match instructions(128).op {
        BytecodeInstruction::JumpLoop(distance) => {
            assert(distance == 256i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJump() {
    let writer = BytecodeBuilder::new();
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 5);

    match instructions(0).op {
        BytecodeInstruction::Jump(distance) => {
            assert(distance == 5i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeJumpFar() {
    let writer = BytecodeBuilder::new();
    let r0 = writer.addRegister(BytecodeType::Unit);
    let lbl = writer.createLabel();
    writer.emitJump(lbl);
    let mut i = 0i32;
    while i < 256i32 {
        writer.emitRet(r0);
        i = i + 1i32;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 257);
    assert(instructions(0).size == 5);

    match instructions(0).op {
        BytecodeInstruction::Jump(distance) => {
            assert(distance == 517i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJump() {
    let writer = BytecodeBuilder::new();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(9i32), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 6);

    match instructions(0).op {
        BytecodeInstruction::JumpIfTrue(opnd, distance) => {
            assert(opnd == BytecodeRegister(9i32) && distance == 6i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJumpFar() {
    let writer = BytecodeBuilder::new();
    let r0 = writer.addRegister(BytecodeType::Unit);
    let lbl = writer.createLabel();
    writer.emitJumpIfFalse(BytecodeRegister(9i32), lbl);
    let mut i = 0i32;
    while i < 256i32 {
        writer.emitRet(r0);
        i = i + 1i32;
    }
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 257);
    assert(instructions(0).size == 6);

    match instructions(0).op {
        BytecodeInstruction::JumpIfFalse(opnd, distance) => {
            assert(opnd == BytecodeRegister(9i32) && distance == 518i32);
        },
        _ => unreachable[()]()
    }
}

@Test
fn testBytecodeCondJumpWide() {
    let writer = BytecodeBuilder::new();
    let lbl = writer.createLabel();
    writer.emitJumpIfTrue(BytecodeRegister(128i32), lbl);
    writer.bindLabel(lbl);
    let fct = writer.generate();
    let instructions = decodeBytecode(fct.code);
    assert(instructions.size() == 1);
    assert(instructions(0).size == 7);

    match instructions(0).op {
        BytecodeInstruction::JumpIfTrue(opnd, distance) => {
            assert(opnd == BytecodeRegister(128i32) && distance == 7i32);
        },
        _ => unreachable[()]()
    }
}
