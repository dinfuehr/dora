use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::GlobalId;
use package::bytecode::data::ConstPoolId;
use package::bytecode::opcode as opc;

pub fn decodeBytecode(code: Array[UInt8]): Array[BytecodeInstructionInfo] {
    let result = Vec[BytecodeInstructionInfo]::new();

    for instInfo in BytecodeIterator::new(code) {
        result.push(instInfo);
    }

    result.toArray()
}

pub class BytecodeIterator {
    data: Array[UInt8],
    pos: Int64,
    length: Int64,
}

impl BytecodeIterator {
    pub static fn new(data: Array[UInt8]): BytecodeIterator {
        BytecodeIterator(data, 0, data.size())
    }

    pub fn next(): Option[BytecodeInstructionInfo] {
        if self.pos < self.length {
            Some[BytecodeInstructionInfo](self.readInstruction())
        } else {
            None[BytecodeInstructionInfo]
        }
    }

    fn readInstruction(): BytecodeInstructionInfo {
        let start = self.pos;
        let (wide, opcode) = self.readOpcode();

        let inst = if opcode == opc::BC_WIDE {
            std::fatalError("unexpected WIDE");
            unreachable[BytecodeInstruction]()

        } else if opcode == opc::BC_ADD {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Add(dest, lhs, rhs)

        } else if opcode == opc::BC_SUB {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Sub(dest, lhs, rhs)

        } else if opcode == opc::BC_NEG {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            BytecodeInstruction::Neg(dest, src)

        } else if opcode == opc::BC_MUL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Mul(dest, lhs, rhs)

        } else if opcode == opc::BC_DIV {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Div(dest, lhs, rhs)

        } else if opcode == opc::BC_MOD {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Mod(dest, lhs, rhs)

        } else if opcode == opc::BC_AND {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::And(dest, lhs, rhs)

        } else if opcode == opc::BC_OR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Or(dest, lhs, rhs)

        } else if opcode == opc::BC_XOR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Xor(dest, lhs, rhs)

        } else if opcode == opc::BC_NOT {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            BytecodeInstruction::Not(dest, src)

        } else if opcode == opc::BC_SHL {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Shl(dest, lhs, rhs)

        } else if opcode == opc::BC_SHR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Shr(dest, lhs, rhs)

        } else if opcode == opc::BC_SAR {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::Sar(dest, lhs, rhs)

        } else if opcode == opc::BC_MOV {
            let dest = self.readRegister(wide);
            let src = self.readRegister(wide);
            BytecodeInstruction::Mov(dest, src)

        } else if opcode == opc::BC_LOAD_FIELD {
            let dest = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::LoadField(dest, obj, idx)
        } else if opcode == opc::BC_STORE_FIELD {
            let src = self.readRegister(wide);
            let obj = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::StoreField(src, obj, idx)

        } else if opcode == opc::BC_LOAD_GLOBAL {
            let dest = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            BytecodeInstruction::LoadGlobal(dest, glob)
        } else if opcode == opc::BC_STORE_GLOBAL {
            let src = self.readRegister(wide);
            let glob = self.readGlobalId(wide);
            BytecodeInstruction::StoreGlobal(src, glob)

        } else if opcode == opc::BC_PUSH_REGISTER {
            let src = self.readRegister(wide);
            BytecodeInstruction::PushRegister(src)

        } else if opcode == opc::BC_CONST_TRUE {
            let dest = self.readRegister(wide);
            BytecodeInstruction::ConstTrue(dest)
        } else if opcode == opc::BC_CONST_FALSE {
            let dest = self.readRegister(wide);
            BytecodeInstruction::ConstFalse(dest)
        } else if opcode == opc::BC_CONST_UINT8 {
            let dest = self.readRegister(wide);
            let value = self.readByte().toUInt8();
            BytecodeInstruction::ConstUInt8(dest, value)
        } else if opcode == opc::BC_CONST_CHAR {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstChar(dest, idx)
        } else if opcode == opc::BC_CONST_INT32 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstInt32(dest, idx)
        } else if opcode == opc::BC_CONST_INT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstInt64(dest, idx)
        } else if opcode == opc::BC_CONST_FLOAT32{
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstFloat32(dest, idx)
        } else if opcode == opc::BC_CONST_FLOAT64 {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstFloat64(dest, idx)
        } else if opcode == opc::BC_CONST_STRING {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::ConstString(dest, idx)

        } else if opcode == opc::BC_TEST_EQ {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestEq(dest, lhs, rhs)
        } else if opcode == opc::BC_TEST_NE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestNe(dest, lhs, rhs)
        } else if opcode == opc::BC_TEST_GT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestGt(dest, lhs, rhs)
        } else if opcode == opc::BC_TEST_GE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestGe(dest, lhs, rhs)
        } else if opcode == opc::BC_TEST_LT {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestLt(dest, lhs, rhs)
        } else if opcode == opc::BC_TEST_LE {
            let dest = self.readRegister(wide);
            let lhs = self.readRegister(wide);
            let rhs = self.readRegister(wide);
            BytecodeInstruction::TestLe(dest, lhs, rhs)

        } else if opcode == opc::BC_LOOP_START {
            BytecodeInstruction::LoopStart

        } else if opcode == opc::BC_JUMP_LOOP {
            let offset = self.readOffset(wide);
            BytecodeInstruction::JumpLoop(offset)

        } else if opcode == opc::BC_JUMP_IF_FALSE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            BytecodeInstruction::JumpIfFalse(opnd, offset)
        } else if opcode == opc::BC_JUMP_IF_FALSE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::JumpIfFalseConst(opnd, idx)
        } else if opcode == opc::BC_JUMP_IF_TRUE {
            let opnd = self.readRegister(wide);
            let offset = self.readOffset(wide);
            BytecodeInstruction::JumpIfTrue(opnd, offset)
        } else if opcode == opc::BC_JUMP_IF_TRUE_CONST {
            let opnd = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::JumpIfTrueConst(opnd, idx)
        } else if opcode == opc::BC_JUMP {
            let offset = self.readOffset(wide);
            BytecodeInstruction::Jump(offset)
        } else if opcode == opc::BC_JUMP_CONST {
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::JumpConst(idx)

        } else if opcode == opc::BC_INVOKE_DIRECT {
            let dest = self.readRegister(wide);
            let fct = self.readConstPoolId(wide);
            BytecodeInstruction::InvokeDirect(dest, fct)

        } else if opcode == opc::BC_INVOKE_VIRTUAL {
            let dest = self.readRegister(wide);
            let fct = self.readConstPoolId(wide);
            BytecodeInstruction::InvokeVirtual(dest, fct)

        } else if opcode == opc::BC_INVOKE_STATIC {
            let dest = self.readRegister(wide);
            let fct = self.readConstPoolId(wide);
            BytecodeInstruction::InvokeStatic(dest, fct)

        } else if opcode == opc::BC_NEW_OBJECT {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::NewObject(dest, idx)
        } else if opcode == opc::BC_NEW_ARRAY {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            let length = self.readRegister(wide);
            BytecodeInstruction::NewArray(dest, idx, length)
        } else if opcode == opc::BC_NEW_LAMBDA {
            let dest = self.readRegister(wide);
            let idx = self.readConstPoolId(wide);
            BytecodeInstruction::NewLambda(dest, idx)

        } else if opcode == opc::BC_ARRAY_LENGTH {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            BytecodeInstruction::ArrayLength(dest, arr)

        } else if opcode == opc::BC_LOAD_ARRAY {
            let dest = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            BytecodeInstruction::LoadArray(dest, arr, idx)

        } else if opcode == opc::BC_STORE_ARRAY {
            let src = self.readRegister(wide);
            let arr = self.readRegister(wide);
            let idx = self.readRegister(wide);
            BytecodeInstruction::StoreArray(src, arr, idx)

        } else if opcode == opc::BC_RET {
            let opnd = self.readRegister(wide);
            BytecodeInstruction::Ret(opnd)

        } else {
            std::fatalError("unkown opcode ${opcode} ${opc::bytecodeName(opcode)}");
            unreachable[BytecodeInstruction]()
        };

        let size = self.pos - start;
        BytecodeInstructionInfo(start, opcode, size, inst)
    }

    fn readRegister(wide: Bool): BytecodeRegister {
        BytecodeRegister(self.readIndex(wide))
    }

    fn readOpcode(): (Bool, Int32) {
        let opcode = self.readByte();

        if opcode == opc::BC_WIDE {
            let opcode = self.readByte();
            (true, opcode)
        } else {
            (false, opcode)
        }
    }

    fn readGlobalId(wide: Bool): GlobalId {
        GlobalId(self.readIndex(wide))
    }

    fn readConstPoolId(wide: Bool): ConstPoolId {
        ConstPoolId(self.readIndex(wide))
    }

    fn readOffset(wide: Bool): Int32 {
        self.readIndex(wide)
    }

    fn readIndex(wide: Bool): Int32 {
        if wide {
            self.readInt32()
        } else {
            self.readByte()
        }
    }

    fn readByte(): Int32 {
        let value = self.data(self.pos);
        self.pos = self.pos + 1;

        value.toInt32()
    }

    fn readInt32(): Int32 {
        let by1 = self.readByte();
        let by2 = self.readByte();
        let by3 = self.readByte();
        let by4 = self.readByte();

        (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }
}

pub struct BytecodeInstructionInfo {
    pub start: Int64,
    pub opcode: Int32,
    pub size: Int64,
    pub inst: BytecodeInstruction,
}
