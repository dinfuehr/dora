use std::Stringable;
use std::Equals;
use std::Hash;

use package::graph::Block;

pub class BytecodeFunction {
    pub code: Array[UInt8],
    pub const_pool: Array[ConstPoolEntry],
    pub registers: Array[BytecodeType],
    pub locations: Array[(Int32, Location)],
    pub arguments: Int32,
}

impl BytecodeFunction {
    static fn new(
            code: Array[UInt8],
            const_pool: Array[ConstPoolEntry],
            registers: Array[BytecodeType],
            locations: Array[(Int32, Location)],
            arguments: Int32): BytecodeFunction {
        BytecodeFunction(code, const_pool, registers, locations, arguments)
    }

    pub fn constPool(idx: ConstPoolId): ConstPoolEntry {
        self.const_pool(idx.value.toInt64())
    }

    pub fn codeAt(idx: Int32): Int32 {
        self.code(idx.toInt64()).toInt32()
    }

    pub fn codeInt32At(idx: Int32): Int32 {
        let byte1 = self.codeAt(idx);
        let byte2 = self.codeAt(idx+1i32);
        let byte3 = self.codeAt(idx+2i32);
        let byte4 = self.codeAt(idx+3i32);

        (byte4 << 24i32) | (byte3 << 16i32) | (byte2 << 8i32) | byte1
    }

    pub fn getLocationAt(at: Int32): Location {
        for (offset, loc) in self.locations {
            if offset == at {
                return loc;
            }
        }

        unreachable[Location]()
    }
}

pub enum ConstPoolEntry {
    String(String),
    Float32(Float32),
    Float64(Float64),
    Int32(Int32),
    Int64(Int64),
    Char(Char),
    Class(ClassId, Array[BytecodeType]),
    Field(ClassId, Array[BytecodeType], FieldId),
    Fct(FctId, Array[BytecodeType]),
    TraitObjectMethod(BytecodeType, Int32, Array[BytecodeType]),
    Generic(Int32, FctId, Array[BytecodeType]),
    Enum(EnumId, Array[BytecodeType]),
    EnumVariant(EnumId, Array[BytecodeType], Int32),
    EnumElement(EnumId, Array[BytecodeType], Int32, Int32),
    Struct(StructId, Array[BytecodeType]),
    StructField(StructId, Array[BytecodeType], StructFieldId),
    Trait(TraitId, Array[BytecodeType], BytecodeType),
    TupleElement(BytecodeType, Int32),
    Tuple(Array[BytecodeType]),
    Lambda(Array[BytecodeType], BytecodeType),
}

impl ConstPoolEntry {
    pub fn toInt32(): Option[Int32] {
        match self {
            ConstPoolEntry::Int32(value) => Some(value),
            _ => None,
        }
    }

    pub fn toInt64(): Option[Int64] {
        match self {
            ConstPoolEntry::Int64(value) => Some(value),
            _ => None,
        }
    }

    pub fn toFloat32(): Option[Float32] {
        match self {
            ConstPoolEntry::Float32(value) => Some(value),
            _ => None,
        }
    }

    pub fn toFloat64(): Option[Float64] {
        match self {
            ConstPoolEntry::Float64(value) => Some(value),
            _ => None,
        }
    }
}

impl Stringable for ConstPoolEntry {
    fn toString(): String {
        match self {
            ConstPoolEntry::Int32(value) => "Int32 ${value}",
            ConstPoolEntry::Int64(value) => "Int64 ${value}",
            ConstPoolEntry::Float32(value) => "Float32 ${value}",
            ConstPoolEntry::Float64(value) => "Float64 ${value}",
            ConstPoolEntry::Char(value) => "Char ${value}",
            ConstPoolEntry::String(value) => "String ${value}",
            _ => unreachable[String](),
        }
    }
}

pub enum SourceType {
    Unit,
    UInt8,
    Bool,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    Class(Int32, Array[SourceType]),
    Struct(Int32, Array[SourceType]),
    Trait(Int32, Array[SourceType]),
    Tuple(Array[SourceType]),
    TypeParam(Int32),
}

pub struct BytecodeRegister(pub value: Int32)

impl Equals for BytecodeRegister {
    fn equals(other: BytecodeRegister): Bool {
        self.value == other.value
    }
}

impl Hash for BytecodeRegister {
    fn hash(): Int32 {
        self.value
    }
}

impl Stringable for BytecodeRegister {
    fn toString(): String { "r${self.value}" }
}

pub struct EnumId(pub value: Int32)
pub struct ClassId(pub value: Int32)
pub struct FieldId(pub value: Int32)
pub struct GlobalId(pub value: Int32)
pub struct ConstPoolId(pub value: Int32)
pub struct StructId(pub value: Int32)
pub struct StructFieldId(pub value: Int32)
pub struct TraitId(pub value: Int32)

impl ConstPoolId {
    fn equals(rhs: ConstPoolId): Bool {
        self.value == rhs.value
    }
}

pub struct FctId(pub value: Int32)

pub enum BytecodeType {
    Unit,
    Ptr,
    UInt8,
    Bool,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    This,
    Struct(StructId, Array[BytecodeType]),
    Enum(EnumId, Array[BytecodeType]),
    Class(ClassId, Array[BytecodeType]),
    Trait(TraitId, Array[BytecodeType]),
    Tuple(Array[BytecodeType]),
    TypeParam(Int32),
    Lambda(Array[BytecodeType], BytecodeType),
}

impl Stringable for BytecodeType {
    fn toString(): String {
        match self {
            BytecodeType::Unit => "Unit",
            BytecodeType::Ptr => "Ptr",
            BytecodeType::UInt8 => "UInt8",
            BytecodeType::Bool => "Bool",
            BytecodeType::Char => "Char",
            BytecodeType::Int32 => "Int32",
            BytecodeType::Int64 => "Int64",
            BytecodeType::Float32 => "Float32",
            BytecodeType::Float64 => "Float64",
            BytecodeType::This => "This",
            BytecodeType::Struct(id, params) => "Struct(${id.value}, <type params>)",
            BytecodeType::Enum(id, params) => "Enum(${id.value}, <type params>)",
            BytecodeType::Class(id, params) => "Class(${id.value}, <type params>)",
            BytecodeType::Trait(id, params) => "Trait(${id.value}, <type params>)",
            BytecodeType::Tuple(types) => "Tuple(<type params>)",
            BytecodeType::TypeParam(idx) => "TypeParam(${idx})",
            BytecodeType::Lambda(_, _) => "Lambda(<params>, <return ty>)",
        }
    }
}

pub struct Location {
    pub line: Int32,
    pub column: Int32,
}
