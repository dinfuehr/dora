use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::ConstPoolId;
use package::bytecode::data::GlobalId;

pub enum BytecodeInstruction {
    Add(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Sub(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Neg(BytecodeRegister, BytecodeRegister),
    Mul(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Div(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Mod(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    And(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Or(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Xor(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Not(BytecodeRegister, BytecodeRegister),
    Shl(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Shr(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    Sar(BytecodeRegister, BytecodeRegister, BytecodeRegister),

    Mov(BytecodeRegister, BytecodeRegister),

    LoadTupleElement(BytecodeRegister, BytecodeRegister, ConstPoolId),
    LoadEnumElement(BytecodeRegister, BytecodeRegister, ConstPoolId),
    LoadEnumVariant(BytecodeRegister, BytecodeRegister, ConstPoolId),
    LoadStructField(BytecodeRegister, BytecodeRegister, ConstPoolId),

    LoadField(BytecodeRegister, BytecodeRegister, ConstPoolId),
    StoreField(BytecodeRegister, BytecodeRegister, ConstPoolId),

    LoadGlobal(BytecodeRegister, GlobalId),
    StoreGlobal(BytecodeRegister, GlobalId),

    PushRegister(BytecodeRegister),
    
    ConstTrue(BytecodeRegister),
    ConstFalse(BytecodeRegister),
    ConstUInt8(BytecodeRegister, UInt8),
    ConstChar(BytecodeRegister, ConstPoolId),
    ConstInt32(BytecodeRegister, ConstPoolId),
    ConstInt64(BytecodeRegister, ConstPoolId),
    ConstFloat32(BytecodeRegister, ConstPoolId),
    ConstFloat64(BytecodeRegister, ConstPoolId),
    ConstString(BytecodeRegister, ConstPoolId),

    TestIdentity(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestEq(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestNe(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestGt(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestGe(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestLt(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    TestLe(BytecodeRegister, BytecodeRegister, BytecodeRegister),

    JumpLoop(Int32),
    LoopStart,
    Jump(Int32),
    JumpIfFalse(BytecodeRegister, Int32),
    JumpIfTrue(BytecodeRegister, Int32),

    InvokeDirect(BytecodeRegister, ConstPoolId),
    InvokeVirtual(BytecodeRegister, ConstPoolId),
    InvokeStatic(BytecodeRegister, ConstPoolId),
    InvokeGenericStatic(BytecodeRegister, ConstPoolId),
    InvokeGenericDirect(BytecodeRegister, ConstPoolId),

    NewObject(BytecodeRegister, ConstPoolId),
    NewArray(BytecodeRegister, ConstPoolId, BytecodeRegister),
    NewTuple(BytecodeRegister, ConstPoolId),
    NewEnum(BytecodeRegister, ConstPoolId),
    NewStruct(BytecodeRegister, ConstPoolId),
    NewTraitObject(BytecodeRegister, ConstPoolId, BytecodeRegister),
    NewLambda(BytecodeRegister, ConstPoolId),

    ArrayLength(BytecodeRegister, BytecodeRegister),

    LoadArray(BytecodeRegister, BytecodeRegister, BytecodeRegister),
    StoreArray(BytecodeRegister, BytecodeRegister, BytecodeRegister),

    Ret(BytecodeRegister),
}