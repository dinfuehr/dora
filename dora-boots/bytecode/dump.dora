use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::ConstPoolId;
use package::bytecode::data::GlobalId;
use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::reader::BytecodeIterator;

pub fn bytecodeDump(bc: BytecodeFunction) {
    let dumper = BytecodeDumper::new(bc);

    for inst in BytecodeIterator::new(bc.code) {
        dumper.pos = inst.start.toInt32();
        dumper.dumpInstruction(inst.op);
    }

    let mut i = 0i64;

    for entry in bc.const_pool {
        println("@${i} = ${entry.toString()}");
        i = i + 1i64;
    }

    i = 0i64;
    for ty in bc.registers {
        println("r${i} = ${ty}");
        i = i + 1i64;
    }
}

class BytecodeDumper {
    bc: BytecodeFunction,
    pos: Int32,
}

impl BytecodeDumper {
    static fn new(bc: BytecodeFunction): BytecodeDumper {
        BytecodeDumper(bc, 0i32)
    }

    fn dumpInstruction(inst: BytecodeInstruction) {
        match inst {
            BytecodeInstruction::Add(dest, lhs, rhs) => {
                self.emitReg3("Add", dest, lhs, rhs);
            },
            BytecodeInstruction::Sub(dest, lhs, rhs) => {
                self.emitReg3("Sub", dest, lhs, rhs);
            },
            BytecodeInstruction::Neg(dest, src) => {
                self.emitReg2("Neg", dest, src);
            },
            BytecodeInstruction::Mul(dest, lhs, rhs) => {
                self.emitReg3("Mul", dest, lhs, rhs);
            },
            BytecodeInstruction::Div(dest, lhs, rhs) => {
                self.emitReg3("Div", dest, lhs, rhs);
            },
            BytecodeInstruction::Mod(dest, lhs, rhs) => {
                self.emitReg3("Mod", dest, lhs, rhs);
            },
            BytecodeInstruction::And(dest, lhs, rhs) => {
                self.emitReg3("And", dest, lhs, rhs);
            },
            BytecodeInstruction::Or(dest, lhs, rhs) => {
                self.emitReg3("Or", dest, lhs, rhs);
            },
            BytecodeInstruction::Xor(dest, lhs, rhs) => {
                self.emitReg3("Xor", dest, lhs, rhs);
            },
            BytecodeInstruction::Not(dest, src) => {
                self.emitReg2("Not", dest, src);
            },
            BytecodeInstruction::Shl(dest, lhs, rhs) => {
                self.emitReg3("Shl", dest, lhs, rhs);
            },
            BytecodeInstruction::Shr(dest, lhs, rhs) => {
                self.emitReg3("Shr", dest, lhs, rhs);
            },
            BytecodeInstruction::Sar(dest, lhs, rhs) => {
                self.emitReg3("Sar", dest, lhs, rhs);
            },

            BytecodeInstruction::Mov(dest, src) => {
                self.emitReg2("Mov", dest, src);
            },

            BytecodeInstruction::LoadTupleElement(dest, src, idx)  => {
                self.emitReg2AndIdx("LoadTupleElement", dest, src, idx);
            },
            BytecodeInstruction::LoadEnumElement(dest, src, idx) => {                
                self.emitReg2AndIdx("LoadEnumElement", dest, src, idx);

            },
            BytecodeInstruction::LoadEnumVariant(dest, src, idx) => {
                self.emitReg2AndIdx("LoadEnumVariant", dest, src, idx);
            },
            BytecodeInstruction::LoadStructField(dest, src, idx) => {
                self.emitReg2AndIdx("LoadStructField", dest, src, idx);
            },

            BytecodeInstruction::LoadField(dest, src, idx) => {
                self.emitReg2AndIdx("LoadField", dest, src, idx);
            },
            BytecodeInstruction::StoreField(dest, src, idx) => {
                self.emitReg2AndIdx("StoreField", dest, src, idx);
            },

            BytecodeInstruction::LoadGlobal(dest, global_id) => {
                self.emitGlobal("LoadGlobal", dest, global_id);
            },
            BytecodeInstruction::StoreGlobal(src, global_id) => {
                self.emitGlobal("StoreGlobal", src, global_id);
            },

            BytecodeInstruction::PushRegister(src) => {
                self.emitReg1("PushRegister", src);
            },
            
            BytecodeInstruction::ConstTrue(dest) => {
                self.emitReg1("ConstTrue", dest);
            },
            BytecodeInstruction::ConstFalse(dest) => {
                self.emitReg1("ConstFalse", dest);
            },
            BytecodeInstruction::ConstUInt8(dest, value) => {
                self.emitReg1AndInt("ConstUInt8", dest, value.toInt32());
            },
            BytecodeInstruction::ConstChar(dest, idx) => {
                self.emitReg1AndIdx("ConstChar", dest, idx);
            },
            BytecodeInstruction::ConstInt32(dest, idx) => {
                self.emitReg1AndIdx("ConstInt32", dest, idx);
            },
            BytecodeInstruction::ConstInt64(dest, idx) => {
                self.emitReg1AndIdx("ConstInt64", dest, idx);
            },
            BytecodeInstruction::ConstFloat32(dest, idx) => {
                self.emitReg1AndIdx("ConstFloat32", dest, idx);

            },
            BytecodeInstruction::ConstFloat64(dest, idx) => {
                self.emitReg1AndIdx("ConstFloat64", dest, idx);

            },
            BytecodeInstruction::ConstString(dest, idx) => {
                self.emitReg1AndIdx("ConstString", dest, idx);
            },

            BytecodeInstruction::TestIdentity(dest, lhs, rhs) => {
                self.emitReg3("TestIdentity", dest, lhs, rhs);
            },
            BytecodeInstruction::TestEq(dest, lhs, rhs) => {
                self.emitReg3("TestEq", dest, lhs, rhs);
            },
            BytecodeInstruction::TestNe(dest, lhs, rhs) => {
                self.emitReg3("TestNe", dest, lhs, rhs);
            },
            BytecodeInstruction::TestGt(dest, lhs, rhs) => {
                self.emitReg3("TestGt", dest, lhs, rhs);
            },
            BytecodeInstruction::TestGe(dest, lhs, rhs) => {
                self.emitReg3("TestGe", dest, lhs, rhs);
            },
            BytecodeInstruction::TestLt(dest, lhs, rhs) => {
                self.emitReg3("TestLt", dest, lhs, rhs);
            },
            BytecodeInstruction::TestLe(dest, lhs, rhs) => {
                self.emitReg3("TestLe", dest, lhs, rhs);
            },

            BytecodeInstruction::JumpLoop(distance) => {
                self.emitInt("JumpLoop", distance);
            },
            BytecodeInstruction::LoopStart => {
                self.emitInst("LoopStart");
            },
            BytecodeInstruction::Jump(distance) => {
                self.emitInt("Jump", distance);
            },
            BytecodeInstruction::JumpIfFalse(opnd, distance) => {
                self.emitReg1AndInt("JumpIfFalse", opnd, distance);
            },
            BytecodeInstruction::JumpIfTrue(opnd, distance) => {
                self.emitReg1AndInt("JumpIfTrue", opnd, distance);
            },

            BytecodeInstruction::InvokeDirect(dest, idx) => {
                self.emitReg1AndIdx("InvokeDirect", dest, idx);
            },
            BytecodeInstruction::InvokeVirtual(dest, idx) => {
                self.emitReg1AndIdx("InvokeVirtual", dest, idx);
            },
            BytecodeInstruction::InvokeStatic(dest, idx) => {
                self.emitReg1AndIdx("InvokeStatic", dest, idx);
            },
            BytecodeInstruction::InvokeGenericStatic(dest, idx) => {
                self.emitReg1AndIdx("InvokeGenericStatic", dest, idx);
            },
            BytecodeInstruction::InvokeGenericDirect(dest, idx) => {
                self.emitReg1AndIdx("InvokeGenericDirect", dest, idx);
            },

            BytecodeInstruction::NewObject(dest, idx) => {
                self.emitReg1AndIdx("NewObject", dest, idx);
            },
            BytecodeInstruction::NewArray(dest, idx, length) => {
                self.emitRegIdxReg("NewArray", dest, idx, length);
            },
            BytecodeInstruction::NewTuple(dest, idx) => {
                self.emitReg1AndIdx("NewTuple", dest, idx);
            },
            BytecodeInstruction::NewEnum(dest, idx) => {
                self.emitReg1AndIdx("NewEnum", dest, idx);
            },
            BytecodeInstruction::NewStruct(dest, idx) => {
                self.emitReg1AndIdx("NewStruct", dest, idx);
            },
            BytecodeInstruction::NewTraitObject(dest, idx, obj) => {
                self.emitRegIdxReg("NewTraitObject", dest, idx, obj);
            },
            BytecodeInstruction::NewLambda(dest, idx) => {
                self.emitReg1AndIdx("NewLambda", dest, idx);
            },
            BytecodeInstruction::ArrayLength(dest, src) => {
                self.emitReg2("ArrayLength", dest, src);
            },
            BytecodeInstruction::LoadArray(dest, arr, index) => {
                self.emitReg3("LoadArray", dest, arr, index);
            },
            BytecodeInstruction::StoreArray(src, arr, index) => {
                self.emitReg3("StoreArray", src, arr, index);
            },
            BytecodeInstruction::Ret(opnd) => {
                self.emitReg1("Ret", opnd);
            },
        }
    }

    fn emitInst(name: String) {
        self.emitStart(name);
        println("");
    }

    fn emitReg3(name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${r3}");
    }

    fn emitReg2(name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}");
    }

    fn emitReg2AndIdx(name: String, r1: BytecodeRegister, r2: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, @${idx.value}");
    }

    fn emitReg1(name: String, r1: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}")
    }

    fn emitReg1AndIdx(name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, @${idx.value}")
    }

    fn emitRegIdxReg(name: String, r1: BytecodeRegister, idx: ConstPoolId, r2: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, @${idx.value}, ${r2}");
    }

    fn emitIdx(name: String, idx: ConstPoolId) {
        self.emitStart(name);
        println(" @${idx.value}");
    }

    fn emitReg1AndInt(name: String, r1: BytecodeRegister, value: Int32) {
        self.emitStart(name);
        println(" ${r1}, ${value}");
    }

    fn emitInt(name: String, value: Int32) {
        self.emitStart(name);
        println(" ${value}");
    }

    fn emitGlobal(name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.emitStart(name);
        println(" ${r1}, ${gid.value}");
    }

    fn emitStart(name: String) {
        print("${self.pos}: ${name}");
    }
}