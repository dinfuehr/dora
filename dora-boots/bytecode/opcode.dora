// generated by tools/bytecode-gen.rb

pub const BC_ADD: Int32 = 0;
pub const BC_SUB: Int32 = 1;
pub const BC_NEG: Int32 = 2;
pub const BC_MUL: Int32 = 3;
pub const BC_DIV: Int32 = 4;
pub const BC_MOD: Int32 = 5;
pub const BC_AND: Int32 = 6;
pub const BC_OR: Int32 = 7;
pub const BC_XOR: Int32 = 8;
pub const BC_NOT: Int32 = 9;
pub const BC_SHL: Int32 = 10;
pub const BC_SHR: Int32 = 11;
pub const BC_SAR: Int32 = 12;
pub const BC_MOV: Int32 = 13;
pub const BC_LOAD_TUPLE_ELEMENT: Int32 = 14;
pub const BC_LOAD_ENUM_ELEMENT: Int32 = 15;
pub const BC_LOAD_ENUM_VARIANT: Int32 = 16;
pub const BC_LOAD_STRUCT_FIELD: Int32 = 17;
pub const BC_LOAD_FIELD: Int32 = 18;
pub const BC_STORE_FIELD: Int32 = 19;
pub const BC_LOAD_GLOBAL: Int32 = 20;
pub const BC_STORE_GLOBAL: Int32 = 21;
pub const BC_PUSH_REGISTER: Int32 = 22;
pub const BC_CONST_TRUE: Int32 = 23;
pub const BC_CONST_FALSE: Int32 = 24;
pub const BC_CONST_UINT8: Int32 = 25;
pub const BC_CONST_CHAR: Int32 = 26;
pub const BC_CONST_INT32: Int32 = 27;
pub const BC_CONST_INT64: Int32 = 28;
pub const BC_CONST_FLOAT32: Int32 = 29;
pub const BC_CONST_FLOAT64: Int32 = 30;
pub const BC_CONST_STRING: Int32 = 31;
pub const BC_TEST_IDENTITY: Int32 = 32;
pub const BC_TEST_EQ: Int32 = 33;
pub const BC_TEST_NE: Int32 = 34;
pub const BC_TEST_GT: Int32 = 35;
pub const BC_TEST_GE: Int32 = 36;
pub const BC_TEST_LT: Int32 = 37;
pub const BC_TEST_LE: Int32 = 38;
pub const BC_JUMP_LOOP: Int32 = 39;
pub const BC_LOOP_START: Int32 = 40;
pub const BC_JUMP: Int32 = 41;
pub const BC_JUMP_IF_FALSE: Int32 = 42;
pub const BC_JUMP_IF_TRUE: Int32 = 43;
pub const BC_INVOKE_DIRECT: Int32 = 44;
pub const BC_INVOKE_VIRTUAL: Int32 = 45;
pub const BC_INVOKE_STATIC: Int32 = 46;
pub const BC_INVOKE_LAMBDA: Int32 = 47;
pub const BC_INVOKE_GENERIC_STATIC: Int32 = 48;
pub const BC_INVOKE_GENERIC_DIRECT: Int32 = 49;
pub const BC_NEW_OBJECT: Int32 = 50;
pub const BC_NEW_OBJECT_INITIALIZED: Int32 = 51;
pub const BC_NEW_ARRAY: Int32 = 52;
pub const BC_NEW_TUPLE: Int32 = 53;
pub const BC_NEW_ENUM: Int32 = 54;
pub const BC_NEW_STRUCT: Int32 = 55;
pub const BC_NEW_TRAIT_OBJECT: Int32 = 56;
pub const BC_NEW_LAMBDA: Int32 = 57;
pub const BC_ARRAY_LENGTH: Int32 = 58;
pub const BC_LOAD_ARRAY: Int32 = 59;
pub const BC_STORE_ARRAY: Int32 = 60;
pub const BC_LOAD_TRAIT_OBJECT_VALUE: Int32 = 61;
pub const BC_RET: Int32 = 62;

pub const BC_TYPE_UNIT: Int32 = 0;
pub const BC_TYPE_BOOL: Int32 = 1;
pub const BC_TYPE_U_INT8: Int32 = 2;
pub const BC_TYPE_CHAR: Int32 = 3;
pub const BC_TYPE_INT32: Int32 = 4;
pub const BC_TYPE_INT64: Int32 = 5;
pub const BC_TYPE_FLOAT32: Int32 = 6;
pub const BC_TYPE_FLOAT64: Int32 = 7;
pub const BC_TYPE_PTR: Int32 = 8;
pub const BC_TYPE_TUPLE: Int32 = 9;
pub const BC_TYPE_ENUM: Int32 = 10;
pub const BC_TYPE_STRUCT: Int32 = 11;
pub const BC_TYPE_TYPE_PARAM: Int32 = 12;
pub const BC_TYPE_CLASS: Int32 = 13;
pub const BC_TYPE_TRAIT: Int32 = 14;
pub const BC_TYPE_LAMBDA: Int32 = 15;

pub const CONSTPOOL_OPCODE_STRING: Int32 = 0;
pub const CONSTPOOL_OPCODE_FLOAT32: Int32 = 1;
pub const CONSTPOOL_OPCODE_FLOAT64: Int32 = 2;
pub const CONSTPOOL_OPCODE_INT32: Int32 = 3;
pub const CONSTPOOL_OPCODE_INT64: Int32 = 4;
pub const CONSTPOOL_OPCODE_CHAR: Int32 = 5;
pub const CONSTPOOL_OPCODE_FCT: Int32 = 6;
pub const CONSTPOOL_OPCODE_CLASS: Int32 = 7;
pub const CONSTPOOL_OPCODE_ENUM: Int32 = 8;
pub const CONSTPOOL_OPCODE_ENUM_VARIANT: Int32 = 9;
pub const CONSTPOOL_OPCODE_ENUM_ELEMENT: Int32 = 10;
pub const CONSTPOOL_OPCODE_STRUCT: Int32 = 11;
pub const CONSTPOOL_OPCODE_STRUCT_FIELD: Int32 = 12;
pub const CONSTPOOL_OPCODE_TRAIT: Int32 = 13;
pub const CONSTPOOL_OPCODE_FIELD: Int32 = 14;
pub const CONSTPOOL_OPCODE_FIELD_FIXED: Int32 = 15;
pub const CONSTPOOL_OPCODE_GENERIC: Int32 = 16;
pub const CONSTPOOL_OPCODE_TUPLE_ELEMENT: Int32 = 17;
pub const CONSTPOOL_OPCODE_TUPLE: Int32 = 18;
pub const CONSTPOOL_OPCODE_LAMBDA: Int32 = 19;

pub fn bytecodeName(opcode: Int32): String {
  if opcode == BC_ADD { return "Add"; }
  if opcode == BC_SUB { return "Sub"; }
  if opcode == BC_NEG { return "Neg"; }
  if opcode == BC_MUL { return "Mul"; }
  if opcode == BC_DIV { return "Div"; }
  if opcode == BC_MOD { return "Mod"; }
  if opcode == BC_AND { return "And"; }
  if opcode == BC_OR { return "Or"; }
  if opcode == BC_XOR { return "Xor"; }
  if opcode == BC_NOT { return "Not"; }
  if opcode == BC_SHL { return "Shl"; }
  if opcode == BC_SHR { return "Shr"; }
  if opcode == BC_SAR { return "Sar"; }
  if opcode == BC_MOV { return "Mov"; }
  if opcode == BC_LOAD_TUPLE_ELEMENT { return "LoadTupleElement"; }
  if opcode == BC_LOAD_ENUM_ELEMENT { return "LoadEnumElement"; }
  if opcode == BC_LOAD_ENUM_VARIANT { return "LoadEnumVariant"; }
  if opcode == BC_LOAD_STRUCT_FIELD { return "LoadStructField"; }
  if opcode == BC_LOAD_FIELD { return "LoadField"; }
  if opcode == BC_STORE_FIELD { return "StoreField"; }
  if opcode == BC_LOAD_GLOBAL { return "LoadGlobal"; }
  if opcode == BC_STORE_GLOBAL { return "StoreGlobal"; }
  if opcode == BC_PUSH_REGISTER { return "PushRegister"; }
  if opcode == BC_CONST_TRUE { return "ConstTrue"; }
  if opcode == BC_CONST_FALSE { return "ConstFalse"; }
  if opcode == BC_CONST_UINT8 { return "ConstUInt8"; }
  if opcode == BC_CONST_CHAR { return "ConstChar"; }
  if opcode == BC_CONST_INT32 { return "ConstInt32"; }
  if opcode == BC_CONST_INT64 { return "ConstInt64"; }
  if opcode == BC_CONST_FLOAT32 { return "ConstFloat32"; }
  if opcode == BC_CONST_FLOAT64 { return "ConstFloat64"; }
  if opcode == BC_CONST_STRING { return "ConstString"; }
  if opcode == BC_TEST_IDENTITY { return "TestIdentity"; }
  if opcode == BC_TEST_EQ { return "TestEq"; }
  if opcode == BC_TEST_NE { return "TestNe"; }
  if opcode == BC_TEST_GT { return "TestGt"; }
  if opcode == BC_TEST_GE { return "TestGe"; }
  if opcode == BC_TEST_LT { return "TestLt"; }
  if opcode == BC_TEST_LE { return "TestLe"; }
  if opcode == BC_JUMP_LOOP { return "JumpLoop"; }
  if opcode == BC_LOOP_START { return "LoopStart"; }
  if opcode == BC_JUMP { return "Jump"; }
  if opcode == BC_JUMP_IF_FALSE { return "JumpIfFalse"; }
  if opcode == BC_JUMP_IF_TRUE { return "JumpIfTrue"; }
  if opcode == BC_INVOKE_DIRECT { return "InvokeDirect"; }
  if opcode == BC_INVOKE_VIRTUAL { return "InvokeVirtual"; }
  if opcode == BC_INVOKE_STATIC { return "InvokeStatic"; }
  if opcode == BC_INVOKE_LAMBDA { return "InvokeLambda"; }
  if opcode == BC_INVOKE_GENERIC_STATIC { return "InvokeGenericStatic"; }
  if opcode == BC_INVOKE_GENERIC_DIRECT { return "InvokeGenericDirect"; }
  if opcode == BC_NEW_OBJECT { return "NewObject"; }
  if opcode == BC_NEW_OBJECT_INITIALIZED { return "NewObjectInitialized"; }
  if opcode == BC_NEW_ARRAY { return "NewArray"; }
  if opcode == BC_NEW_TUPLE { return "NewTuple"; }
  if opcode == BC_NEW_ENUM { return "NewEnum"; }
  if opcode == BC_NEW_STRUCT { return "NewStruct"; }
  if opcode == BC_NEW_TRAIT_OBJECT { return "NewTraitObject"; }
  if opcode == BC_NEW_LAMBDA { return "NewLambda"; }
  if opcode == BC_ARRAY_LENGTH { return "ArrayLength"; }
  if opcode == BC_LOAD_ARRAY { return "LoadArray"; }
  if opcode == BC_STORE_ARRAY { return "StoreArray"; }
  if opcode == BC_LOAD_TRAIT_OBJECT_VALUE { return "LoadTraitObjectValue"; }
  if opcode == BC_RET { return "Ret"; }
  unreachable[String]()
}

pub fn bytecodeTypeName(code: Int32): String {
  if code == BC_TYPE_UNIT { return "Unit"; }
  if code == BC_TYPE_BOOL { return "Bool"; }
  if code == BC_TYPE_U_INT8 { return "UInt8"; }
  if code == BC_TYPE_CHAR { return "Char"; }
  if code == BC_TYPE_INT32 { return "Int32"; }
  if code == BC_TYPE_INT64 { return "Int64"; }
  if code == BC_TYPE_FLOAT32 { return "Float32"; }
  if code == BC_TYPE_FLOAT64 { return "Float64"; }
  if code == BC_TYPE_PTR { return "Ptr"; }
  if code == BC_TYPE_TUPLE { return "Tuple"; }
  if code == BC_TYPE_ENUM { return "Enum"; }
  if code == BC_TYPE_STRUCT { return "Struct"; }
  if code == BC_TYPE_TYPE_PARAM { return "TypeParam"; }
  if code == BC_TYPE_CLASS { return "Class"; }
  if code == BC_TYPE_TRAIT { return "Trait"; }
  if code == BC_TYPE_LAMBDA { return "Lambda"; }
  unreachable[String]()
}

pub const INSTRUCTION_SET_X64: Int32 = 0;
pub const INSTRUCTION_SET_ARM64: Int32 = 1;

