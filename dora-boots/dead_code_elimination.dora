use package::compilation::CompilationInfo;
use package::dominator::computePostOrder;
use package::graph::Graph;
use package::graph::builder::GraphBuilder;
use package::graph::dump::assertGraph;
use package::graph::verifier::verifyGraph;
use package::graph::ty::Type;
use package::dominator::buildDominatorTree;

pub fn performDeadCodeElimination(ci: CompilationInfo, graph: Graph) {
    computePostOrder(graph);

    for block in graph.postOrderIterator() {
        for inst in block.reverseInstructionsIterator() {
            if !inst.hasUses() && !inst.isRequiredWhenUnused() {
                inst.remove();
            }
        }
    }
}
