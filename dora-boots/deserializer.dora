use package::interface::CompilationInfo;
use package::bytecode::data::ConstPoolEntry;
use package::bytecode::data::BytecodeType;
use package::bytecode::data::BytecodeFunction;
use package::bytecode::opcode as opc;
use package::interface::Architecture;

@pub fn decodeCompilationInfo(reader: ByteReader): CompilationInfo {
    let bc = decodeBytecodeFunction(reader);
    let typeParams = decodeTypeParams(reader);
    let arch = decodeArchitecture(reader);
    CompilationInfo(bc, typeParams, arch)
}

@pub fn decodeBytecodeFunction(reader: ByteReader): BytecodeFunction {
    let code = decodeBytecodeArray(reader);
    let constpool = decodeConstPool(reader);
    let registers = decodeRegisters(reader);
    let arguments = reader.readInt32();
    BytecodeFunction(code, constpool, registers, arguments)
}

fn decodeBytecodeArray(reader: ByteReader): Array[UInt8] {
    reader.readByteArray()
}

fn decodeTypeParams(reader: ByteReader): Array[BytecodeType] {
    decodeBytecodeTypeArray(reader)
}

fn decodeRegisters(reader: ByteReader): Array[BytecodeType] {
    let size = reader.readInt32().toInt64();
    let data = Array[BytecodeType]::fill(size, BytecodeType::UInt8);

    let mut i = 0i64;

    while i < size {
        data(i) = decodeBytecodeType(reader);
        i = i + 1i64;
    }

    data
}

fn decodeBytecodeType(reader: ByteReader): BytecodeType {
    let opcode = reader.readUInt8().toInt32();

    if opcode == opc::BC_TYPE_UNIT {
        BytecodeType::Unit
    } else if opcode == opc::BC_TYPE_BOOL {
        BytecodeType::Bool
    } else if opcode == opc::BC_TYPE_U_INT8 {
        BytecodeType::UInt8
    } else if opcode == opc::BC_TYPE_CHAR {
        BytecodeType::Char
    } else if opcode == opc::BC_TYPE_INT32 {
        BytecodeType::Int32
    } else if opcode == opc::BC_TYPE_INT64 {
        BytecodeType::Int64
    } else if opcode == opc::BC_TYPE_FLOAT32 {
        BytecodeType::Float32
    } else if opcode == opc::BC_TYPE_FLOAT64 {
        BytecodeType::Float64
    } else if opcode == opc::BC_TYPE_PTR {
        BytecodeType::Ptr
    } else if opcode == opc::BC_TYPE_STRUCT {
        let structId = reader.readId();
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Struct(structId, typeParams)
    } else if opcode == opc::BC_TYPE_TUPLE {
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Tuple(typeParams)
    } else if opcode == opc::BC_TYPE_TYPE_PARAM {
        let idx = reader.readId();
        BytecodeType::TypeParam(idx)
    } else {
        println("unknown bytecode type opcode = ${opcode}");
        unreachable[BytecodeType]()
    }
}

fn decodeConstPool(reader: ByteReader): Array[ConstPoolEntry] {
    let size = reader.readInt32().toInt64();

    let data = Array[ConstPoolEntry]::fill(size, ConstPoolEntry::Int32(0i32));
    let mut i = 0i64;

    while i < size {
        data(i) = decodeConstPoolEntry(reader);
        i = i + 1i64;
    }

    data
}

fn decodeConstPoolEntry(reader: ByteReader): ConstPoolEntry {
    let opcode = reader.readUInt8().toInt32();

    if opcode == opc::CONSTPOOL_OPCODE_INT32 {
        let value = reader.readInt32();
        ConstPoolEntry::Int32(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_INT64 {
        let value = reader.readInt64();
        ConstPoolEntry::Int64(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_FLOAT32 {
        let value = reader.readInt32().asFloat32();
        ConstPoolEntry::Float32(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_FLOAT64 {
        let value = reader.readInt64().asFloat64();
        ConstPoolEntry::Float64(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_CHAR {
        let value = reader.readInt32().toCharUnchecked();
        ConstPoolEntry::Char(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_STRING {
        let length = reader.readInt32().toInt64();
        let value = reader.readStringContent(length);

        ConstPoolEntry::String(value)
    } else {
        println("unknown ConstPoolEntry opcode = ${opcode}");
        unreachable[ConstPoolEntry]()
    }
}

fn decodeArchitecture(reader: ByteReader): Architecture {
    let value = reader.readUInt8().toInt32();
    if value == opc::INSTRUCTION_SET_X64 {
        Architecture::X64
    } else if value == opc::INSTRUCTION_SET_ARM64 {
        Architecture::Arm64
    } else {
            println("unknown architecture = ${value}");
            unreachable[Architecture]()
    }
}

fn decodeBytecodeTypeArray(reader: ByteReader): Array[BytecodeType] {
    let size = reader.readInt32().toInt64();
    let data = Array[BytecodeType]::fill(size, BytecodeType::Unit);

    let mut i = 0i64;

    while i < size {
        data(i) = decodeBytecodeType(reader);
        i = i + 1i64;
    }

    data
}

@pub class ByteReader {
    array: Array[UInt8],
    idx: Int64,
}

impl ByteReader {
    @static @pub fn new(array: Array[UInt8]): ByteReader {
        ByteReader(array, 0)
    }

    @pub fn moreBytes(): Bool {
        self.idx < self.array.size()
    }

    @pub fn readUInt8(): UInt8 {
        let value = self.array(self.idx);
        self.idx = self.idx + 1i64;
        value
    }

    @pub fn readInt32(): Int32 {
        let by1 = self.readUInt8().toInt32();
        let by2 = self.readUInt8().toInt32();
        let by3 = self.readUInt8().toInt32();
        let by4 = self.readUInt8().toInt32();

        (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }

    @pub fn readId(): Int32 {
        self.readInt32()
    }

    @pub fn readInt64(): Int64 {
        let by1 = self.readUInt8().toInt64();
        let by2 = self.readUInt8().toInt64();
        let by3 = self.readUInt8().toInt64();
        let by4 = self.readUInt8().toInt64();
        let by5 = self.readUInt8().toInt64();
        let by6 = self.readUInt8().toInt64();
        let by7 = self.readUInt8().toInt64();
        let by8 = self.readUInt8().toInt64();

        (by8 << 56i32) | (by7 << 48i32) | (by6 << 40i32) | (by5 << 32i32) | (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }

    @pub fn readByteArray(): Array[UInt8] {
        let len = self.readInt32().toInt64();
        let data = Array[UInt8]::zero(len);

        let mut idx = 0i64;

        while idx < len {
            data(idx) = self.readUInt8();
            idx = idx + 1i64;
        }

        data
    }

    @pub fn readStringContent(length: Int64): String {
        let value = String::fromBytesPart(self.array, self.idx, length).getOrPanic();
        self.idx = self.idx + length;
        value
    }

    @pub fn position(): Int64 {
        self.idx
    }

    fn skipBytes(value: Int64) {
        self.idx = self.idx + value;
    }
}
