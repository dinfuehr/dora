use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeType;
use package::deserializer::decodeBytecodeFunction;
use package::deserializer::decodeCompilationInfo;
use package::deserializer::ByteReader;
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;
use package::compileFunction;
use package::serializer::{ByteWriter, encodeCodeDescriptor};

pub fn compile(encoded: Array[UInt8]): Array[UInt8] {
    let reader = ByteReader::new(encoded);
    let ci = decodeCompilationInfo(reader);
    assert(!reader.moreBytes());
    let code = compileFunction(ci);
    let writer = ByteWriter::new();
    encodeCodeDescriptor(writer, code);
    writer.toArray()
}

pub class CompilationInfo(
    pub bc: BytecodeFunction,
    pub typeParams: Array[BytecodeType],
    pub arch: Architecture,
    pub emitGraph: Bool,
    pub emitCodeComments: Bool,
)

pub enum Architecture {
    X64,
    Arm64,
}
