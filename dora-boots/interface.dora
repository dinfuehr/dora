use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeType;
use package::deserializer::decodeBytecodeFunction;
use package::deserializer::decodeCompilationInfo;
use package::deserializer::ByteReader;
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;

pub fn compile(encoded: Array[UInt8]): Array[UInt8] {
    let reader = ByteReader::new(encoded);
    let ci = decodeCompilationInfo(reader);
    assert(!reader.moreBytes());
    // bytecodeDump(info.bc);

    match ci.arch {
        Architecture::X64 => CodeGenX64::new(ci).generate(),
        Architecture::Arm64 => CodeGenArm64::new(ci).generate(),
    }
}

pub class CompilationInfo(
    pub bc: BytecodeFunction,
    pub typeParams: Array[BytecodeType],
    pub arch: Architecture
)

pub enum Architecture {
    X64,
    Arm64,
}
