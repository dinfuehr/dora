use std::BitSet;

use package::graph::{Block, Edge, Graph, LoopData};

pub fn buildDominatorTree(graph: Graph) {
    let visited = findBackEdges(graph);
    removeUnreachableBlocks(graph, visited);
    computePostOrder(graph);
    computeDominators(graph);
    discoverLoopBlocks(graph);
}

fn findBackEdges(graph: Graph): BitSet {
    // Worklist contains current path in the graph.
    let worklist = Vec[Block]::new();

    // Number of successors visited per block.
    let successorsVisited = Array[Int64]::zero(graph.blockCount().toInt64());

    // All blocks that have been fully visited (including successors).
    let visited = BitSet::new(graph.blockCount().toInt64());

    // All blocks in worklist.
    let visiting = BitSet::new(graph.blockCount().toInt64());

    worklist.push(graph.getEntryBlock());
    visiting.insert(graph.getEntryBlock().id().toInt64());

    while !worklist.isEmpty() {
        let block = worklist.last().getOrPanic();
        let successorIndex = successorsVisited(block.id().toInt64());

        if successorIndex == block.successors.size() {
            worklist.pop();
            visiting.remove(block.id().toInt64());
            visited.insert(block.id().toInt64());
        } else {
            successorsVisited(block.id().toInt64()) = successorIndex + 1i64;
            let successorEdge = block.successors(successorIndex);
            let successor = successorEdge.target;

            if visiting.contains(successor.id().toInt64()) {
                foundBackEdge(successorEdge);
            } else if visited.contains(successor.id().toInt64()) {
                // Already visited.
            } else {
                worklist.push(successor);
                visiting.insert(successor.id().toInt64());
            }
        }
    }

    visited
}

fn foundBackEdge(edge: Edge) {
    edge.markAsBackwardEdge();

    let header = edge.target;

    if header.getLoopData().isNone() {
        header.setLoopData(LoopData::new(header));
    }

    header.getLoopData().getOrPanic().addBackEdge(edge);
}

fn removeUnreachableBlocks(graph: Graph, visited: BitSet) {
    // Remove instructions as user from other instructions.
    for block in graph.insertionOrderIterator() {
        if visited.contains(block.id().toInt64()) {
            continue;
        }

        for phi in block.phisIterator() {
            phi.removeAsUser();
        }

        for inst in block.instructionsIterator() {
            inst.removeAsUser();
        }
    }

    // Now remove unreachable blocks from graph.
    for block in graph.insertionOrderIterator() {
        if visited.contains(block.id().toInt64()) {
            continue;
        }

        for edge in block.successors {
            let successor = edge.target;
            successor.predecessors.removeIf(|e: Edge|: Bool { e === edge });
        }

        graph.blocks(block.id().toInt64()) = None[Block];
        block.graph = None;
    }
}

fn computePostOrder(graph: Graph) {
    let postOrder = Vec[Block]::new();
    postOrder.reserve(graph.blockCount().toInt64());

    // Worklist contains current path in the graph.
    let worklist = Vec[Block]::new();

    // Number of successors visited per block.
    let successorsVisited = Array[Int64]::newDefault(graph.blockCount().toInt64());

    // All blocks that have been visited.
    let visited = BitSet::new(graph.blockCount().toInt64());

    worklist.push(graph.getEntryBlock());
    visited.insert(graph.getEntryBlock().id().toInt64());

    while !worklist.isEmpty() {
        let block = worklist.last().getOrPanic();
        let successorIndex = successorsVisited(block.id().toInt64());

        if successorIndex == block.successors.size() {
            assert(visited.contains(block.id().toInt64()));
            worklist.pop();
            postOrder.push(block);
        } else {
            successorsVisited(block.id().toInt64()) = successorIndex + 1i64;
            let successor = block.successors(successorIndex).target;

            if visited.contains(successor.id().toInt64()) {
                // Block either already visited or back edge.
            } else {
                worklist.push(successor);
                visited.insert(successor.id().toInt64());
            }
        }
    }

    graph.setPostOrder(postOrder);
}

fn computeDominators(graph: Graph) {
    // Algorithm from paper "A Simple, Fast Dominance Algorithm".
    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            continue;
        }

        let mut newIdom: Option[Block] = None;

        for pred in block.predecessors {
            let pred = pred.source;

            if newIdom.isNone() {
                newIdom = Some(pred);
                continue;
            }

            if pred.getDominator().isNone() {
                continue;
            }

            newIdom = Some(commonDominator(newIdom.getOrPanic(), pred));
        }

        block.setDominator(newIdom.getOrPanic());
    }

    // Assert that we have a reducible graph.
    for block in graph.insertionOrderIterator() {
        if block.isLoopHeader() {
            let loopHeaderBlock = block;
            let loopHeader = loopHeaderBlock.getLoopData().getOrPanic();

            for backEdge in loopHeader.getBackEdges() {
                assert(loopHeaderBlock == backEdge.target);
                assert(loopHeaderBlock.dominates(backEdge.source));
            }
        }
    }

    // Assert that dominators are stable.
    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            assert(block.getDominator().isNone());
            continue;
        }

        let mut newIdom: Option[Block] = None;

        for pred in block.predecessors {
            let pred = pred.source;

            if newIdom.isNone() {
                newIdom = Some(pred);
                continue;
            }

            if pred.getDominator().isNone() {
                continue;
            }

            newIdom = Some(commonDominator(newIdom.getOrPanic(), pred));
        }

        assert(block.getDominator().getOrPanic() === newIdom.getOrPanic());
    }

    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            continue;
        }

        let dom = block.getDominator().getOrPanic();
        dom.addDominatedBlock(block);
    }
}

fn commonDominator(b1: Block, b2: Block): Block {
    let mut finger1 = b1;
    let mut finger2 = b2;

    while finger1 != finger2 {
        while finger1.postOrderIdx < finger2.postOrderIdx {
            finger1 = finger1.getDominator().getOrPanic();
        }

        while finger2.postOrderIdx < finger1.postOrderIdx {
            finger2 = finger2.getDominator().getOrPanic();
        }
    }

    assert(finger1 === finger2);

    finger1
}

fn discoverLoopBlocks(graph: Graph) {
    for block in graph.postOrderIterator() {
        if !block.isLoopHeader() {
            continue;
        }

        let loop = block.getLoopData().getOrPanic();
        loop.addBlock(block);

        for backEdge in loop.getBackEdges() {
            assert(backEdge.target == block);
            discoverBlocks(loop, backEdge.source);
        }
    }
}

fn discoverBlocks(loop: LoopData, start: Block) {
    let worklist = Vec[Block]::new();
    worklist.push(start);

    while !worklist.isEmpty() {
        let block = worklist.pop().getOrPanic();

        if loop.containsBlock(block) {
            return;
        }

        loop.addBlock(block);

        if block.isLoopHeader() {
            let nested = block.getLoopData().getOrPanic();
            if nested.getParent().isNone() {
                nested.setLoopParent(loop);
            }
        }

        let currentLoop = block.getLoopData();

        if currentLoop.isNone() {
            block.setLoopData(loop);
        }

        for predecessorEdge in block.predecessors {
            worklist.push(predecessorEdge.source);
        }
    }
}
