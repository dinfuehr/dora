use std::BitSet;

use package::graph::Graph;
use package::graph::Block;
use package::graph::LoopData;

pub fn buildDominatorTree(graph: Graph) {
    let visited = findBackEdges(graph);
    removeUnreachableBlocks(graph, visited);
    computePostOrder(graph);
    computeDominators(graph);
    discoverLoopBlocks(graph);
}

fn findBackEdges(graph: Graph): BitSet {
    // worklist contains current path in the graph
    let worklist = Vec[Block]::new();

    // number of successors visited per block
    let successorsVisited = Array[Int64]::zero(graph.blockCount().toInt64());

    // all blocks that have been fully visited (including successors)
    let visited = BitSet::new(graph.blockCount().toInt64());

    // all blocks in worklist
    let visiting = BitSet::new(graph.blockCount().toInt64());

    worklist.push(graph.getEntryBlock());
    visiting.insert(graph.getEntryBlock().id().toInt64());

    while !worklist.isEmpty() {
        let block = worklist.last().getOrPanic();
        let successorIndex = successorsVisited(block.id().toInt64());

        if successorIndex == block.successors.size() {
            worklist.pop();
            visiting.remove(block.id().toInt64());
            visited.insert(block.id().toInt64());
        } else {
            successorsVisited(block.id().toInt64()) = successorIndex + 1i64;
            let successorEdge = block.successors(successorIndex);
            let successor = successorEdge.target;

            if visiting.contains(successor.id().toInt64()) {
                successorEdge.markAsBackwardEdge();
                successor.addBackEdge(block);
            } else if visited.contains(successor.id().toInt64()) {
                // already visited
            } else {
                worklist.push(successor);
                visiting.insert(successor.id().toInt64());
            }
        }
    }

    visited
}

fn removeUnreachableBlocks(graph: Graph, visited: BitSet) {
    // Remove instructions as user from other instructions
    for block in graph.insertionOrderIterator() {
        if visited.contains(block.id().toInt64()) {
            continue;
        }

        for phi in block.phisIterator() {
            phi.removeAsUser();
        }

        for inst in block.instructionsIterator() {
            inst.removeAsUser();
        }
    }

    // Now remove unreachable blocks from graph
    for block in graph.insertionOrderIterator() {
        if visited.contains(block.id().toInt64()) {
            continue;
        }

        for edge in block.successors {
            let successor = edge.target;
            successor.predecessors.removeItem(edge);
        }

        graph.blocks(block.id().toInt64()) = None[Block];
        block.graph = None;
    }
}

fn computePostOrder(graph: Graph) {
    let postOrder = Vec[Block]::new();
    postOrder.reserve(graph.blockCount().toInt64());

    // worklist contains current path in the graph
    let worklist = Vec[Block]::new();

    // number of successors visited per block
    let successorsVisited = Array[Int64]::newDefault(graph.blockCount().toInt64());

    // all blocks that have been visited
    let visited = BitSet::new(graph.blockCount().toInt64());

    worklist.push(graph.getEntryBlock());

    while !worklist.isEmpty() {
        let block = worklist.last().getOrPanic();
        let successorIndex = successorsVisited(block.id().toInt64());

        if successorIndex == block.successors.size() {
            worklist.pop();
            postOrder.push(block);
        } else {
            successorsVisited(block.id().toInt64()) = successorIndex + 1i64;
            let successor = block.successors(successorIndex).target;

            if visited.contains(successor.id().toInt64()) {
                // block either already visited or back edge
            } else {
                worklist.push(successor);
                visited.insert(successor.id().toInt64());
            }
        }
    }

    graph.setPostOrder(postOrder);
}

fn computeDominators(graph: Graph) {
    // Algorithm from paper "A Simple, Fast Dominance Algorithm"
    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            continue;
        }

        let mut newIdom: Option[Block] = None;

        for pred in block.predecessors {
            let pred = pred.source;

            if newIdom.isNone() {
                newIdom = Some(pred);
                continue;
            }

            if pred.getDominator().isNone() {
                continue;
            }

            newIdom = Some(commonDominator(newIdom.getOrPanic(), pred));
        }

        block.setDominator(newIdom.getOrPanic());
    }

    // assert that we have a reducible graph
    for block in graph.insertionOrderIterator() {
        if block.isLoopHeader() {
            let loopHeaderBlock = block;
            let loopHeader = loopHeaderBlock.getLoopData().getOrPanic();

            for block in loopHeader.backEdges {
                assert(loopHeaderBlock.dominates(block));
            }
        }
    }

    // assert that dominators are stable
    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            continue;
        }

        let mut newIdom: Option[Block] = None;

        for pred in block.predecessors {
            let pred = pred.source;

            if newIdom.isNone() {
                newIdom = Some(pred);
                continue;
            }

            if pred.getDominator().isNone() {
                continue;
            }

            newIdom = Some(commonDominator(newIdom.getOrPanic(), pred));
        }

        assert(block.getDominator().getOrPanic() === newIdom.getOrPanic());
    }

    for block in graph.reversePostOrderIterator() {
        if block.isEntryBlock() {
            continue;
        }

        let dom = block.getDominator().getOrPanic();
        dom.addDominatedBlock(block);
    }
}

fn commonDominator(b1: Block, b2: Block): Block {
    let mut finger1 = b1;
    let mut finger2 = b2;

    while finger1 != finger2 {
        while finger1.postOrderIdx < finger2.postOrderIdx {
            finger1 = finger1.getDominator().getOrPanic();
        }

        while finger2.postOrderIdx < finger1.postOrderIdx {
            finger2 = finger2.getDominator().getOrPanic();
        }
    }

    assert(finger1 === finger2);

    finger1
}

fn discoverLoopBlocks(graph: Graph) {
    for block in graph.postOrderIterator() {
        if block.isLoopHeader() {
            let loop = block.getLoopData().getOrPanic();
            loop.addBlock(block);

            for block in loop.backEdges {
                discoverBlocks(block, loop);
            }
        }
    }
}

fn discoverBlocks(block: Block, loop: LoopData) {
    if loop.containsBlock(block) {
        return;
    }

    loop.addBlock(block);
    updateLoopData(block, loop);

    for predecessorEdge in block.predecessors {
        discoverBlocks(predecessorEdge.source, loop);
    }
}

fn updateLoopData(block: Block, loop: LoopData) {
    let currentLoop = block.getLoopData();

    if currentLoop.isNone() {
        block.setLoopData(loop);
    } else {
        let currentLoop = currentLoop.getOrPanic();
        assert(loop.containsLoop(currentLoop));
    }
}
