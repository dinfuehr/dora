use package::bytecode::data::BytecodeRegister;
use package::bytecode::data::BytecodeFunction;
use package::bytecode::data::BytecodeType;
use package::bytecode::data::ConstPoolEntry;
use package::bytecode::dump::bytecodeDump;
use package::bytecode::builder::BytecodeBuilder;
use package::graph_builder::createGraph;
use package::graph::dump::assertGraph;

@Test
fn testSsaGenRet() {
    let b = BytecodeBuilder::new();
    let r0 = b.addRegister(BytecodeType::Unit);
    b.emitRet(r0);
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Ret.Void
");
}

@Test
fn testSsaGenRetIntConst() {
    let b = BytecodeBuilder::new();
    let r0 = b.addRegister(BytecodeType::Int32);
    let idx = b.addConst(ConstPoolEntry::Int32(4711i32));
    b.emitConstInt32(r0, idx);
    b.emitRet(r0);
    let fct = b.generate();

    let graph = createGraph(fct);
    assertGraph(graph, "
@0:
  %0: Const.Int32(#4711) [%1]
  %1: Ret.Int32 %0
");
}

@Test
fn testSsaGenRetInt64Const() {
    let b = BytecodeBuilder::new();
    let r0 = b.addRegister(BytecodeType::Int64);
    let idx = b.addConst(ConstPoolEntry::Int64(4711));
    b.emitConstInt64(r0, idx);
    b.emitRet(r0);
    let fct = b.generate();

    let graph = createGraph(fct);
    assertGraph(graph, "
@0:
  %0: Const.Int64(#4711) [%1]
  %1: Ret.Int64 %0
");
}

@Test
fn testSsaGenIdInt() {
    let b = BytecodeBuilder::new();
    let r0 = b.addRegister(BytecodeType::Int32);
    b.setArguments(1i32);
    b.emitRet(r0);
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%1]
  %1: Ret.Int32 %0
");
}

@Test
fn testSsaGenAddIntArguments() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 3);
    b.setArguments(2i32);
    b.emitAdd(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Add.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
");
}

@Test
fn testSsaGenAddFloat32Arguments() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Float32, 3);
    b.setArguments(2i32);
    b.emitAdd(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Float32(0) [%2]
  %1: Arg.Float32(1) [%2]
  %2: Add.Float32 %0, %1 [%3]
  %3: Ret.Float32 %2
");
}

fn bcSsaGenAddFloat32Arguments(a: Float32, b: Float32): Float32 { a + b }

@Test
fn testSsaGenMultipleAssignments() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 5);
    b.setArguments(1i32);
    let idx = b.addConst(ConstPoolEntry::Int32(42i32));
    b.emitConstInt32(r(1), idx);
    b.emitMov(r(2), r(1));
    b.emitAdd(r(3), r(1), r(2));
    let idx = b.addConst(ConstPoolEntry::Int32(23i32));
    b.emitConstInt32(r(4), idx);
    b.emitAdd(r(1), r(3), r(4));
    b.emitAdd(r(3), r(1), r(0));
    b.emitAdd(r(4), r(1), r(3));
    b.emitRet(r(4));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%5]
  %1: Const.Int32(#42) [%2, %2]
  %2: Add.Int32 %1, %1 [%4]
  %3: Const.Int32(#23) [%4]
  %4: Add.Int32 %2, %3 [%5, %6]
  %5: Add.Int32 %4, %0 [%6]
  %6: Add.Int32 %4, %5 [%7]
  %7: Ret.Int32 %6
");
}

@Test
fn testSsaGenSubIntArguments() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 3);
    b.setArguments(2i32);
    b.emitSub(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Sub.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
")
}

@Test
fn testSsaGenNegIntArgument() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 2);
    b.setArguments(1i32);
    b.emitNeg(r(1), r(0));
    b.emitRet(r(1));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%1]
  %1: Neg.Int32 %0 [%2]
  %2: Ret.Int32 %1
");
}

@Test
fn testSsaGenMulIntArguments() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 3);
    b.setArguments(2i32);
    b.emitMul(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%2]
  %1: Arg.Int32(1) [%2]
  %2: Mul.Int32 %0, %1 [%3]
  %3: Ret.Int32 %2
");
}

@Test
fn testSsaGenSimpleIf() {
    let b = BytecodeBuilder::new();
    b.addRegisters(BytecodeType::Bool, BytecodeType::Int32);
    let end = b.createLabel();
    b.setArguments(1i32);
    let idx = b.addConst(ConstPoolEntry::Int32(1i32));
    b.emitConstInt32(r(1), idx);
    b.emitJumpIfFalse(r(0), end);
    let idx = b.addConst(ConstPoolEntry::Int32(10i32));
    b.emitConstInt32(r(1), idx);
    b.bindLabel(end);
    b.emitRet(r(1));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@2, @1]
  %0: Arg.Bool(0) [%2]
  %1: Const.Int32(#1) [%5]
  %2: If(@1, @2) %0
@1: pred = [@0] succ = [@2]
  %3: Const.Int32(#10) [%5]
  %4: Goto(@2)
@2: pred = [@0, @1]
  %5: Phi %1, %3 [%6]
  %6: Ret.Int32 %5
");
}

@Test
fn testSsaGenIfReturnInBothBranches() {
    let fct = bcSsaGenIfReturnInBothBranches();
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@2, @1]
  %0: Arg.Bool(0) [%1]
  %1: If(@1, @2) %0
@1: pred = [@0]
  %2: Const.Int32(#1) [%3]
  %3: Ret.Int32 %2
@2: pred = [@0]
  %4: Const.Int32(#2) [%5]
  %5: Ret.Int32 %4
");
}

pub fn bcSsaGenIfReturnInBothBranches(): BytecodeFunction {
    // fn bcSsaGenIfReturnInBothBranches(a: Bool): Int32 {
    //    if a { return 1; } else { return 2; }
    // }

    let b = BytecodeBuilder::new();
    let lblElse = b.createLabel();
    b.addRegisters(BytecodeType::Bool, BytecodeType::Int32);
    b.setArguments(1i32);
    b.emitJumpIfFalse(r(0), lblElse);
    let idx = b.addConst(ConstPoolEntry::Int32(1i32));
    b.emitConstInt32(r(1), idx);
    b.emitRet(r(1));
    b.bindLabel(lblElse);
    let idx = b.addConst(ConstPoolEntry::Int32(2i32));
    b.emitConstInt32(r(1), idx);
    b.emitRet(r(1));
    b.generate()
}

@Test
fn testSsaGenIfWithConditionalAssignment() {
    // fn bcSsaGenIfWithConditionalAssignment(a: Bool): Int32 {
    //    let mut x = 1i32;
    //    let mut y = 27i32;
    //    if a { x = 4i32; }
    //    x + y
    // }

    let b = BytecodeBuilder::new();
    b.addRegisters(BytecodeType::Bool, BytecodeType::Int32, BytecodeType::Int32, BytecodeType::Int32);
    b.setArguments(1i32);
    let lblEndif = b.createLabel();
    let idx = b.addConst(ConstPoolEntry::Int32(1i32));
    b.emitConstInt32(r(1), idx);
    let idx = b.addConst(ConstPoolEntry::Int32(27i32));
    b.emitConstInt32(r(2), idx);
    b.emitJumpIfFalse(r(0), lblEndif);
    let idx = b.addConst(ConstPoolEntry::Int32(4i32));
    b.emitConstInt32(r(1), idx);
    b.bindLabel(lblEndif);
    b.emitAdd(r(3), r(1), r(2));
    b.emitRet(r(3));
    let fct = b.generate();
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@2, @1]
  %0: Arg.Bool(0) [%3]
  %1: Const.Int32(#1) [%6]
  %2: Const.Int32(#27) [%8]
  %3: If(@1, @2) %0
@1: pred = [@0] succ = [@2]
  %4: Const.Int32(#4) [%6]
  %5: Goto(@2)
@2: pred = [@0, @1]
  %6: Phi %1, %4 [%8]
  %8: Add.Int32 %6, %2 [%9]
  %9: Ret.Int32 %8
");
}

@Test
fn testSsaGenWhileCountDown() {
    // fn bcSsaGenWhileCountDown(x: Int32): Int32 {
    //    let mut x = x;
    //    while x > 0i32 { x = x - 1i32; }
    //    x
    // }

    let fct = bcSsaGenWhileCountDown();
    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1]
  %0: Arg.Int32(0) [%3]
  %1: Goto(@1)
@1: pred = [@0, @2] succ = [@3, @2]
  %3: Phi %0, %7 [%4, %7, %9]
  %2: Const.Int32(#0) [%4]
  %4: Greater.Int32 %3, %2 [%5]
  %5: If(@2, @3) %4
@2: pred = [@1] succ = [@1]
  %6: Const.Int32(#1) [%7]
  %7: Sub.Int32 %3, %6 [%3]
  %8: Goto(@1)
@3: pred = [@1]
  %9: Ret.Int32 %3
");
}

pub fn bcSsaGenWhileCountDown(): BytecodeFunction {
    let b = BytecodeBuilder::new();
    b.setArguments(1i32);
    b.addRegisters(BytecodeType::Int32, BytecodeType::Int32, BytecodeType::Bool, BytecodeType::Int32);
    let lblEnd = b.createLabel();
    b.emitMov(r(1), r(0));
    let lblStart = b.createLabel();
    b.bindLabel(lblStart);
    b.emitLoopStart();
    let idx = b.addConst(ConstPoolEntry::Int32(0i32));
    b.emitConstInt32(r(3), idx);
    b.emitTestGt(r(2), r(1), r(3));
    b.emitJumpIfFalse(r(2), lblEnd);
    let idx = b.addConst(ConstPoolEntry::Int32(1i32));
    b.emitConstInt32(r(3), idx);
    b.emitSub(r(1), r(1), r(3));
    b.emitJumpLoop(lblStart);
    b.bindLabel(lblEnd);
    b.emitRet(r(1));
    b.generate()
}

@Test
fn testSsaGenWhileCountDownWithSum() {
    // fn bcSsaGenWhileCountDownWithSum(x: Int32): Int32 {
    //    let mut x = x;
    //    let mut sum = 0i32;
    //    while x > 0i32 {
    //        x = x - 1i32;
    //        sum = sum + x;
    //    }
    //    sum
    // }

    let b = BytecodeBuilder::new();
    b.setArguments(1i32);
    b.addRegisters(
      BytecodeType::Int32,
      BytecodeType::Int32,
      BytecodeType::Int32,
      BytecodeType::Bool,
      BytecodeType::Int32
    );
    let lblEnd = b.createLabel();
    b.emitMov(r(1), r(0));
    let idx = b.addConst(ConstPoolEntry::Int32(0i32));
    b.emitConstInt32(r(2), idx);
    let lblStart = b.createLabel();
    b.bindLabel(lblStart);
    b.emitLoopStart();
    let idx = b.addConst(ConstPoolEntry::Int32(0i32));
    b.emitConstInt32(r(4), idx);
    b.emitTestGt(r(3), r(1), r(4));
    b.emitJumpIfFalse(r(3), lblEnd);
    let idx = b.addConst(ConstPoolEntry::Int32(1i32));
    b.emitConstInt32(r(4), idx);
    b.emitSub(r(1), r(1), r(4));
    b.emitAdd(r(2), r(2), r(1));
    b.emitJumpLoop(lblStart);
    b.bindLabel(lblEnd);
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0: succ = [@1]
  %0: Arg.Int32(0) [%4]
  %1: Const.Int32(#0) [%9]
  %2: Goto(@1)
@1: pred = [@0, @2] succ = [@3, @2]
  %4: Phi %0, %8 [%5, %8]
  %9: Phi %1, %10 [%10, %12]
  %3: Const.Int32(#0) [%5]
  %5: Greater.Int32 %4, %3 [%6]
  %6: If(@2, @3) %5
@2: pred = [@1] succ = [@1]
  %7: Const.Int32(#1) [%8]
  %8: Sub.Int32 %4, %7 [%10, %4]
  %10: Add.Int32 %9, %8 [%9]
  %11: Goto(@1)
@3: pred = [@1]
  %12: Ret.Int32 %9
");
}

@Test
fn testSsaGenLoadArrayElementInt32() {
    let b = BytecodeBuilder::new();
    b.setArguments(2i32);
    b.addRegisters(BytecodeType::Ptr, BytecodeType::Int64, BytecodeType::Int32);
    b.emitLoadArray(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Ptr(0) [%2, %4]
  %1: Arg.Int64(1) [%3, %4]
  %2: ArrayLength %0 [%3]
  %3: BoundsCheck %1, %2
  %4: ArrayGet.Int32 %0, %1 [%5]
  %5: Ret.Int32 %4
");
}

@Test
fn testSsaGenStoreArrayElementInt32() {
    let b = BytecodeBuilder::new();
    b.setArguments(3i32);
    b.addRegisters(BytecodeType::Ptr, BytecodeType::Int64, BytecodeType::Int32, BytecodeType::Unit);
    b.emitStoreArray(r(2), r(0), r(1));
    b.emitRet(r(3));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Ptr(0) [%3, %5]
  %1: Arg.Int64(1) [%4, %5]
  %2: Arg.Int32(2) [%5]
  %3: ArrayLength %0 [%4]
  %4: BoundsCheck %1, %3
  %5: ArraySet %0, %1, %2
  %6: Ret.Void
");
}

@Test
fn testSsaGenDivInt32() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int32, 3);
    b.setArguments(2i32);
    b.emitDiv(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int32(0) [%3]
  %1: Arg.Int32(1) [%2, %3]
  %2: DivZeroCheck %1
  %3: Div.Int32 %0, %1 [%4]
  %4: Ret.Int32 %3
");
}

@Test
fn testSsaGenDivInt64() {
    let b = BytecodeBuilder::new();
    b.addNRegisters(BytecodeType::Int64, 3);
    b.setArguments(2i32);
    b.emitDiv(r(2), r(0), r(1));
    b.emitRet(r(2));
    let fct = b.generate();

    let graph = createGraph(fct);

    assertGraph(graph, "
@0:
  %0: Arg.Int64(0) [%3]
  %1: Arg.Int64(1) [%2, %3]
  %2: DivZeroCheck %1
  %3: Div.Int64 %0, %1 [%4]
  %4: Ret.Int64 %3
");
}

fn bytecodeEquals(f1: BytecodeFunction, f2: BytecodeFunction) {
  assert(f1.code.equals(f2.code));
  assert(f1.arguments == f2.arguments);
  assert(f1.registers.size() == f2.registers.size());
  assert(f1.const_pool.size() == f2.const_pool.size());
}

fn r(id: Int64): BytecodeRegister {
  BytecodeRegister(id.toInt32())
}
