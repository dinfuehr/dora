use std::Stringable;

use package::bytecode::data::BytecodeType;

pub enum Type {
    Unit,
    Bool,
    UInt8,
    Int32,
    Int64,
    Float32,
    Float64,
    Ptr,
    Address,
}

impl Type {
    pub fn isUnit(): Bool {
        match self {
            Type::Unit => true,
            _ => false,
        }
    }

    pub fn isUInt8(): Bool {
        match self {
            Type::UInt8 => true,
            _ => false,
        }
    }

    pub fn isInt32(): Bool {
        match self {
            Type::Int32 => true,
            _ => false,
        }
    }

    pub fn isInt64(): Bool {
        match self {
            Type::Int64 => true,
            _ => false,
        }
    }

    pub fn isAnyFloat(): Bool {
        self.isFloat32() || self.isFloat64()
    }

    pub fn isFloat32(): Bool {
        match self {
            Type::Float32 => true,
            _ => false,
        }
    }

    pub fn isFloat64(): Bool {
        match self {
            Type::Float64 => true,
            _ => false,
        }
    }

    pub fn isPtr(): Bool {
        match self {
            Type::Ptr => true,
            _ => false,
        }
    }

    pub fn isReference(): Bool {
        self == Type::Ptr
    }
}

impl Stringable for Type {
    fn toString(): String {
        match self {
            Type::Unit => "Unit",
            Type::Bool => "Bool",
            Type::UInt8 => "UInt8",
            Type::Int32 => "Int32",
            Type::Int64 => "Int64",
            Type::Float32 => "Float32",
            Type::Float64 => "Float64",
            Type::Ptr => "Ptr",
            Type::Address => "Address",
        }
    }
}
