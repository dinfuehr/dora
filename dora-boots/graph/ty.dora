use std::Stringable;

use package::bytecode::data::BytecodeType;

pub enum Type {
    Unit,
    Bool,
    UInt8,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    Ptr,
}

impl Type {
    pub fn isUnit(): Bool {
        match self {
            Type::Unit => true,
            _ => false,
        }
    }

    pub fn isUInt8(): Bool {
        match self {
            Type::UInt8 => true,
            _ => false,
        }
    }

    pub fn isInt32(): Bool {
        match self {
            Type::Int32 => true,
            _ => false,
        }
    }

    pub fn isInt64(): Bool {
        match self {
            Type::Int64 => true,
            _ => false,
        }
    }

    fn isFloat32(): Bool {
        match self {
            Type::Float32 => true,
            _ => false,
        }
    }

    pub fn isFloat64(): Bool {
        match self {
            Type::Float64 => true,
            _ => false,
        }
    }

    pub fn isPtr(): Bool {
        match self {
            Type::Ptr => true,
            _ => false,
        }
    }

    pub static fn unit(): Type { Type::Unit }
    pub static fn bool(): Type { Type::Bool }
    pub static fn uint8(): Type { Type::UInt8 }
    pub static fn char(): Type { Type::Char }
    pub static fn int32(): Type { Type::Int32 }
    pub static fn int64(): Type { Type::Int64 }
    pub static fn float32(): Type { Type::Float32 }
    pub static fn float64(): Type { Type::Float64 }
    pub static fn ptr(): Type { Type::Ptr }

    pub static fn fromBytecodeType(ty: BytecodeType): Type {
        match ty {
            BytecodeType::Unit => Type::Unit,
            BytecodeType::Bool => Type::Bool,
            BytecodeType::UInt8 => Type::UInt8,
            BytecodeType::Char => Type::Char,
            BytecodeType::Int32 => Type::Int32,
            BytecodeType::Int64 => Type::Int64,
            BytecodeType::Float32 => Type::Float32,
            BytecodeType::Float64 => Type::Float64,
            BytecodeType::Ptr => Type::Ptr,
            _ => unreachable[Type](),
        }
    }
}

impl Stringable for Type {
    fn toString(): String {
        match self {
            Type::Unit => "Unit",
            Type::Bool => "Bool",
            Type::UInt8 => "UInt8",
            Type::Char => "Char",
            Type::Int32 => "Int32",
            Type::Int64 => "Int64",
            Type::Float32 => "Float32",
            Type::Float64 => "Float64",
            Type::Ptr => "Ptr",
        }
    }
}
