use package::graph::Graph;
use package::graph::Block;
use package::graph::Op;
use package::graph::createReturnVoidInst;
use package::graph::createBinaryInst;
use package::graph::createInt32Const;
use package::graph::ty::Type;

@Test
fn simpleGraph() {
    let graph = Graph::new();

    let block = Block::new();
    graph.addBlock(block);
    graph.setEntryBlock(block);

    let inst = createReturnVoidInst();
    block.appendInst(inst);
}

@Test
fn addIntConsts() {
    let graph = Graph::new();

    let block = Block::new();
    graph.addBlock(block);
    graph.setEntryBlock(block);

    let const1 = createInt32Const(1i32);
    block.appendInst(const1);

    let const2 = createInt32Const(2i32);
    block.appendInst(const2);

    let inst = createBinaryInst(Op::Add, Type::Int64, const1, const2);
    block.appendInst(inst);

    let inst = createReturnVoidInst();
    block.appendInst(inst);

    assert(const1.hasUses());
    assert(const2.hasUses());
    assert(!inst.hasUses());
}
