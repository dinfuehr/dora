use std::io::{File, OpenFile};

use package::graph::{Block, Graph, Inst, Op};
use package::compilation::CompilationInfo;

pub fn createHtmlWriter(ci: CompilationInfo, graph: Graph): HtmlWriter {
    let file = File::create("ssa.html");
    let html = HtmlWriter(ci, graph, file);
    html.start();
    html
}

pub class HtmlWriter {
    ci: CompilationInfo,
    graph: Graph,
    file: OpenFile,
}

impl HtmlWriter {
    fn start() {
        self.write("<!doctype html>
<html>
    <head>
        <meta charset=\"utf-8\">
        <title>Graph Viewer</title>
        <style>
div.block {
    margin-left: 40px;
}

div.inst {
    padding-left: 1.5em;
    text-indent: -1.5em;
}

table {
    table-layout: fixed;
}

td {
    vertical-align: top;
}

td.pass-name div {
    transform: rotate(180deg);
    writing-mode: vertical-lr;
    white-space: pre;
}

td.graph {
    width: 400px;
}

.value {
    cursor: pointer;
}

.line-number {
    font-style: italic;
    font-size: small;
}
        </style>
        <script>
window.onload = function() {
    console.log(\"onload\");

    let elements = document.getElementsByClassName(\"value\");
    for (element of elements) {
        element.addEventListener('click', graphValueClicked);
    }
}

function graphValueClicked(e) {
    console.log(e);
}
        </script>
    </head>
    <body>

    <table><tr>
");
    }

    pub fn dumpGraph(text: String) {
        self.write("<td class=\"pass-name\"><div>${text}</div></td>\n");
        self.write("<td class=\"graph\"><code>");

        for block in self.graph.insertionOrderIterator() {
            self.dumpBlock(block);
        }

        self.write("</code></td>\n");
    }

    fn dumpBlock(block: Block) {
        self.write("<div class=\"block-name\">@${block.id()}:</div>");
        self.write("<div class=\"block\">");

        for inst in block.phisIterator() {
            self.dumpInst(inst);
        }

        for inst in block.instructionsIterator() {
            self.dumpInst(inst);
        }

        self.write("</div>");
    }

    fn dumpInst(inst: Inst) {
        self.write("<div class=\"inst\">%${inst.id()}");

        let ty = inst.getMaybeValueType();

        if ty.isSome() {
            let ty = ty.getOrPanic();
            self.write("&nbsp;<span class=\"inst-value-type\">&lt;${ty}&gt;</span>");
        }

        if inst.hasInlinedLocation() {
            let inlined_location = inst.getInlinedLocation();
            let loc = inlined_location.location;
            self.write("&nbsp;<span class=\"line-number\">&lt;${loc.line}:${loc.column}&gt;</span>");
        }

        self.write(": ${inst.op()}");

        if !inst.getInputs().isEmpty() {
            for input in inst.getInputs() {
                let id = input.getValue().id();
                self.write("&nbsp;<span class=\"value inst${id}\">%${id}</span>");
            }
        }

        if inst.op() == Op::Goto {
            self.write("&nbsp;<span class=\"block-use\">${inst.getTargetBlock()}</span>");
        } else if inst.op() == Op::If {
            self.write("&nbsp;<span class=\"block-use\">${inst.getTrueBlock()}</span>");
            self.write("&nbsp;<span class=\"block-use\">${inst.getFalseBlock()}</span>");
        }

        self.write("</div>");
    }

    pub fn close() {
        self.write("
    </tr></table>
    </body>
</html>
");
        self.file.close();
    }

    fn write(text: String) {
        self.file.writeString(text);
    }
}
