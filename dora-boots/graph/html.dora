use std::io::{File, OpenFile};

use package::bytecode::{BytecodeFunction, BytecodeIterator};
use package::graph::{Block, Graph, Inst, Op};
use package::graph_builder::BytecodeAnalysis;
use package::compilation::CompilationInfo;

pub fn createHtmlWriter(ci: CompilationInfo): HtmlWriter {
    let file = File::create("ssa.html");
    let html = HtmlWriter(ci, file);
    html.start();
    html
}

pub class HtmlWriter {
    ci: CompilationInfo,
    file: OpenFile,
}

impl HtmlWriter {
    fn start() {
        self.write("<!doctype html>
<html>
    <head>
        <meta charset=\"utf-8\">
        <title>Graph Viewer</title>
        <style>
div.block {
    margin-left: 40px;
}

div.inst {
    padding-left: 1.5em;
    text-indent: -1.5em;
}

table {
    table-layout: fixed;
}

#main {
    display: flex;
    width: fit-content;
    margin: 10px;
}

div.pass-name {
    border: 1px solid black;
    text-align: right;
    transform: rotate(180deg);
    writing-mode: vertical-lr;
    white-space: pre;
    padding: 10px;
}

div.graph {
    border-width: 1px 0px;
    border-style: solid;
    border-color: black;
    padding: 5px;
    width: 400px;
}

.value {
    cursor: pointer;
}

.inst-value-type {
    font-style: italic;
    font-size: small;
}

.line-number {
    font-style: italic;
    font-size: small;
}
        </style>
        <script>
window.onload = function() {
    let elements = document.getElementsByClassName(\"value\");
    for (element of elements) {
        element.addEventListener('click', graphValueClicked);
    }
}

function graphValueClicked(e) {
    console.log(e);
}
        </script>
    </head>
    <body>

    <div id=\"main\">
");
    }

    pub fn dumpBytecode(bc: BytecodeFunction, analysis: BytecodeAnalysis) {
        self.write("<div class=\"pass-name\">Bytecode</div>\n");
        self.write("<div class=\"graph\"><code>");

        for blockStart in analysis.starts {
            self.write("<div class=\"block-name\">Block at ${blockStart}:</div>");
            self.write("<div class=\"block\">");

            for inst in BytecodeIterator::newAtPos(bc.code, blockStart) {
                if inst.start > blockStart && analysis.starts.contains(inst.start) {
                    break;
                }

                self.write("<div>${inst.start}: some bytecode inst</div>");
            }

            self.write("</div>");
        }

        self.write("</code></div>\n");
    }

    pub fn dumpGraph(title: String, graph: Graph) {
        self.write("<div class=\"pass-name\">${title}</div>\n");
        self.write("<div class=\"graph\"><code>");

        for block in graph.insertionOrderIterator() {
            self.dumpBlock(block);
        }

        self.write("</code></div>\n");
    }

    fn dumpBlock(block: Block) {
        self.write("<div class=\"block-name\">@${block.id()}:</div>");
        self.write("<div class=\"block\">");

        for inst in block.phisIterator() {
            self.dumpInst(inst);
        }

        for inst in block.instructionsIterator() {
            self.dumpInst(inst);
        }

        self.write("</div>");
    }

    fn dumpInst(inst: Inst) {
        self.write("<div class=\"inst\">%${inst.id()}");

        let ty = inst.getMaybeValueType();

        if ty.isSome() {
            let ty = ty.getOrPanic();
            self.write("&nbsp;<span class=\"inst-value-type\">&lt;${ty}&gt;</span>");
        }

        if inst.hasInlinedLocation() {
            let inlined_location = inst.getInlinedLocation();
            let loc = inlined_location.location;
            self.write("&nbsp;<span class=\"line-number\">&lt;${loc.line}:${loc.column}&gt;</span>");
        }

        self.write(": ${inst.op()}");

        match inst.op() {
            Op::Goto => {
                self.write("&nbsp;<span class=\"block-use\">${inst.getTargetBlock()}</span>");
            }

            Op::If => {
                self.write("&nbsp;<span class=\"block-use\">${inst.getTrueBlock()}</span>");
                self.write("&nbsp;<span class=\"block-use\">${inst.getFalseBlock()}</span>");
            }

            Op::UInt8Const => {
                self.write("&nbsp;${inst.getValueAsUInt8()}");
            }

            Op::Int32Const => {
                self.write("&nbsp;${inst.getValueAsInt32()}");
            }

            Op::Int64Const => {
                self.write("&nbsp;${inst.getValueAsInt64()}");
            }

            Op::Float32Const => {
                self.write("&nbsp;${inst.getValueAsFloat32()}");
            }

            Op::Float64Const => {
                self.write("&nbsp;${inst.getValueAsFloat64()}");
            }

            Op::StringConst => {
                self.write("&nbsp;\"${inst.getValueAsString()}\"");
            }

            _ => {
                if !inst.getInputs().isEmpty() {
                    for input in inst.getInputs() {
                        let id = input.getValue().id();
                        self.write("&nbsp;<span class=\"value inst${id}\">%${id}</span>");
                    }
                }
            }
        }

        self.write("</div>");
    }

    pub fn close() {
        self.write("
    </div>
    </body>
</html>
");
        self.file.close();
    }

    fn write(text: String) {
        self.file.writeString(text);
    }
}
