use package::assembler::AssemblerBuffer;
use package::assembler::Label;
use package::assembler::MachineCode;
use package::assembler::Register;
use package::assembler::assertAsm32;
use package::assembler::assertAsmEnd;

let R0: Register = Register(0i32);
let R1: Register = Register(1i32);
let R2: Register = Register(2i32);
let R3: Register = Register(3i32);
let R4: Register = Register(4i32);
let R5: Register = Register(5i32);
let R6: Register = Register(6i32);
let R7: Register = Register(7i32);
let R8: Register = Register(8i32);
let R9: Register = Register(9i32);
let R10: Register = Register(10i32);
let R11: Register = Register(11i32);
let R12: Register = Register(12i32);
let R13: Register = Register(13i32);
let R14: Register = Register(14i32);
let R15: Register = Register(15i32);

let R16: Register = Register(16i32);
let R17: Register = Register(17i32);
let R18: Register = Register(18i32);
let R19: Register = Register(19i32);
let R20: Register = Register(20i32);
let R21: Register = Register(21i32);
let R22: Register = Register(22i32);
let R23: Register = Register(23i32);
let R24: Register = Register(24i32);
let R25: Register = Register(25i32);
let R26: Register = Register(26i32);
let R27: Register = Register(27i32);
let R28: Register = Register(28i32);
let R29: Register = Register(29i32);
let R30: Register = Register(30i32);

let REG_ZERO: Register = Register(32i32);
let REG_SP: Register = Register(33i32);

let REG_FP: Register = R29;
let REG_LR: Register = R30;

struct NeonRegister(value: Int32)

impl NeonRegister {
    fn encoding(): Int32 {
        self.value
    }
}

let F0: NeonRegister = NeonRegister(0i32);
let F1: NeonRegister = NeonRegister(1i32);
let F2: NeonRegister = NeonRegister(2i32);
let F3: NeonRegister = NeonRegister(3i32);
let F4: NeonRegister = NeonRegister(4i32);
let F5: NeonRegister = NeonRegister(5i32);
let F6: NeonRegister = NeonRegister(6i32);
let F7: NeonRegister = NeonRegister(7i32);
let F8: NeonRegister = NeonRegister(8i32);
let F9: NeonRegister = NeonRegister(9i32);
let F10: NeonRegister = NeonRegister(10i32);
let F11: NeonRegister = NeonRegister(11i32);
let F12: NeonRegister = NeonRegister(12i32);
let F13: NeonRegister = NeonRegister(13i32);
let F14: NeonRegister = NeonRegister(14i32);
let F15: NeonRegister = NeonRegister(15i32);

let F16: NeonRegister = NeonRegister(16i32);
let F17: NeonRegister = NeonRegister(17i32);
let F18: NeonRegister = NeonRegister(18i32);
let F19: NeonRegister = NeonRegister(19i32);
let F20: NeonRegister = NeonRegister(20i32);
let F21: NeonRegister = NeonRegister(21i32);
let F22: NeonRegister = NeonRegister(22i32);
let F23: NeonRegister = NeonRegister(23i32);
let F24: NeonRegister = NeonRegister(24i32);
let F25: NeonRegister = NeonRegister(25i32);
let F26: NeonRegister = NeonRegister(26i32);
let F27: NeonRegister = NeonRegister(27i32);
let F28: NeonRegister = NeonRegister(28i32);
let F29: NeonRegister = NeonRegister(29i32);
let F30: NeonRegister = NeonRegister(30i32);
let F31: NeonRegister = NeonRegister(31i32);

class ForwardJump {
    offset: Int32,
    label: Label,
    kind: JumpKind
}

enum JumpKind {
    Unconditional,
    Conditional(Cond),
    NonZero(Bool, Register),
}

enum Cond {
    EQ, // equal
    NE, // not equal
    CS,
    HS, // carry set, unsigned higher or same
    CC,
    LO, // carry clear, unsigned lower
    MI, // negative
    PL, // positive or zero
    VS, // overflow
    VC, // no overflow
    HI, // unsigned higher
    LS, // unsigned lower or same
    GE, // signed greater than or equal
    LT, // signed less than
    GT, // signed greater than
    LE, // signed less than or equal
}

impl Cond {
    @pub fn invert(): Cond {
        match self {
            Cond::EQ => Cond::NE,
            Cond::NE => Cond::EQ,
            Cond::CS => Cond::CC,
            Cond::HS => Cond::CC,
            Cond::CC => Cond::CS,
            Cond::LO => Cond::CS,
            Cond::MI => Cond::PL,
            Cond::PL => Cond::MI,
            Cond::VS => Cond::VC,
            Cond::VC => Cond::VS,
            Cond::HI => Cond::LS,
            Cond::LS => Cond::HI,
            Cond::GE => Cond::LT,
            Cond::LT => Cond::GE,
            Cond::GT => Cond::LE,
            Cond::LE => Cond::GT,
        }
    }

    @pub fn encoding(): Int32 {
        match self {
            Cond::EQ => 0b0000i32,
            Cond::NE => 0b0001i32,
            Cond::CS => 0b0010i32,
            Cond::HS => 0b0010i32,
            Cond::CC => 0b0011i32,
            Cond::LO => 0b0011i32,
            Cond::MI => 0b0100i32,
            Cond::PL => 0b0101i32,
            Cond::VS => 0b0110i32,
            Cond::VC => 0b0111i32,
            Cond::HI => 0b1000i32,
            Cond::LS => 0b1001i32,
            Cond::GE => 0b1010i32,
            Cond::LT => 0b1011i32,
            Cond::GT => 0b1100i32,
            Cond::LE => 0b1101i32,
        }
    }
}

@pub class AssemblerArm64 {
    buffer: AssemblerBuffer,
}

impl AssemblerArm64 {
    @pub @static fn new(): AssemblerArm64 {
        AssemblerArm64(AssemblerBuffer::new())
    }

    @pub fn ret() {
        let inst = encoding::uncondBranchReg(0b0010i32, 0b11111i32, 0i32, REG_LR, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fn retReg(rn: Register) {
        let inst = encoding::uncondBranchReg(0b0010i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fn b(label: Label) {
        unreachable[()]();
    }

    @pub fn bl(label: Label) {
        unreachable[()]();
    }

    @pub fn blr(rn: Register) {
        let inst = encoding::uncondBranchReg(0b0001i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fn br(rn: Register) {
        let inst = encoding::uncondBranchReg(0b0000i32, 0b11111i32, 0i32, rn, 0i32);
        self.buffer.emitInt32(inst);
    }

    @pub fn finalize(): Array[UInt8] {
        while self.buffer.size() % 16 != 0 {
            self.ret();
        }
        self.buffer.toArray()
    }

    fn finalizeTesting(): MachineCode {
        MachineCode::new(self.buffer.toArray())
    }
}

impl Register {
    fn isGpr(): Bool {
        self.value <= 30i32
    }

    fn isGprOrZero(): Bool {
        self.isGpr() || self == REG_ZERO
    }

    fn isGprOrSp(): Bool {
        self.isGpr() || self == REG_SP
    }

    fn encoding(): Int32 {
        assert(self.isGpr());
        self.value
    }

    fn encodingZero(): Int32 {
        assert(self.isGprOrZero());

        if self.isGpr() {
            self.value
        } else {
            31i32
        }
    }

    fn encodingSp(): Int32 {
        assert(self.isGprOrSp());

        if self.isGpr() {
            self.value
        } else {
            31i32
        }
    }

    fn encodingZeroOrSp(): Int32 {
        if self.isGpr() {
            self.value
        } else if self == REG_ZERO || self == REG_SP {
            31i32
        } else {
            unreachable[Int32]()
        }
    }
}

@pub enum Extend {
    UXTB,
    UXTH,
    LSL,
    UXTW,
    UXTX,
    SXTB,
    SXTH,
    SXTW,
    SXTX,
}

impl Extend {
    fn encoding(): Int32 {
        match self {
            Extend::UXTB => 0b000,
            Extend::UXTH => 0b001,
            Extend::LSL => 0b010,
            Extend::UXTW => 0b010,
            Extend::UXTX => 0b011,
            Extend::SXTB => 0b100,
            Extend::SXTH => 0b101,
            Extend::SXTW => 0b110,
            Extend::SXTX => 0b111,
        }
    }

    fn ldst_encoding(): Int32 {
        match self {
            Extend::UXTW => 0b010,
            Extend::LSL => 0b011,
            Extend::SXTW => 0b110,
            Extend::SXTX => 0b111,
            _ => unreachable[Int32](),
        }
    }
}

@pub enum Shift {
    LSL,
    LSR,
    ASR,
    ROR,
}

impl Shift {
    fn isRor(): Bool {
        match self {
            Shift::ROR => true,
            _ => false,
        }
    }

    fn encoding(): Int32 {
        match self {
            Shift::LSL => 0i32,
            Shift::LSR => 1i32,
            Shift::ASR => 2i32,
            Shift::ROR => 3i32,
        }
    }
}

mod encoding {
    use package::assembler::Register;
    use super::{Extend, Shift, Cond};

    @pub fn uncondBranchImm(op: Int32, imm26: Int32): Int32 {
        assert(fitsUnsigned(op, 1i32));
        assert(fitsSigned(imm26, 26i32));

        0b101i32 << 26i32 | op << 31i32 | (imm26 & 0x3FFFFFFi32)
    }

    @pub fn uncondBranchReg(opc: Int32, op2: Int32, op3: Int32, rn: Register, op4: Int32): Int32 {
        assert(fitsUnsigned(opc, 4i32));
        assert(fitsUnsigned(op2, 5i32));
        assert(fitsUnsigned(op3, 6i32));
        assert(rn.isGpr());
        assert(fitsUnsigned(op4, 5i32));

        0b1101011i32 << 25i32 | opc << 21i32 | op2 << 16i32 | op3 << 10i32 | rn.encoding() << 5i32 | op4
    }

    @pub fn addsub_extreg(
        sf: Int32,
        op: Int32,
        s: Int32,
        opt: Int32,
        rm: Register,
        option: Extend,
        imm3: Int32,
        rn: Register,
        rd: Register,
    ): Int32 {
        assert(fitsBit(sf));
        assert(fitsBit(op));
        assert(fitsBit(s));
        assert(opt == 0i32);
        assert(rm.isGprOrZero());
        assert(fitsU2(imm3));
        assert(rn.isGprOrSp());

        // Register 31 is xzr when setting flags or xsp when not.
        if s != 0i32 {
            assert(rd.isGprOrZero());
        } else {
            assert(rd.isGprOrSp());
        }

        sf << 31i32
            | op << 30i32
            | s << 29i32
            | 0b01011i32 << 24i32
            | opt << 22i32
            | 1i32 << 21i32
            | rm.encodingZero() << 16i32
            | option.encoding() << 13i32
            | imm3 << 10i32
            | rn.encodingSp() << 5i32
            | rd.encodingZeroOrSp()
    }

    @pub fn addsub_shreg(
        sf: Int32,
        op: Int32,
        s: Int32,
        shift: Shift,
        rm: Register,
        imm6: Int32,
        rn: Register,
        rd: Register,
    ): Int32 {
        assert(fitsBit(sf));
        assert(fitsBit(op));
        assert(fitsBit(s));
        assert(!shift.isRor());
        assert(rm.isGpr());
        assert(fitsU6(imm6));
        assert(rn.isGprOrZero());
        assert(rd.isGprOrZero());

        0b01011i32 << 24i32
            | sf << 31i32
            | op << 30i32
            | s << 29i32
            | shift.encoding() << 22i32
            | rm.encoding() << 16i32
            | imm6 << 10i32
            | rn.encodingZero() << 5i32
            | rd.encodingZero()
    }

    @pub fn atomic_op(
        size: Int32,
        v: Int32,
        a: Int32,
        r: Int32,
        rs: Register,
        o3: Int32,
        opc: Int32,
        rn: Register,
        rt: Register,
    ): Int32 {
        assert(fitsU2(size));
        assert(fitsBit(v));
        assert(fitsBit(a));
        assert(fitsBit(r));
        assert(rs.isGpr());
        assert(fitsBit(o3));
        assert(fitsU2(opc));
        assert(rn.isGpr());
        assert(rt.isGpr());

        size << 30i32
            | 0b111i32 << 27i32
            | v << 26i32
            | a << 23i32
            | r << 22i32
            | 1i32 << 21i32
            | rs.encoding() << 16i32
            | o3 << 15i32
            | opc << 12i32
            | rn.encoding() << 5i32
            | rt.encoding()
    }

    @pub fn bitfield(
        sf: Int32,
        opc: Int32,
        n: Int32,
        immr: Int32,
        imms: Int32,
        rn: Register,
        rd: Register,
    ): Int32 {
        assert(fitsBit(sf));
        assert(fitsU2(opc));
        assert(fitsBit(n));
        assert(fitsU6(immr));
        assert(fitsU6(imms));
        assert(rn.isGpr());
        assert(rd.isGpr());

        sf << 31i32
            | opc << 29i32
            | 0b100110i32 << 23i32
            | n << 22i32
            | (immr & 0x3Fi32) << 16i32
            | (imms & 0x3Fi32) << 10i32
            | rn.encoding() << 5i32
            | rd.encoding()
    }

    @pub fn cmp_branch_imm(sf: Int32, op: Int32, rt: Register, imm19: Int32): Int32 {
        assert(fitsBit(sf));
        assert(fitsBit(op));
        assert(fitsI19(imm19));
        assert(rt.isGpr());
        let imm = imm19 & 0x7FFFFi32;

        sf << 31i32 | 0b011010i32 << 25i32 | op << 24i32 | imm << 5i32 | rt.encoding()
    }

    @pub fn cond_branch_imm(cond: Cond, imm19: Int32): Int32 {
        assert(fitsI19(imm19));

        let imm = imm19 & 0x7FFFFi32;

        0b01010100i32 << 24i32 | imm << 5i32 | cond.encoding()
    }

    fn fitsBit(value: Int32): Bool {
        value >= 0i32 && value < 2i32
    }

    fn fitsI19(value: Int32): Bool {
        fitsSigned(value, 19i32)
    }

    fn fitsSigned(value: Int32, bits: Int32): Bool {
        assert(bits > 0i32 && bits < 32i32);
        -(1i32 << (bits - 1i32)) <= value && value < (1i32 << (bits - 1i32))
    }

    fn fitsU2(value: Int32): Bool {
        fitsUnsigned(value, 2i32)
    }

    fn fitsU6(value: Int32): Bool {
        fitsUnsigned(value, 6i32)
    }

    fn fitsUnsigned(value: Int32, bits: Int32): Bool {
        assert(bits > 0i32 && bits < 32i32);
        value >= 0i32 && value < (1i32 << bits)
    }
}

mod tests {
    use super::{assertAsm32, assertAsmEnd, R0, R10, AssemblerArm64};

    @Test
    fn testAsmRet() {
        let asm = AssemblerArm64::new();
        asm.ret();
        asm.retReg(R0);
        asm.retReg(R10);
        let buffer = asm.finalizeTesting();

        assertAsm32(buffer, 0xd65f03c0i32);
        assertAsm32(buffer, 0xd65f0000i32);
        assertAsm32(buffer, 0xd65f0140i32);
        assertAsmEnd(buffer);
    }
}
