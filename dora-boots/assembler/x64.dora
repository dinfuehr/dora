use package::assembler::AssemblerBuffer;
use package::assembler::Label;
use package::assembler::MachineCode;
use package::assembler::Register;
use package::assembler::assertAsm;
use package::assembler::assertAsmEnd;

pub let RAX: Register = Register(0i32);
pub let RCX: Register = Register(1i32);
pub let RDX: Register = Register(2i32);
pub let RBX: Register = Register(3i32);
pub let RSP: Register = Register(4i32);
pub let RBP: Register = Register(5i32);
pub let RSI: Register = Register(6i32);
pub let RDI: Register = Register(7i32);

pub let R8: Register = Register(8i32);
pub let R9: Register = Register(9i32);
pub let R10: Register = Register(10i32);
pub let R11: Register = Register(11i32);
pub let R12: Register = Register(12i32);
pub let R13: Register = Register(13i32);
pub let R14: Register = Register(14i32);
pub let R15: Register = Register(15i32);

pub let XMM0: XmmRegister = XmmRegister(0i32);
pub let XMM1: XmmRegister = XmmRegister(1i32);
pub let XMM2: XmmRegister = XmmRegister(2i32);
pub let XMM3: XmmRegister = XmmRegister(3i32);
pub let XMM4: XmmRegister = XmmRegister(4i32);
pub let XMM5: XmmRegister = XmmRegister(5i32);
pub let XMM6: XmmRegister = XmmRegister(6i32);
pub let XMM7: XmmRegister = XmmRegister(7i32);

pub let XMM8: XmmRegister = XmmRegister(8i32);
pub let XMM9: XmmRegister = XmmRegister(9i32);
pub let XMM10: XmmRegister = XmmRegister(10i32);
pub let XMM11: XmmRegister = XmmRegister(11i32);
pub let XMM12: XmmRegister = XmmRegister(12i32);
pub let XMM13: XmmRegister = XmmRegister(13i32);
pub let XMM14: XmmRegister = XmmRegister(14i32);
pub let XMM15: XmmRegister = XmmRegister(15i32);

struct XmmRegister(value: Int32)

impl XmmRegister {
    fn lowBits(): Int32 { self.value & 0b111i32 }
    fn needsRexBit(): Bool { self.value > 7i32 }
}

enum JumpDistance {
    Near,
    Far,
}

pub class AssemblerX64 {
    buffer: AssemblerBuffer,
    jumps: Vec[(Int64, Label, JumpDistance)],
}

impl AssemblerX64 {
    static pub fn new(): AssemblerX64 {
        AssemblerX64(
            AssemblerBuffer::new(),
            Vec[(Int64, Label, JumpDistance)]::new()
        )
    }

    fn createLabel(): Label {
        self.buffer.createLabel()
    }

    fn bindLabel(lbl: Label) {
        self.buffer.bindLabel(lbl);
    }

    fn createAndBindLabel(): Label {
        self.buffer.createAndBindLabel()
    }

    fn addlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x01u8);
        self.emitModRmReg(src, dest);
    }

    fn addqri(reg: Register, imm: Immediate) {
        self.emitAlu64Imm(reg, imm, 0b000i32, 0x05u8);
    }

    fn addqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x01u8);
        self.emitModRmReg(src, dest);
    }

    fn addssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x58u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn addsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x58u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn andlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x21u8);
        self.emitModRmReg(src, dest);
    }

    fn andqri(lhs: Register, imm: Immediate) {
        self.emitAlu64Imm(lhs, imm, 0b100i32, 0x25u8);
    }

    fn andqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x21u8);
        self.emitModRmReg(src, dest);
    }

    fn callr(src: Register) {
        self.emitRex32RmFieldOptional(src);
        self.emitByte(0xFFu8);
        self.emitModRmOpcode(0b010i32, src);
    }

    fn cdq() {
        self.emitByte(0x99u8);
    }

    fn cmovl(condition: Condition, dest: Register, src: Register) {
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte((0x40i32 + condition.toInt32()).toUInt8());
        self.emitModRmReg(dest, src);
    }

    fn cmovq(condition: Condition, dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte((0x40i32 + condition.toInt32()).toUInt8());
        self.emitModRmReg(dest, src);
    }

    fn cmpbai(lhs: Address, rhs: Immediate) {
        assert(rhs.isInt8() || rhs.isUInt8());
        self.emitRex32AddressOptional(lhs);
        self.emitByte(0x80u8);
        self.emitAddress(0b111i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn cmpbar(lhs: Address, rhs: Register) {
        self.emitRex32ModRmAddressByteOptional(rhs, lhs);
        self.emitByte(0x38u8);
        self.emitAddress(rhs.lowBits(), lhs);
    }

    fn cmplai(lhs: Address, imm: Immediate) {
        assert(imm.isInt32() || imm.isUInt32());
        self.emitRex32AddressOptional(lhs);

        if imm.isInt8() {
            self.emitByte(0x83u8);
            self.emitAddress(0b111i32, lhs);
            self.emitByte(imm.toUInt8());
        } else {
            self.emitByte(0x81u8);
            self.emitAddress(0b111i32, lhs);
            self.emitInt32(imm.toInt32());
        }
    }

    fn cmplar(lhs: Address, rhs: Register) {
        self.emitRex32ModRmAddressOptional(rhs, lhs);
        self.emitByte(0x39u8);
        self.emitAddress(rhs.lowBits(), lhs);
    }

    fn cmplri(lhs: Register, imm: Immediate) {
        self.emitAlu32Imm(lhs, imm, 0b111i32, 0x3Du8);
    }

    fn cmpqai(lhs: Address, imm: Immediate) {
        assert(imm.isInt32());
        self.emitRex64Address(lhs);

        if imm.isInt8() {
            self.emitByte(0x83u8);
            self.emitAddress(0b111i32, lhs);
            self.emitByte(imm.toUInt8());
        } else {
            self.emitByte(0x81u8);
            self.emitAddress(0b111i32, lhs);
            self.emitInt32(imm.toInt32());
        }
    }

    fn cmpqar(lhs: Address, rhs: Register) {
        self.emitRex64ModRmAddress(rhs, lhs);
        self.emitByte(0x39u8);
        self.emitAddress(rhs.lowBits(), lhs);
    }

    fn cmplrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x39u8);
        self.emitModRmReg(src, dest);
    }

    fn cmpqri(lhs: Register, imm: Immediate) {
        self.emitAlu64Imm(lhs, imm, 0b111i32, 0x3Du8);
    }

    fn cmpqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x39u8);
        self.emitModRmReg(src, dest);
    }

    fn cqo() {
        self.emitRex64();
        self.emitByte(0x99u8);
    }

    fn cvtsd2ssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Au8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn cvtsi2ssdrr(dest: XmmRegister, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRexOptional(false, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Au8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvtsi2ssqrr(dest: XmmRegister, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRexOptional(true, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Au8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvtsi2sddrr(dest: XmmRegister, src: Register) {
        self.emitByte(0xF2u8);
        self.emitRexOptional(false, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Au8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvtsi2sdqrr(dest: XmmRegister, src: Register) {
        self.emitByte(0xF2u8);
        self.emitRexOptional(true, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Au8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvtss2sdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Au8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn cvttsd2sidrr(dest: Register, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexOptional(false, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Cu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvttsd2siqrr(dest: Register, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexOptional(true, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Cu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvttss2sidrr(dest: Register, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexOptional(false, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Cu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn cvttss2siqrr(dest: Register, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexOptional(true, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Cu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn divssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Eu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn divsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Eu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn idivlr(src: Register) {
        self.emitRex32RmFieldOptional(src);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b111i32, src);
    }

    fn idivqr(src: Register) {
        self.emitRex64RmField(src);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b111i32, src);
    }

    fn imullrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xAFu8);
        self.emitModRmReg(dest, src);
    }

    fn imulqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xAFu8);
        self.emitModRmReg(dest, src);
    }

    fn int3() {
        self.emitByte(0xCCu8);
    }

    fn jcc(condition: Condition, dest: Label) {
        if dest.isBound() {
            // backwards jump
            // rip = end of current instruction = pc + 2
            let distance = dest.offset - (self.size() + 2i64);
            assert(distance <= -2i64);

            if distance >= -128i64 {
                self.emitByte((0x70i32 + condition.toInt32()).toUInt8());
                self.emitByte(distance.toUInt8());
            } else {
                let distance = dest.offset - (self.size() + 6i64);
                assert(distance.toInt32().toInt64() == distance);
                self.emitByte(0x0Fu8);
                self.emitByte((0x80i32 + condition.toInt32()).toUInt8());
                self.emitInt32(distance.toInt32());
            }
        } else {
            // forward jump - conservatively assume far jump
            self.emitByte(0x0Fu8);
            self.emitByte((0x80i32 + condition.toInt32()).toUInt8());
            self.emitJump(dest, JumpDistance::Far);
            self.emitInt32(0i32);
        }
    }

    fn jccNear(condition: Condition, dest: Label) {
        if dest.isBound() {
            // backwards jump
            // rip = end of current instruction = pc + 2
            let distance = dest.offset - (self.size() + 2i64);
            assert(-128i64 <= distance && distance <= -2i64);
            self.emitByte((0x70i32 + condition.toInt32()).toUInt8());
            self.emitByte(distance.toUInt8());
        } else {
            // forward jump
            self.emitByte((0x70i32 + condition.toInt32()).toUInt8());
            self.emitJump(dest, JumpDistance::Near);
            self.emitByte(0u8);
        }
    }

    fn jmpr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xFFu8);
        self.emitModRmOpcode(0b100i32, reg);
    }

    fn jmp(dest: Label) {
        if dest.isBound() {
            // backwards jump
            // rip = end of current instruction = pc + 2
            let distance = dest.offset - (self.size() + 2i64);
            assert(distance <= -2i64);

            if distance >= -128i64 {
                self.emitByte(0xEBu8);
                self.emitByte(distance.toUInt8());
            } else {
                let distance = dest.offset - (self.size() + 5i64);
                assert(distance.toInt32().toInt64() == distance);
                self.emitByte(0xE9u8);
                self.emitInt32(distance.toInt32());
            }
        } else {
            // forward jump - conservatively assume far jump
            self.emitByte(0xE9u8);
            self.emitJump(dest, JumpDistance::Far);
            self.emitInt32(0i32);
        }
    }

    fn jmpNear(dest: Label) {
        if dest.isBound() {
            // backwards jump
            // rip = end of current instruction = pc + 2
            let distance = dest.offset - (self.size() + 2i64);
            assert(-128i64 <= distance && distance <= -2i64);
            self.emitByte(0xEBu8);
            self.emitByte(distance.toUInt8());
        } else {
            // forward jump
            self.emitByte(0xEBu8);
            self.emitJump(dest, JumpDistance::Near);
            self.emitByte(0u8);
        }
    }

    fn lea(dest: Register, src: Address) {
        self.emitRex64ModRmAddress(dest, src);
        self.emitByte(0x8Du8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn lzcntlrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBDu8);
        self.emitModRmReg(dest, src);
    }

    fn lzcntqrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBDu8);
        self.emitModRmReg(dest, src);
    }

    fn movbai(dest: Address, src: Immediate) {
        assert(src.isInt8() || src.isUInt8());
        self.emitRex32AddressOptional(dest);
        self.emitByte(0xC6u8);
        self.emitAddress(0b000i32, dest);
        self.emitByte(src.toUInt8());
    }

    fn movbar(dest: Address, src: Register) {
        self.emitRex32ModRmAddressByteOptional(src, dest);
        self.emitByte(0x88u8);
        self.emitAddress(src.lowBits(), dest);
    }

    fn movdrx(dest: Register, src: XmmRegister) {
        self.emitByte(0x66u8);
        self.emitRexOptional(false, src.needsRexBit(), false, dest.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x7Eu8);
        self.emitModRm(0b11i32, src.lowBits(), dest.lowBits());
    }

    fn movdxr(dest: XmmRegister, src: Register) {
        self.emitByte(0x66u8);
        self.emitRexOptional(false, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x6Eu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn movlai(dest: Address, imm: Immediate) {
        assert(imm.isInt32() || imm.isUInt32());
        self.emitRex32AddressOptional(dest);
        self.emitByte(0xC7u8);
        self.emitAddress(0b000i32, dest);
        self.emitInt32(imm.toInt32());
    }

    fn movlar(dest: Address, src: Register) {
        self.emitRex32ModRmAddressOptional(src, dest);
        self.emitByte(0x89u8);
        self.emitAddress(src.lowBits(), dest);
    }

    fn movlra(dest: Register, src: Address) {
        self.emitRex32ModRmAddressOptional(dest, src);
        self.emitByte(0x8Bu8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movlri(dest: Register, imm: Immediate) {
        assert(imm.isInt32());
        self.emitRex32RmFieldOptional(dest);
        self.emitByte((0xB8i32 + dest.lowBits()).toUInt8());
        self.emitInt32(imm.toInt32());
    }

    fn movlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x89u8);
        self.emitModRmReg(src, dest);
    }

    fn movqar(dest: Address, src: Register) {
        self.emitRex64ModRmAddress(src, dest);
        self.emitByte(0x89u8);
        self.emitAddress(src.lowBits(), dest);
    }

    fn movqai(dest: Address, imm: Immediate) {
        assert(imm.isInt32());
        self.emitRex64Address(dest);
        self.emitByte(0xC7u8);
        self.emitAddress(0b000i32, dest);
        self.emitInt32(imm.toInt32());
    }

    fn movqra(dest: Register, src: Address) {
        self.emitRex64ModRmAddress(dest, src);
        self.emitByte(0x8Bu8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movqri(dest: Register, imm: Immediate) {
        if imm.isInt32() {
            self.emitRex64RmField(dest);
            self.emitByte(0xC7u8);
            self.emitModRmOpcode(0i32, dest);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitRex64RmField(dest);
            self.emitByte((0xB8i32 + dest.lowBits()).toUInt8());
            self.emitInt64(imm.toInt64());
        }
    }

    pub fn movqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x89u8);
        self.emitModRmReg(src, dest);
    }

    fn movqrx(dest: Register, src: XmmRegister) {
        self.emitByte(0x66u8);
        self.emitRexOptional(true, src.needsRexBit(), false, dest.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x7Eu8);
        self.emitModRm(0b11i32, src.lowBits(), dest.lowBits());
    }

    fn movqxr(dest: XmmRegister, src: Register) {
        self.emitByte(0x66u8);
        self.emitRexOptional(true, dest.needsRexBit(), false, src.needsRexBit());
        self.emitByte(0x0Fu8);
        self.emitByte(0x6Eu8);
        self.emitModRm(0b11i32, dest.lowBits(), src.lowBits());
    }

    fn movsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x10u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn movsdra(dest: XmmRegister, src: Address) {
        self.emitByte(0xF2u8);
        self.emitRexSseAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x10u8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movsdar(dest: Address, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseAddressOptional(src, dest);
        self.emitByte(0x0Fu8);
        self.emitByte(0x11u8);
        self.emitAddress(src.lowBits(), dest);
    }

    fn movssar(dest: Address, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseAddressOptional(src, dest);
        self.emitByte(0x0Fu8);
        self.emitByte(0x11u8);
        self.emitAddress(src.lowBits(), dest);
    }

    fn movssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x10u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn movssra(dest: XmmRegister, src: Address) {
        self.emitByte(0xF3u8);
        self.emitRexSseAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x10u8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movsxblra(dest: Register, src: Address) {
        self.emitRex32ModRmAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBEu8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movsxblrr(dest: Register, src: Register) {
        self.emitRex32ModRmByteOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBEu8);
        self.emitModRmReg(dest, src);
    }

    fn movsxbqra(dest: Register, src: Address) {
        self.emitRex64ModRmAddress(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBEu8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn movsxbqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBEu8);
        self.emitModRmReg(dest, src);
    }

    fn movsxlqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x63u8);
        self.emitModRmReg(dest, src);
    }

    fn movzxbrr(dest: Register, src: Register) {
        self.emitRex32ModRmByteOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xB6u8);
        self.emitModRmReg(dest, src);
    }

    fn movzxbra(dest: Register, src: Address) {
        self.emitRex32ModRmAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xB6u8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn mulssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x59u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn mulsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x59u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn neglr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b011i32, reg);
    }

    fn negqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b011i32, reg);
    }

    fn nop() {
        self.emitByte(0x90u8);
    }

    fn notlr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b010i32, reg);
    }

    fn notqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xF7u8);
        self.emitModRmOpcode(0b010i32, reg);
    }

    fn orlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x09u8);
        self.emitModRmReg(src, dest);
    }

    fn orqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x09u8);
        self.emitModRmReg(src, dest);
    }

    pub fn pushqr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte((0x50i32 + reg.lowBits()).toUInt8());
    }

    fn popcntlrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xB8u8);
        self.emitModRmReg(dest, src);
    }

    fn popcntqrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xB8u8);
        self.emitModRmReg(dest, src);
    }

    pub fn popqr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte((0x58i32 + reg.lowBits()).toUInt8());
    }

    fn pxorrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0x66u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xEFu8);
        self.emitModRmSseRegisters(dest, src);
    }

    pub fn retq() {
        self.emitByte(0xC3u8);
    }

    fn rollr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b000i32, reg);
    }

    fn rolqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b000i32, reg);
    }

    fn rorlr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b001i32, reg);
    }

    fn rorqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b001i32, reg);
    }

    fn sarlr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b111i32, reg);
    }

    fn sarlri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex32RmFieldOptional(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b111i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn sarqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b111i32, reg);
    }

    fn sarqri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex64RmField(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b111i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn setccr(condition: Condition, dest: Register) {
        if dest.needsRexBit() || dest.lowBits() > 3i32 {
            self.emitRex(false, false, false, dest.needsRexBit());
        }

        self.emitByte(0x0Fu8);
        self.emitByte((0x90i32 + condition.toInt32()).toUInt8());
        self.emitModRmOpcode(0i32, dest);
    }

    fn shllr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b100i32, reg);
    }

    fn shllri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex32RmFieldOptional(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b100i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn shlqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b100i32, reg);
    }

    fn shlqri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex64RmField(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b100i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn shrlr(reg: Register) {
        self.emitRex32RmFieldOptional(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b101i32, reg);
    }

    fn shrlri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex32RmFieldOptional(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b101i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn shrqr(reg: Register) {
        self.emitRex64RmField(reg);
        self.emitByte(0xD3u8);
        self.emitModRmOpcode(0b101i32, reg);
    }

    fn shrqri(lhs: Register, rhs: Immediate) {
        assert(rhs.isInt8());
        self.emitRex64RmField(lhs);
        self.emitByte(0xC1u8);
        self.emitModRmOpcode(0b101i32, lhs);
        self.emitByte(rhs.toUInt8());
    }

    fn sqrtssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x51u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn sqrtsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x51u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn sublrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x29u8);
        self.emitModRmReg(src, dest);
    }

    fn subqri(reg: Register, imm: Immediate) {
        self.emitAlu64Imm(reg, imm, 0b101i32, 0x2Du8);
    }

    fn subqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x29u8);
        self.emitModRmReg(src, dest);
    }

    fn subssrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF3u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Cu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn subsdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0xF2u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x5Cu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn testlrr(lhs: Register, rhs: Register) {
        self.emitRex32ModRmOptional(rhs, lhs);
        self.emitByte(0x85u8);
        self.emitModRmReg(rhs, lhs);
    }

    fn testlri(lhs: Register, imm: Immediate) {
        assert(imm.isInt32());

        if imm.isUInt8() {
            if lhs == RAX {
                self.emitByte(0xA8u8);
            } else if lhs.value < 4i32 {
                self.emitByte(0xF6u8);
                self.emitModRmOpcode(0b000i32, lhs);
            } else {
                self.emitRex(false, false, false, lhs.needsRexBit());
                self.emitByte(0xF6u8);
                self.emitModRmOpcode(0b000i32, lhs);
            }
            self.emitByte(imm.toUInt8());
        } else if lhs == RAX {
            self.emitByte(0xA9u8);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitByte(0xF7u8);
            self.emitModRmOpcode(0b000i32, lhs);
            self.emitInt32(imm.toInt32());
        }
    }

    fn testlar(lhs: Address, rhs: Register) {
        self.emitRex32ModRmAddressOptional(rhs, lhs);
        self.emitByte(0x85u8);
        self.emitAddress(rhs.lowBits(), lhs);
    }

    fn testlai(lhs: Address, rhs: Immediate) {
        assert(rhs.isInt32());
        self.emitRex32AddressOptional(lhs);
        self.emitByte(0xF7u8);
        self.emitAddress(0b000i32, lhs);
        self.emitInt32(rhs.toInt32());
    }

    fn testqrr(lhs: Register, rhs: Register) {
        self.emitRex64ModRm(rhs, lhs);
        self.emitByte(0x85u8);
        self.emitModRmReg(rhs, lhs);
    }

    fn testqai(lhs: Address, rhs: Immediate) {
        assert(rhs.isInt32());
        self.emitRex64Address(lhs);
        self.emitByte(0xF7u8);
        self.emitAddress(0b000i32, lhs);
        self.emitInt32(rhs.toInt32());
    }

    fn testqar(lhs: Address, rhs: Register) {
        self.emitRex64ModRmAddress(rhs, lhs);
        self.emitByte(0x85u8);
        self.emitAddress(rhs.lowBits(), lhs);
    }

    fn tzcntlrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBCu8);
        self.emitModRmReg(dest, src);
    }

    fn tzcntqrr(dest: Register, src: Register) {
        self.emitByte(0xF3u8);
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0xBCu8);
        self.emitModRmReg(dest, src);
    }

    fn ucomissrr(dest: XmmRegister, src: XmmRegister) {
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Eu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn ucomisdrr(dest: XmmRegister, src: XmmRegister) {
        self.emitByte(0x66u8);
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x2Eu8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn xorlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x31u8);
        self.emitModRmReg(src, dest);
    }

    fn xorlri(lhs: Register, rhs: Immediate) {
        self.emitAlu32Imm(lhs, rhs, 0b110i32, 0x35u8);
    }

    fn xorpdra(dest: XmmRegister, src: Address) {
        self.emitByte(0x66u8);
        self.emitRexSseAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x57u8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn xorpsra(dest: XmmRegister, src: Address) {
        self.emitRexSseAddressOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x57u8);
        self.emitAddress(dest.lowBits(), src);
    }

    fn xorpsrr(dest: XmmRegister, src: XmmRegister) {
        self.emitRexSseModRmOptional(dest, src);
        self.emitByte(0x0Fu8);
        self.emitByte(0x57u8);
        self.emitModRmSseRegisters(dest, src);
    }

    fn xorqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x31u8);
        self.emitModRmReg(src, dest);
    }

    fn emitAlu64Imm(reg: Register, imm: Immediate, modrm_reg: Int32, rax_opcode: UInt8) {
        assert(imm.isInt32());
        self.emitRex64RmField(reg);

        if imm.isInt8() {
            self.emitByte(0x83u8);
            self.emitModRm(0b11i32, modrm_reg, reg.lowBits());
            self.emitByte(imm.toUInt8());
        } else if reg == RAX {
            self.emitByte(rax_opcode);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitByte(0x81u8);
            self.emitModRm(0b11i32, modrm_reg, reg.lowBits());
            self.emitInt32(imm.toInt32());
        }
    }

    fn emitAlu32Imm(reg: Register, imm: Immediate, modrm_reg: Int32, rax_opcode: UInt8) {
        assert(imm.isInt32());
        self.emitRex32RmFieldOptional(reg);

        if imm.isInt8() {
            self.emitByte(0x83u8);
            self.emitModRmOpcode(modrm_reg, reg);
            self.emitByte(imm.toUInt8());
        } else if reg == RAX {
            self.emitByte(rax_opcode);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitByte(0x81u8);
            self.emitModRmOpcode(modrm_reg, reg);
            self.emitInt32(imm.toInt32());
        }
    }

    fn emitRex32RmFieldOptional(reg: Register) {
        if reg.needsRexBit() {
            self.emitRex(false, false, false, true);
        }
    }

    fn emitRex64RmField(modrm_rm: Register) {
        self.emitRex(true, false, false, modrm_rm.needsRexBit());
    }

    fn emitRex64ModRm(modrm_reg: Register, modrm_rm: Register) {
        self.emitRex(true, modrm_reg.needsRexBit(), false, modrm_rm.needsRexBit());
    }

    fn emitRex32ModRmOptional(modrm_reg: Register, modrm_rm: Register) {
        if modrm_reg.needsRexBit() || modrm_rm.needsRexBit() {
            self.emitRex(false, modrm_reg.needsRexBit(), false, modrm_rm.needsRexBit());
        }
    }

    fn emitRex32ModRmByteOptional(modrm_reg: Register, modrm_rm: Register) {
        if modrm_reg.needsRexBit() || modrm_rm.needsRexBit() || modrm_rm.value > 3i32 {
            self.emitRex(false, modrm_reg.needsRexBit(), false, modrm_rm.needsRexBit());
        }
    }

    fn emitRex32ModRmAddressOptional(reg: Register, address: Address) {
        if address.rex != 0u8 || reg.needsRexBit() {
            let rex = 0x40i32 | address.rex.toInt32() | if reg.needsRexBit() { 0x04i32 } else { 0i32 };
            self.emitByte(rex.toUInt8());
        };
    }

    fn emitRex32ModRmAddressByteOptional(reg: Register, address: Address) {
        if address.rex != 0u8 || reg.value > 3i32 {
            let rex = 0x40i32 | address.rex.toInt32() | if reg.needsRexBit() { 0x04i32 } else { 0i32 };
            self.emitByte(rex.toUInt8());
        };
    }

    fn emitRex32AddressOptional(address: Address) {
        if address.rex != 0u8 {
            self.emitByte((0x40i32 | address.rex.toInt32()).toUInt8());
        }
    }

    fn emitRex64ModRmAddress(reg: Register, address: Address) {
        let rex = 0x48i32 | address.rex.toInt32() | if reg.needsRexBit() { 0x04i32 } else { 0i32 };
        self.emitByte(rex.toUInt8());
    }

    fn emitRex64Address(address: Address) {
        self.emitByte((0x48i32 | address.rex.toInt32()).toUInt8());
    }

    fn emitRex64() {
        self.emitRex(true, false, false, false);
    }

    fn emitRexSseModRmOptional(reg: XmmRegister, rm: XmmRegister) {
        if reg.needsRexBit() || rm.needsRexBit() {
            self.emitRex(false, reg.needsRexBit(), false, rm.needsRexBit());
        }
    }

    fn emitRexSseAddressOptional(reg: XmmRegister, address: Address) {
        if reg.needsRexBit() || address.rex != 0u8 {
            let value = 0x40i32 | address.rex.toInt32() | if reg.needsRexBit() { 0x04i32 } else { 0i32 };
            self.emitByte(value.toUInt8());
        }
    }

    fn emitRexOptional(w: Bool, r: Bool, x: Bool, b: Bool) {
        if w || r || x || b {
            self.emitRex(w, r, x, b);
        }
    }

    fn emitRex(w: Bool, r: Bool, x: Bool, b: Bool) {
        // w - 64-bit width
        // r - extension of modrm-reg field
        // x - extension of sib index field
        // b - extension of modrm-rm/sib base/opcode reg field
        let opcode = 0x40i32 | w.toInt32() << 3i32 | r.toInt32() << 2i32 | x.toInt32() << 1i32 | b.toInt32();
        self.emitByte(opcode.toUInt8());
    }

    fn emitAddress(reg_or_opcode: Int32, address: Address) {
        assert(reg_or_opcode < 8i32);

        self.emitByte((reg_or_opcode << 3i32 | address.bytes(0i64).toInt32()).toUInt8());

        let mut i = 1i64;

        while i < address.length {
            self.emitByte(address.bytes(i));
            i = i + 1i64;
        }
    }

    fn emitModRmReg(reg: Register, rm: Register) {
        self.emitModRm(0b11i32, reg.lowBits(), rm.lowBits());
    }

    fn emitModRmOpcode(opcode: Int32, rm: Register) {
        self.emitModRm(0b11i32, opcode, rm.lowBits());
    }

    fn emitModRmSseRegisters(reg: XmmRegister, rm: XmmRegister) {
        self.emitModRm(0b11i32, reg.lowBits(), rm.lowBits());
    }

    fn emitModRm(mode: Int32, reg: Int32, rm: Int32) {
        assert(mode < 4i32 && reg < 8i32 && rm < 8i32);
        self.emitByte((mode << 6i32 | reg << 3i32 | rm).toUInt8());
    }

    fn emitSib(scale: Int32, index: Int32, base: Int32) {
        assert(scale < 4i32);
        assert(index < 8i32);
        assert(base < 8i32);
        self.emitByte((scale << 6i32 | index << 3i32 | base).toUInt8());
    }

    fn emitByte(value: UInt8) {
        self.buffer.emitByte(value);
    }

    fn emitInt32(value: Int32) {
        self.buffer.emitInt32(value);
    }

    fn emitInt64(value: Int64) {
        self.buffer.emitInt64(value);
    }

    fn emitJump(lbl: Label, kind: JumpDistance) {
        let pc = self.buffer.size();
        self.jumps.push((pc, lbl, kind));
    }

    fn size(): Int64 {
        self.buffer.size()
    }

    pub fn finalize(): Array[UInt8] {
        self.resolveJumps();
        while self.buffer.size() % 16 != 0 {
            self.int3();
        }
        self.buffer.toArray()
    }

    pub fn finalizeTesting(): MachineCode {
        self.resolveJumps();
        MachineCode::new(self.buffer.toArray())
    }

    fn resolveJumps() {
        for (pc, lbl, distance) in self.jumps {
            assert(lbl.isBound());

            if distance == JumpDistance::Near {
                let distance = lbl.offset - (pc + 1i64);
                assert(-128i64 <= distance && distance <= 127i64);
                self.buffer.patchUInt8(pc, distance.toUInt8());
            } else {
                assert(distance == JumpDistance::Far);
                let distance = lbl.offset - (pc + 4i64);
                assert(distance.toInt32().toInt64() == distance);
                self.buffer.patchInt32(pc, distance.toInt32());
            }
        }

        self.jumps.clear();
    }
}

enum Condition {
    Overflow,
    NoOverflow,
    Below,
    NeitherAboveNorEqual,
    NotBelow,
    AboveOrEqual,
    Equal,
    Zero,
    NotEqual,
    NotZero,
    BelowOrEqual,
    NotAbove,
    NeitherBelowNorEqual,
    Above,
    Sign,
    NoSign,
    Parity,
    ParityEven,
    NoParity,
    ParityOdd,
    Less,
    NeitherGreaterNorEqual,
    NotLess,
    GreaterOrEqual,
    LessOrEqual,
    NotGreater,
    NeitherLessNorEqual,
    Greater,
}

impl Condition {
    fn toInt32(): Int32 {
        if self == Condition::Overflow {
            0b0000i32
        } else if self == Condition::NoOverflow {
            0b0001i32
        } else if self == Condition::Below {
            0b0010i32
        } else if self == Condition::NeitherAboveNorEqual {
            0b0010i32
        } else if self == Condition::NotBelow {
            0b0011i32
        } else if self == Condition::AboveOrEqual {
            0b0011i32
        } else if self == Condition::Equal {
            0b0100i32
        } else if self == Condition::Zero {
            0b0100i32
        } else if self == Condition::NotEqual {
            0b0101i32
        } else if self == Condition::NotZero {
            0b0101i32
        } else if self == Condition::BelowOrEqual {
            0b0110i32
        } else if self == Condition::NotAbove {
            0b0110i32
        } else if self == Condition::NeitherBelowNorEqual {
            0b0111i32
        } else if self == Condition::Above {
            0b0111i32
        } else if self == Condition::Sign {
            0b1000i32
        } else if self == Condition::NoSign {
            0b1001i32
        } else if self == Condition::Parity {
            0b1010i32
        } else if self == Condition::ParityEven {
            0b1010i32
        } else if self == Condition::NoParity {
            0b1011i32
        } else if self == Condition::ParityOdd {
            0b1011i32
        } else if self == Condition::Less {
            0b1100i32
        } else if self == Condition::NeitherGreaterNorEqual {
            0b1100i32
        } else if self == Condition::NotLess {
            0b1101i32
        } else if self == Condition::GreaterOrEqual {
            0b1101i32
        } else if self == Condition::LessOrEqual {
            0b1110i32
        } else if self == Condition::NotGreater {
            0b1110i32
        } else if self == Condition::NeitherLessNorEqual {
            0b1111i32
        } else if self == Condition::Greater {
            0b1111i32
        } else {
            unreachable[Int32]()
        }
    }
}

struct Immediate(value: Int64)

impl Immediate {
    fn isInt8(): Bool {
        let limit = 1i64 << 7i32;
        -limit <= self.value && self.value < limit
    }

    fn isUInt8(): Bool {
        0i64 <= self.value && self.value < 256i64
    }

    fn isInt32(): Bool {
        let limit = 1i64 << 32i32;
        -limit <= self.value && self.value < limit
    }

    fn isUInt32(): Bool {
        let limit = 1i64 << 32i32;
        0i64 <= self.value && self.value < limit
    }

    fn toUInt8(): UInt8 {
        self.value.toUInt8()
    }

    fn toInt32(): Int32 {
        self.value.toInt32()
    }

    fn toInt64(): Int64 {
        self.value
    }
}

enum ScaleFactor {
    One,
    Two,
    Four,
    Eight,
}

impl ScaleFactor {
    fn value(): Int32 {
        if self == ScaleFactor::One {
            0i32
        } else if self == ScaleFactor::Two {
            1i32
        } else if self == ScaleFactor::Four {
            2i32
        } else if self == ScaleFactor::Eight {
            3i32
        } else {
            unreachable[Int32]()
        }
    }
}

class Address {
    rex: UInt8,
    length: Int64,
    bytes: Array[UInt8],
}

impl Address {
    static fn new(): Address {
        Address(0u8, 0, Array[UInt8]::zero(6i64))
    }

    fn set_modrm(mode: Int32, reg: Register) {
        assert(self.length == 0i64);
        assert(0i32 <= mode && mode < 4i32);

        if reg.needsRexBit() {
            self.rex = (self.rex.toInt32() | 0x41i32).toUInt8();
        }

        self.bytes(0i64) = (mode << 6i32 | reg.lowBits()).toUInt8();
        self.length = self.length + 1i64;
    }

    fn set_sib(scale: ScaleFactor, index: Register, base: Register) {
        assert(self.length == 1i64);

        if base.needsRexBit() {
            self.rex = (self.rex.toInt32() | 0x41i32).toUInt8();
        }

        if index.needsRexBit() {
            self.rex = (self.rex.toInt32() | 0x42i32).toUInt8();
        }

        self.bytes(1i64) = (scale.value() << 6i32 | index.lowBits() << 3i32 | base.lowBits()).toUInt8();
        self.length = self.length + 1i64;
    }

    fn set_disp8(imm: Int32) {
        assert(self.length == 1i64 || self.length == 2i64);
        self.bytes(self.length) = imm.toUInt8();
        self.length = self.length + 1i64;
    }

    fn set_disp32(imm: Int32) {
        assert(self.length == 1i64 || self.length == 2i64);
        self.bytes(self.length) = imm.toUInt8();
        self.bytes(self.length + 1i64) = (imm >> 8i32).toUInt8();
        self.bytes(self.length + 2i64) = (imm >> 16i32).toUInt8();
        self.bytes(self.length + 3i64) = (imm >> 24i32).toUInt8();
        self.length = self.length + 4i64;
    }

    static fn offset(base: Register, offset: Int32): Address {
        let address = Address::new();

        let mode = if offset == 0i32 && base != RBP && base != R13 {
            0b00i32
        } else if -128i32 <= offset && offset < 128i32 {
            0b01i32
        } else {
            0b10i32
        };

        address.set_modrm(mode, base);

        if base == RSP {
            address.set_sib(ScaleFactor::One, RSP, base);
        }

        if mode == 0b00i32 {
            // nothing to do
        } else if mode == 0b01i32 {
            address.set_disp8(offset);
        } else if mode == 0b10i32 {
            address.set_disp32(offset);
        } else {
            unreachable[()]();
        }

        address
    }

    static fn index(index: Register, factor: ScaleFactor, disp: Int32): Address {
        let address = Address::new();

        address.set_modrm(0b00i32, RSP);
        assert(index != RSP);

        address.set_sib(factor, index, RBP);
        address.set_disp32(disp);

        address
    }

    static fn array(base: Register, index: Register, factor: ScaleFactor, disp: Int32): Address {
        let address = Address::new();

        let mode = if disp == 0i32 && base != RBP && base != R13 {
            0b00i32
        } else if -128i32 <= disp && disp < 128i32 {
            0b01i32
        } else {
            0b10i32
        };

        address.set_modrm(mode, RSP);
        assert(index != RSP);

        address.set_sib(factor, index, base);

        if mode == 0b00i32 {
            // nothing to do
        } else if mode == 0b01i32 {
            address.set_disp8(disp);
        } else if mode == 0b10i32 {
            address.set_disp32(disp);
        } else {
            unreachable[()]();
        }

        address
    }

    static fn rip(disp: Int32): Address {
        let address = Address::new();

        address.set_modrm(0b00i32, RBP);
        address.set_disp32(disp);

        address
    }
}

@Test
fn testConditionCodes() {
    assert(Condition::Overflow.toInt32() == 0b0000i32);

    assert(Condition::NoOverflow.toInt32() == 0b0001i32);

    assert(Condition::Below.toInt32() == 0b0010i32);
    assert(Condition::NeitherAboveNorEqual.toInt32() == 0b0010i32);

    assert(Condition::NotBelow.toInt32() == 0b0011i32);
    assert(Condition::AboveOrEqual.toInt32() == 0b0011i32);

    assert(Condition::Equal.toInt32() == 0b0100i32);
    assert(Condition::Zero.toInt32() == 0b0100i32);

    assert(Condition::NotEqual.toInt32() == 0b0101i32);
    assert(Condition::NotZero.toInt32() == 0b0101i32);

    assert(Condition::BelowOrEqual.toInt32() == 0b0110i32);
    assert(Condition::NotAbove.toInt32() == 0b0110i32);

    assert(Condition::NeitherBelowNorEqual.toInt32() == 0b0111i32);
    assert(Condition::Above.toInt32() == 0b0111i32);

    assert(Condition::Sign.toInt32() == 0b1000i32);

    assert(Condition::NoSign.toInt32() == 0b1001i32);

    assert(Condition::Parity.toInt32() == 0b1010i32);
    assert(Condition::ParityEven.toInt32() == 0b1010i32);

    assert(Condition::NoParity.toInt32() == 0b1011i32);
    assert(Condition::ParityOdd.toInt32() == 0b1011i32);

    assert(Condition::Less.toInt32() == 0b1100i32);
    assert(Condition::NeitherGreaterNorEqual.toInt32() == 0b1100i32);

    assert(Condition::NotLess.toInt32() == 0b1101i32);
    assert(Condition::GreaterOrEqual.toInt32() == 0b1101i32);

    assert(Condition::LessOrEqual.toInt32() == 0b1110i32);
    assert(Condition::NotGreater.toInt32() == 0b1110i32);

    assert(Condition::NeitherLessNorEqual.toInt32() == 0b1111i32);
    assert(Condition::Greater.toInt32() == 0b1111i32);

}

impl Register {
    fn lowBits(): Int32 { self.value & 0b111i32 }
    fn needsRexBit(): Bool { self.value > 7i32 }
}

@Test
fn testAsmRegisters() {
    assert(RAX.lowBits() == 0i32 && !RAX.needsRexBit());
    assert(RCX.lowBits() == 1i32 && !RCX.needsRexBit());
    assert(RDX.lowBits() == 2i32 && !RDX.needsRexBit());
    assert(RBX.lowBits() == 3i32 && !RBX.needsRexBit());
    assert(RSP.lowBits() == 4i32 && !RSP.needsRexBit());
    assert(RBP.lowBits() == 5i32 && !RBP.needsRexBit());
    assert(RSI.lowBits() == 6i32 && !RSI.needsRexBit());
    assert(RDI.lowBits() == 7i32 && !RDI.needsRexBit());

    assert(R8.lowBits() == 0i32 && R8.needsRexBit());
    assert(R9.lowBits() == 1i32 && R9.needsRexBit());
    assert(R10.lowBits() == 2i32 && R10.needsRexBit());
    assert(R11.lowBits() == 3i32 && R11.needsRexBit());
    assert(R12.lowBits() == 4i32 && R12.needsRexBit());
    assert(R13.lowBits() == 5i32 && R13.needsRexBit());
    assert(R14.lowBits() == 6i32 && R14.needsRexBit());
    assert(R15.lowBits() == 7i32 && R15.needsRexBit());
}

@Test
fn testAsmPushqr() {
    let asm = AssemblerX64::new();
    asm.pushqr(RAX);
    asm.pushqr(RSP);
    asm.pushqr(R8);
    asm.pushqr(R15);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x50u8);
    assertAsm(buffer, 0x54u8);
    assertAsm(buffer, 0x41u8, 0x50u8);
    assertAsm(buffer, 0x41u8, 0x57u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmPopqr() {
    let asm = AssemblerX64::new();
    asm.popqr(RAX);
    asm.popqr(RSP);
    asm.popqr(R8);
    asm.popqr(R15);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x58u8);
    assertAsm(buffer, 0x5Cu8);
    assertAsm(buffer, 0x41u8, 0x58u8);
    assertAsm(buffer, 0x41u8, 0x5Fu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqrr() {
    let asm = AssemblerX64::new();
    asm.movqrr(R15, RAX);
    asm.movqrr(RAX, R15);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x49u8, 0x89u8, 0xC7u8);
    assertAsm(buffer, 0x4Cu8, 0x89u8, 0xF8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovlrr() {
    let asm = AssemblerX64::new();
    asm.movlrr(R15, RAX);
    asm.movlrr(RAX, R15);
    asm.movlrr(RCX, RAX);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x41u8, 0x89u8, 0xC7u8);
    assertAsm(buffer, 0x44u8, 0x89u8, 0xF8u8);
    assertAsm(buffer, 0x89u8, 0xC1u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAddqrr() {
    let asm = AssemblerX64::new();
    asm.addqrr(RAX, RBX);
    asm.addqrr(RAX, R12);
    asm.addqrr(R12, RAX);
    asm.addqrr(R15, RSP);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x48u8, 0x01u8, 0xD8u8);
    assertAsm(buffer, 0x4Cu8, 0x01u8, 0xE0u8);
    assertAsm(buffer, 0x49u8, 0x01u8, 0xC4u8);
    assertAsm(buffer, 0x49u8, 0x01u8, 0xE7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAddlrr() {
    let asm = AssemblerX64::new();
    asm.addlrr(RAX, RBX);
    asm.addlrr(RCX, R15);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x01u8, 0xD8u8);
    assertAsm(buffer, 0x44u8, 0x01u8, 0xF9u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAddqri() {
    let asm = AssemblerX64::new();
    asm.addqri(RAX, Immediate(0x11i64));
    asm.addqri(R15, Immediate(0x11i64));
    asm.addqri(RAX, Immediate(0x2211i64));
    asm.addqri(RCX, Immediate(0x2211i64));
    asm.addqri(R15, Immediate(0x2211i64));
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x48u8, 0x83u8, 0xC0u8, 0x11u8);
    assertAsm(buffer, 0x49u8, 0x83u8, 0xC7u8, 0x11u8);
    assertAsm(buffer, 0x48u8, 0x05u8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsm(buffer, 0x48u8, 0x81u8, 0xC1u8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x81u8, 0xC7u8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSubqrr() {
    let asm = AssemblerX64::new();
    asm.subqrr(RAX, RBX);
    asm.subqrr(RCX, R15);
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x48u8, 0x29u8, 0xD8u8);
    assertAsm(buffer, 0x4Cu8, 0x29u8, 0xF9u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSubqri() {
    let asm = AssemblerX64::new();
    asm.subqri(RAX, Immediate(0x11i64));
    asm.subqri(R15, Immediate(0x11i64));
    asm.subqri(RAX, Immediate(0x2211i64));
    asm.subqri(RCX, Immediate(0x2211i64));
    asm.subqri(R15, Immediate(0x2211i64));
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x48u8, 0x83u8, 0xE8u8, 0x11u8);
    assertAsm(buffer, 0x49u8, 0x83u8, 0xEFu8, 0x11u8);
    assertAsm(buffer, 0x48u8, 0x2Du8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsm(buffer, 0x48u8, 0x81u8, 0xE9u8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x81u8, 0xEFu8, 0x11u8, 0x22u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmRetq() {
    let asm = AssemblerX64::new();
    asm.retq();
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0xC3u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmNop() {
    let asm = AssemblerX64::new();
    asm.nop();
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x90u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCdqCqo() {
    let asm = AssemblerX64::new();
    asm.cdq();
    asm.cqo();
    let buffer = asm.finalizeTesting();
    assertAsm(buffer, 0x99u8);
    assertAsm(buffer, 0x48u8, 0x99u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmOrlrr() {
    let asm = AssemblerX64::new();
    asm.orlrr(RAX, R15);
    asm.orlrr(RAX, RCX);
    asm.orlrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x44u8, 0x09u8, 0xF8u8);
    assertAsm(buffer, 0x09u8, 0xC8u8);
    assertAsm(buffer, 0x41u8, 0x09u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmOrqrr() {
    let asm = AssemblerX64::new();
    asm.orqrr(RAX, R15);
    asm.orqrr(RAX, RCX);
    asm.orqrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x4Cu8, 0x09u8, 0xF8u8);
    assertAsm(buffer, 0x48u8, 0x09u8, 0xC8u8);
    assertAsm(buffer, 0x49u8, 0x09u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAndlrr() {
    let asm = AssemblerX64::new();
    asm.andlrr(RAX, R15);
    asm.andlrr(RAX, RCX);
    asm.andlrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x44u8, 0x21u8, 0xF8u8);
    assertAsm(buffer, 0x21u8, 0xC8u8);
    assertAsm(buffer, 0x41u8, 0x21u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAndqrr() {
    let asm = AssemblerX64::new();
    asm.andqrr(RAX, R15);
    asm.andqrr(RAX, RCX);
    asm.andqrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x4Cu8, 0x21u8, 0xF8u8);
    assertAsm(buffer, 0x48u8, 0x21u8, 0xC8u8);
    assertAsm(buffer, 0x49u8, 0x21u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorlrr() {
    let asm = AssemblerX64::new();
    asm.xorlrr(RAX, R15);
    asm.xorlrr(RAX, RCX);
    asm.xorlrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x44u8, 0x31u8, 0xF8u8);
    assertAsm(buffer, 0x31u8, 0xC8u8);
    assertAsm(buffer, 0x41u8, 0x31u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorqrr() {
    let asm = AssemblerX64::new();
    asm.xorqrr(RAX, R15);
    asm.xorqrr(RAX, RCX);
    asm.xorqrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x4Cu8, 0x31u8, 0xF8u8);
    assertAsm(buffer, 0x48u8, 0x31u8, 0xC8u8);
    assertAsm(buffer, 0x49u8, 0x31u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmplrr() {
    let asm = AssemblerX64::new();
    asm.cmplrr(RAX, R15);
    asm.cmplrr(R15, RBX);
    asm.cmplrr(RAX, RBX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x44u8, 0x39u8, 0xF8u8);
    assertAsm(buffer, 0x41u8, 0x39u8, 0xDFu8);
    assertAsm(buffer, 0x39u8, 0xD8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpqrr() {
    let asm = AssemblerX64::new();
    asm.cmpqrr(RAX, R15);
    asm.cmpqrr(R15, RBX);
    asm.cmpqrr(RAX, RBX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x4Cu8, 0x39u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0x39u8, 0xDFu8);
    assertAsm(buffer, 0x48u8, 0x39u8, 0xD8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmImullrr() {
    let asm = AssemblerX64::new();
    asm.imullrr(RAX, RBX);
    asm.imullrr(RCX, R15);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0xAFu8, 0xC3u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0xAFu8, 0xCFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmImulqrr() {
    let asm = AssemblerX64::new();
    asm.imulqrr(RAX, RBX);
    asm.imulqrr(RCX, R15);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xAFu8, 0xC3u8);
    assertAsm(buffer, 0x49u8, 0x0Fu8, 0xAFu8, 0xCFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmIdivlr() {
    let asm = AssemblerX64::new();
    asm.idivlr(RAX);
    asm.idivlr(R15);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF7u8, 0xF8u8);
    assertAsm(buffer, 0x41u8, 0xF7u8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmIdivqr() {
    let asm = AssemblerX64::new();
    asm.idivqr(RAX);
    asm.idivqr(R15);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xF7u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0xF7u8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSetccr() {
    let asm = AssemblerX64::new();
    asm.setccr(Condition::Equal, RAX);
    asm.setccr(Condition::NotEqual, R15);
    asm.setccr(Condition::GreaterOrEqual, RCX);
    asm.setccr(Condition::Greater, RDX);
    asm.setccr(Condition::LessOrEqual, RSI);
    asm.setccr(Condition::Less, RDI);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0x94u8, 0xC0u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0x95u8, 0xC7u8);
    assertAsm(buffer, 0x0Fu8, 0x9Du8, 0xC1u8);
    assertAsm(buffer, 0x0Fu8, 0x9Fu8, 0xC2u8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0x9Eu8, 0xC6u8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0x9Cu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCallr() {
    let asm = AssemblerX64::new();
    asm.callr(RAX);
    asm.callr(R15);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xFFu8, 0xD0u8);
    assertAsm(buffer, 0x41u8, 0xFFu8, 0xD7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmovl() {
    let asm = AssemblerX64::new();
    asm.cmovl(Condition::Equal, R15, RAX);
    asm.cmovl(Condition::NotEqual, RAX, R13);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x44u8, 0x0Fu8, 0x44u8, 0xF8u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0x45u8, 0xC5u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmovq() {
    let asm = AssemblerX64::new();
    asm.cmovq(Condition::Greater, RAX, RCX);
    asm.cmovq(Condition::Equal, R15, RAX);
    asm.cmovq(Condition::NotEqual, RAX, R13);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x0Fu8, 0x4Fu8, 0xC1u8);
    assertAsm(buffer, 0x4Cu8, 0x0Fu8, 0x44u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0x0Fu8, 0x45u8, 0xC5u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovlri() {
    let asm = AssemblerX64::new();
    asm.movlri(RAX, Immediate(2i64));
    asm.movlri(R14, Immediate(3i64));
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xB8u8, 2u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x41u8, 0xBEu8, 3u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqri() {
    let asm = AssemblerX64::new();
    asm.movqri(RAX, Immediate(1i64));
    asm.movqri(R15, Immediate(-1i64));
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xC7u8, 0xC0u8, 1u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0xC7u8, 0xC7u8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testTestlrr() {
    let asm = AssemblerX64::new();
    asm.testlrr(RAX, RAX);
    asm.testlrr(RSI, RAX);
    asm.testlrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x85u8, 0xC0u8);
    assertAsm(buffer, 0x85u8, 0xC6u8);
    assertAsm(buffer, 0x41u8, 0x85u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testTestqrr() {
    let asm = AssemblerX64::new();
    asm.testqrr(RAX, RAX);
    asm.testqrr(RSI, RAX);
    asm.testqrr(R15, RAX);
    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x85u8, 0xC0u8);
    assertAsm(buffer, 0x48u8, 0x85u8, 0xC6u8);
    assertAsm(buffer, 0x49u8, 0x85u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqra() {
    let asm = AssemblerX64::new();
    asm.movqra(RAX, Address::offset(RSP, 0i32));
    asm.movqra(RAX, Address::offset(RSP, 1i32));

    asm.movqra(R15, Address::offset(RSP, 0i32));
    asm.movqra(R15, Address::offset(RSP, 1i32));

    asm.movqra(R15, Address::offset(RSP, 127i32));
    asm.movqra(R15, Address::offset(RSP, -128i32));

    asm.movqra(R15, Address::offset(RSP, 128i32));
    asm.movqra(R15, Address::offset(RSP, -129i32));

    asm.movqra(RAX, Address::offset(RBP, 0i32));
    asm.movqra(RAX, Address::offset(RBP, 1i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x8Bu8, 0x04u8, 0x24u8);
    assertAsm(buffer, 0x48u8, 0x8Bu8, 0x44u8, 0x24u8, 1u8);

    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0x3Cu8, 0x24u8);
    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0x7Cu8, 0x24u8, 1u8);

    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0x7Cu8, 0x24u8, 0x7Fu8);
    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0x7Cu8, 0x24u8, 0x80u8);

    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0xBCu8, 0x24u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x4Cu8, 0x8Bu8, 0xBCu8, 0x24u8, 0x7Fu8, 0xFFu8, 0xFFu8, 0xFFu8);

    assertAsm(buffer, 0x48u8, 0x8Bu8, 0x45u8, 0u8);
    assertAsm(buffer, 0x48u8, 0x8Bu8, 0x45u8, 1u8);

    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqar() {
    let asm = AssemblerX64::new();
    asm.movqar(Address::offset(RBP, 0i32), RAX);
    asm.movqar(Address::offset(R13, 0i32), RAX);
    asm.movqar(Address::array(RAX, RBP, ScaleFactor::Four, 1i32), RAX);
    asm.movqar(Address::array(RBP, RAX, ScaleFactor::Eight, 0i32), RAX);
    asm.movqar(Address::array(R13, RAX, ScaleFactor::Eight, 0i32), RAX);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x89u8, 0x45u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x89u8, 0x45u8, 0u8);
    assertAsm(buffer, 0x48u8, 0x89u8, 0x44u8, 0xA8u8, 1u8);
    assertAsm(buffer, 0x48u8, 0x89u8, 0x44u8, 0xc5u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x89u8, 0x44u8, 0xc5u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovlra() {
    let asm = AssemblerX64::new();
    asm.movlra(RAX, Address::offset(RBP, 0i32));
    asm.movlra(RAX, Address::rip(0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x8Bu8, 0x45u8, 0u8);
    assertAsm(buffer, 0x8Bu8, 0x05u8, 0u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovlar() {
    let asm = AssemblerX64::new();
    asm.movlar(Address::offset(RBP, 0i32), RAX);
    asm.movlar(Address::offset(RBP, 0i32), R15);
    asm.movlar(Address::offset(R8, 0i32), R15);
    asm.movlar(Address::array(R8, R9, ScaleFactor::Four, 0i32), R15);
    asm.movlar(Address::array(RAX, RBP, ScaleFactor::Four, 1i32), RAX);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x89u8, 0x45u8, 0u8);
    assertAsm(buffer, 0x44u8, 0x89u8, 0x7Du8, 0u8);
    assertAsm(buffer, 0x45u8, 0x89u8, 0x38u8);
    assertAsm(buffer, 0x47u8, 0x89u8, 0x3Cu8, 0x88u8);
    assertAsm(buffer, 0x89u8, 0x44u8, 0xA8u8, 1u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmLea() {
    let asm = AssemblerX64::new();
    asm.lea(RAX, Address::offset(RAX, 0i32));
    asm.lea(RAX, Address::offset(RAX, 1i32));
    asm.lea(RAX, Address::offset(R8, 0i32));
    asm.lea(R8, Address::offset(RAX, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x8Du8, 0x00u8);
    assertAsm(buffer, 0x48u8, 0x8Du8, 0x40u8, 1u8);
    assertAsm(buffer, 0x49u8, 0x8Du8, 0x00u8);
    assertAsm(buffer, 0x4Cu8, 0x8Du8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovbar() {
    let asm = AssemblerX64::new();
    asm.movbar(Address::offset(RSP, 0i32), RAX);
    asm.movbar(Address::offset(RSP, 0i32), RSI);
    asm.movbar(Address::offset(RSP, 0i32), R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x88u8, 0x04u8, 0x24u8);
    assertAsm(buffer, 0x40u8, 0x88u8, 0x34u8, 0x24u8);
    assertAsm(buffer, 0x44u8, 0x88u8, 0x04u8, 0x24u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovbai() {
    let asm = AssemblerX64::new();
    asm.movbai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.movbai(Address::offset(RAX, 0i32), Immediate(127i64));
    asm.movbai(Address::offset(RAX, 0i32), Immediate(255i64));
    asm.movbai(Address::offset(RAX, 0i32), Immediate(-128i64));
    asm.movbai(Address::offset(RAX, 0i32), Immediate(128i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xC6u8, 0x00u8, 1u8);
    assertAsm(buffer, 0xC6u8, 0x00u8, 0x7Fu8);
    assertAsm(buffer, 0xC6u8, 0x00u8, 0xFFu8);
    assertAsm(buffer, 0xC6u8, 0x00u8, 0x80u8);
    assertAsm(buffer, 0xC6u8, 0x00u8, 0x80u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqai() {
    let asm = AssemblerX64::new();
    asm.movqai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.movqai(Address::offset(R8, 0i32), Immediate(Int32::maxValue().toInt64()));
    asm.movqai(Address::offset(RDI, 0i32), Immediate(Int32::maxValue().toInt64()));
    asm.movqai(Address::offset(R15, 0i32), Immediate(Int32::minValue().toInt64()));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xC7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0xC7u8, 0x00u8, 0xFFu8, 0xFFu8, 0xFFu8, 0x7Fu8);
    assertAsm(buffer, 0x48u8, 0xC7u8, 0x07u8, 0xFFu8, 0xFFu8, 0xFFu8, 0x7Fu8);
    assertAsm(buffer, 0x49u8, 0xC7u8, 0x07u8, 0u8, 0u8, 0u8, 0x80u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovlai() {
    let asm = AssemblerX64::new();
    asm.movlai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.movlai(Address::offset(R8, 0i32), Immediate((1i64 << 32i32) - 1i64));
    asm.movlai(Address::offset(RDI, 0i32), Immediate(Int32::maxValue().toInt64()));
    asm.movlai(Address::offset(R15, 0i32), Immediate(Int32::minValue().toInt64()));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xC7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x41u8, 0xC7u8, 0x00u8, 0xFFu8, 0xFFu8, 0xFFu8, 0xFFu8);
    assertAsm(buffer, 0xC7u8, 0x07u8, 0xFFu8, 0xFFu8, 0xFFu8, 0x7Fu8);
    assertAsm(buffer, 0x41u8, 0xC7u8, 0x07u8, 0u8, 0u8, 0u8, 0x80u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTestlri() {
    let asm = AssemblerX64::new();
    asm.testlri(RAX, Immediate(1i64));
    asm.testlri(RCX, Immediate(255i64));
    asm.testlri(RDX, Immediate(1i64));
    asm.testlri(RBX, Immediate(1i64));

    asm.testlri(RSI, Immediate(1i64));
    asm.testlri(RDI, Immediate(1i64));
    asm.testlri(R8, Immediate(1i64));
    asm.testlri(R15, Immediate(1i64));

    asm.testlri(RAX, Immediate(256i64));
    asm.testlri(RDI, Immediate(256i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xA8u8, 1u8);
    assertAsm(buffer, 0xF6u8, 0xC1u8, 255u8);
    assertAsm(buffer, 0xF6u8, 0xC2u8, 1u8);
    assertAsm(buffer, 0xF6u8, 0xC3u8, 1u8);

    assertAsm(buffer, 0x40u8, 0xF6u8, 0xC6u8, 1u8);
    assertAsm(buffer, 0x40u8, 0xF6u8, 0xC7u8, 1u8);
    assertAsm(buffer, 0x41u8, 0xF6u8, 0xC0u8, 1u8);
    assertAsm(buffer, 0x41u8, 0xF6u8, 0xC7u8, 1u8);

    assertAsm(buffer, 0xA9u8, 0u8, 1u8, 0u8, 0u8);
    assertAsm(buffer, 0xF7u8, 0xC7u8, 0u8, 1u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTestlar() {
    let asm = AssemblerX64::new();
    asm.testlar(Address::offset(RDI, 1i32), RAX);
    asm.testlar(Address::offset(RDI, 0i32), RAX);

    asm.testlar(Address::offset(R8, 0i32), RAX);
    asm.testlar(Address::offset(R8, 1i32), RAX);
    asm.testlar(Address::offset(R8, 0i32), R15);

    asm.testlar(Address::offset(RAX, 0i32), R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x85u8, 0x47u8, 1u8);
    assertAsm(buffer, 0x85u8, 0x07u8);

    assertAsm(buffer, 0x41u8, 0x85u8, 0x00u8);
    assertAsm(buffer, 0x41u8, 0x85u8, 0x40u8, 1u8);
    assertAsm(buffer, 0x45u8, 0x85u8, 0x38u8);

    assertAsm(buffer, 0x44u8, 0x85u8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTestlai() {
    let asm = AssemblerX64::new();
    asm.testlai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.testlai(Address::offset(RAX, 1i32), Immediate(1i64));

    asm.testlai(Address::offset(R8, 0i32), Immediate(1i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0xF7u8, 0x40u8, 1u8, 1u8, 0u8, 0u8, 0u8);

    assertAsm(buffer, 0x41u8, 0xF7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTestqai() {
    let asm = AssemblerX64::new();
    asm.testqai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.testqai(Address::offset(RAX, 1i32), Immediate(1i64));

    asm.testqai(Address::offset(R8, 0i32), Immediate(1i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xF7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x48u8, 0xF7u8, 0x40u8, 1u8, 1u8, 0u8, 0u8, 0u8);

    assertAsm(buffer, 0x49u8, 0xF7u8, 0x00u8, 1u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTestqar() {
    let asm = AssemblerX64::new();
    asm.testqar(Address::offset(RDI, 1i32), RAX);
    asm.testqar(Address::offset(R8, 0i32), R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x85u8, 0x47u8, 1u8);
    assertAsm(buffer, 0x4Du8, 0x85u8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovzxbrr() {
    let asm = AssemblerX64::new();
    asm.movzxbrr(RAX, RAX);
    asm.movzxbrr(RAX, RDI);
    asm.movzxbrr(RDI, RAX);
    asm.movzxbrr(RAX, R15);
    asm.movzxbrr(R15, RBX);
    asm.movzxbrr(RCX, RSI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0xB6u8, 0xC0u8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0xB6u8, 0xC7u8);
    assertAsm(buffer, 0x0Fu8, 0xB6u8, 0xF8u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0xB6u8, 0xC7u8);
    assertAsm(buffer, 0x44u8, 0x0Fu8, 0xB6u8, 0xFBu8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0xB6u8, 0xCEu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovzxbra() {
    let asm = AssemblerX64::new();
    asm.movzxbra(RAX, Address::offset(RAX, 0i32));
    asm.movzxbra(R8, Address::offset(RAX, 0i32));
    asm.movzxbra(RAX, Address::offset(R8, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0xB6u8, 0x00u8);
    assertAsm(buffer, 0x44u8, 0x0Fu8, 0xB6u8, 0x00u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0xB6u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsxblrr() {
    let asm = AssemblerX64::new();
    asm.movsxblrr(RAX, RAX);
    asm.movsxblrr(RAX, R8);
    asm.movsxblrr(RSP, RAX);
    asm.movsxblrr(R15, RAX);

    asm.movsxblrr(RAX, RBX);
    asm.movsxblrr(RAX, RSP);
    asm.movsxblrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0xC0u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0xBEu8, 0xC0u8);
    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0xE0u8);
    assertAsm(buffer, 0x44u8, 0x0Fu8, 0xBEu8, 0xF8u8);

    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0xC3u8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0xBEu8, 0xC4u8);
    assertAsm(buffer, 0x40u8, 0x0Fu8, 0xBEu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testasmMovsxblra() {
    let asm = AssemblerX64::new();
    asm.movsxblra(RAX, Address::offset(RAX, 0i32));
    asm.movsxblra(R8, Address::offset(RAX, 0i32));
    asm.movsxblra(RSP, Address::offset(RAX, 0i32));
    asm.movsxblra(RDI, Address::offset(RAX, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0x00u8);
    assertAsm(buffer, 0x44u8, 0x0Fu8, 0xBEu8, 0x00u8);
    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0x20u8);
    assertAsm(buffer, 0x0Fu8, 0xBEu8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsxbqrr() {
    let asm = AssemblerX64::new();
    asm.movsxbqrr(RAX, RAX);
    asm.movsxbqrr(RAX, R8);
    asm.movsxbqrr(RSP, RAX);
    asm.movsxbqrr(R15, RAX);

    asm.movsxbqrr(RAX, RBX);
    asm.movsxbqrr(RAX, RSP);
    asm.movsxbqrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0xC0u8);
    assertAsm(buffer, 0x49u8, 0x0Fu8, 0xBEu8, 0xC0u8);
    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0xE0u8);
    assertAsm(buffer, 0x4Cu8, 0x0Fu8, 0xBEu8, 0xF8u8);

    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0xC3u8);
    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0xC4u8);
    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsxbqra() {
    let asm = AssemblerX64::new();
    asm.movsxbqra(RAX, Address::offset(RAX, 0i32));
    asm.movsxbqra(R8, Address::offset(RAX, 0i32));
    asm.movsxbqra(RSP, Address::offset(RAX, 0i32));
    asm.movsxbqra(RDI, Address::offset(RAX, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0x00u8);
    assertAsm(buffer, 0x4Cu8, 0x0Fu8, 0xBEu8, 0x00u8);
    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0x20u8);
    assertAsm(buffer, 0x48u8, 0x0Fu8, 0xBEu8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsxlqrr() {
    let asm = AssemblerX64::new();
    asm.movsxlqrr(R15, RAX);
    asm.movsxlqrr(RAX, R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x4Cu8, 0x63u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0x63u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovssrr() {
    let asm = AssemblerX64::new();
    asm.movssrr(XMM0, XMM1);
    asm.movssrr(XMM8, XMM1);
    asm.movssrr(XMM0, XMM9);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovssra() {
    let asm = AssemblerX64::new();
    asm.movssra(XMM0, Address::offset(RAX, 0i32));
    asm.movssra(XMM8, Address::offset(RAX, 0i32));

    asm.movssra(XMM0, Address::offset(R8, 0i32));
    asm.movssra(XMM8, Address::offset(R15, 0i32));

    asm.movssra(XMM9, Address::offset(RAX, 0i32));
    asm.movssra(XMM15, Address::offset(RAX, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x10u8, 0x00u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x10u8, 0x00u8);

    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x10u8, 0x00u8);
    assertAsm(buffer, 0xF3u8, 0x45u8, 0x0Fu8, 0x10u8, 0x07u8);

    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x10u8, 0x08u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x10u8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovssar() {
    let asm = AssemblerX64::new();
    asm.movssar(Address::offset(RAX, 0i32), XMM0);
    asm.movssar(Address::offset(RAX, 0i32), XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x11u8, 0x00u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x11u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsdrr() {
    let asm = AssemblerX64::new();
    asm.movsdrr(XMM0, XMM1);
    asm.movsdrr(XMM8, XMM1);
    asm.movsdrr(XMM0, XMM9);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x10u8, 0xC1u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsdra() {
    let asm = AssemblerX64::new();
    asm.movsdra(XMM0, Address::offset(RAX, 0i32));
    asm.movsdra(XMM8, Address::offset(RAX, 0i32));

    asm.movsdra(XMM0, Address::offset(R8, 0i32));
    asm.movsdra(XMM8, Address::offset(R15, 0i32));

    asm.movsdra(XMM9, Address::offset(RAX, 0i32));
    asm.movsdra(XMM15, Address::offset(RAX, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x10u8, 0x00u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x10u8, 0x00u8);

    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x10u8, 0x00u8);
    assertAsm(buffer, 0xF2u8, 0x45u8, 0x0Fu8, 0x10u8, 0x07u8);

    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x10u8, 0x08u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x10u8, 0x38u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovsdar() {
    let asm = AssemblerX64::new();
    asm.movsdar(Address::offset(RAX, 0i32), XMM0);
    asm.movsdar(Address::offset(RAX, 0i32), XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x11u8, 0x00u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x11u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAddssrr() {
    let asm = AssemblerX64::new();
    asm.addssrr(XMM0, XMM1);
    asm.addssrr(XMM3, XMM15);
    asm.addssrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x58u8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x58u8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x58u8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAddsdrr() {
    let asm = AssemblerX64::new();
    asm.addsdrr(XMM0, XMM1);
    asm.addsdrr(XMM3, XMM15);
    asm.addsdrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x58u8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x58u8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x58u8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSubssrr() {
    let asm = AssemblerX64::new();
    asm.subssrr(XMM0, XMM1);
    asm.subssrr(XMM3, XMM15);
    asm.subssrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x5Cu8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x5Cu8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x5Cu8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSubsdrr() {
    let asm = AssemblerX64::new();
    asm.subsdrr(XMM0, XMM1);
    asm.subsdrr(XMM3, XMM15);
    asm.subsdrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x5Cu8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x5Cu8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x5Cu8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMulssrr() {
    let asm = AssemblerX64::new();
    asm.mulssrr(XMM0, XMM1);
    asm.mulssrr(XMM3, XMM15);
    asm.mulssrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x59u8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x59u8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x59u8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMulsdrr() {
    let asm = AssemblerX64::new();
    asm.mulsdrr(XMM0, XMM1);
    asm.mulsdrr(XMM3, XMM15);
    asm.mulsdrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x59u8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x59u8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x59u8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmDivssrr() {
    let asm = AssemblerX64::new();
    asm.divssrr(XMM0, XMM1);
    asm.divssrr(XMM3, XMM15);
    asm.divssrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x5Eu8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x5Eu8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x5Eu8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmDivsdrr() {
    let asm = AssemblerX64::new();
    asm.divsdrr(XMM0, XMM1);
    asm.divsdrr(XMM3, XMM15);
    asm.divsdrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x5Eu8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x5Eu8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x5Eu8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmUcomissrr() {
    let asm = AssemblerX64::new();
    asm.ucomissrr(XMM1, XMM0);
    asm.ucomissrr(XMM15, XMM3);
    asm.ucomissrr(XMM4, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0x2Eu8, 0xC8u8);
    assertAsm(buffer, 0x44u8, 0x0Fu8, 0x2Eu8, 0xFBu8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0x2Eu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmUcomisdrr() {
    let asm = AssemblerX64::new();
    asm.ucomisdrr(XMM1, XMM0);
    asm.ucomisdrr(XMM15, XMM3);
    asm.ucomisdrr(XMM4, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x0Fu8, 0x2Eu8, 0xC8u8);
    assertAsm(buffer, 0x66u8, 0x44u8, 0x0Fu8, 0x2Eu8, 0xFBu8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x2Eu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmPxorrr() {
    let asm = AssemblerX64::new();
    asm.pxorrr(XMM1, XMM0);
    asm.pxorrr(XMM15, XMM3);
    asm.pxorrr(XMM4, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x0Fu8, 0xEFu8, 0xC8u8);
    assertAsm(buffer, 0x66u8, 0x44u8, 0x0Fu8, 0xEFu8, 0xFBu8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0xEFu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSqrtssrr() {
    let asm = AssemblerX64::new();
    asm.sqrtssrr(XMM1, XMM0);
    asm.sqrtssrr(XMM15, XMM3);
    asm.sqrtssrr(XMM4, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x51u8, 0xC8u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x51u8, 0xFBu8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x51u8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSqrtsdrr() {
    let asm = AssemblerX64::new();
    asm.sqrtsdrr(XMM1, XMM0);
    asm.sqrtsdrr(XMM15, XMM3);
    asm.sqrtsdrr(XMM4, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x51u8, 0xC8u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x51u8, 0xFBu8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x51u8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTzcntlrr() {
    let asm = AssemblerX64::new();
    asm.tzcntlrr(RDI, RAX);
    asm.tzcntlrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xBCu8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xBCu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmTzcntqrr() {
    let asm = AssemblerX64::new();
    asm.tzcntqrr(RDI, RAX);
    asm.tzcntqrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xBCu8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xBCu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmLzcntlrr() {
    let asm = AssemblerX64::new();
    asm.lzcntlrr(RDI, RAX);
    asm.lzcntlrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xBDu8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xBDu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmLzcntqrr() {
    let asm = AssemblerX64::new();
    asm.lzcntqrr(RDI, RAX);
    asm.lzcntqrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xBDu8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xBDu8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmPopcntlrr() {
    let asm = AssemblerX64::new();
    asm.popcntlrr(RDI, RAX);
    asm.popcntlrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xB8u8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0xB8u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmPopcntqrr() {
    let asm = AssemblerX64::new();
    asm.popcntqrr(RDI, RAX);
    asm.popcntqrr(RAX, RDI);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xB8u8, 0xF8u8);
    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0xB8u8, 0xC7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtss2sdrr() {
    let asm = AssemblerX64::new();
    asm.cvtss2sdrr(XMM0, XMM1);
    asm.cvtss2sdrr(XMM3, XMM15);
    asm.cvtss2sdrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x5Au8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x5Au8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x5Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtsd2ssrr() {
    let asm = AssemblerX64::new();
    asm.cvtsd2ssrr(XMM0, XMM1);
    asm.cvtsd2ssrr(XMM3, XMM15);
    asm.cvtsd2ssrr(XMM8, XMM4);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x5Au8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x5Au8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x5Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovdrx() {
    let asm = AssemblerX64::new();
    asm.movdrx(RDI, XMM0);
    asm.movdrx(R8, XMM0);
    asm.movdrx(R8, XMM7);
    asm.movdrx(R8, XMM8);
    asm.movdrx(R8, XMM15);
    asm.movdrx(R15, XMM0);
    asm.movdrx(R15, XMM7);
    asm.movdrx(R15, XMM8);
    asm.movdrx(R15, XMM15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x7Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x7Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x7Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x7Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x7Eu8, 0xFFu8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x7Eu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovdxr() {
    let asm = AssemblerX64::new();
    asm.movdxr(XMM0, RAX);
    asm.movdxr(XMM0, R8);
    asm.movdxr(XMM7, R8);
    asm.movdxr(XMM8, R8);
    asm.movdxr(XMM15, R8);
    asm.movdxr(XMM0, R15);
    asm.movdxr(XMM7, R15);
    asm.movdxr(XMM8, R15);
    asm.movdxr(XMM15, R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x6Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x6Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x6Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x41u8, 0x0Fu8, 0x6Eu8, 0xFFu8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x6Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x6Eu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqrx() {
    let asm = AssemblerX64::new();
    asm.movqrx(RDI, XMM0);
    asm.movqrx(R8, XMM0);
    asm.movqrx(R8, XMM7);
    asm.movqrx(R8, XMM8);
    asm.movqrx(R8, XMM15);
    asm.movqrx(R15, XMM0);
    asm.movqrx(R15, XMM7);
    asm.movqrx(R15, XMM8);
    asm.movqrx(R15, XMM15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x48u8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x7Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x7Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x7Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x7Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x7Eu8, 0xFFu8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x7Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x7Eu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmMovqxr() {
    let asm = AssemblerX64::new();
    asm.movqxr(XMM0, RAX);
    asm.movqxr(XMM0, R8);
    asm.movqxr(XMM7, R8);
    asm.movqxr(XMM8, R8);
    asm.movqxr(XMM15, R8);
    asm.movqxr(XMM0, R15);
    asm.movqxr(XMM7, R15);
    asm.movqxr(XMM8, R15);
    asm.movqxr(XMM15, R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x48u8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x6Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x6Eu8, 0xC0u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x6Eu8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x6Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x49u8, 0x0Fu8, 0x6Eu8, 0xFFu8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x6Eu8, 0xC7u8);
    assertAsm(buffer, 0x66u8, 0x4Du8, 0x0Fu8, 0x6Eu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorpsra() {
    let asm = AssemblerX64::new();
    asm.xorpsra(XMM0, Address::offset(RBP, -8i32));
    asm.xorpsra(XMM8, Address::offset(R8, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0x57u8, 0x45u8, 0xF8u8);
    assertAsm(buffer, 0x45u8, 0x0Fu8, 0x57u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorpsrr() {
    let asm = AssemblerX64::new();
    asm.xorpsrr(XMM0, XMM1);
    asm.xorpsrr(XMM7, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0x57u8, 0xC1u8);
    assertAsm(buffer, 0x41u8, 0x0Fu8, 0x57u8, 0xF8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorpdra() {
    let asm = AssemblerX64::new();
    asm.xorpdra(XMM0, Address::offset(RBP, -8i32));
    asm.xorpdra(XMM8, Address::offset(R8, 0i32));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x66u8, 0x0Fu8, 0x57u8, 0x45u8, 0xF8u8);
    assertAsm(buffer, 0x66u8, 0x45u8, 0x0Fu8, 0x57u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmXorlri() {
    let asm = AssemblerX64::new();
    asm.xorlri(RAX, Immediate(1i64));
    asm.xorlri(R8, Immediate(127i64));
    asm.xorlri(R15, Immediate(-128i64));

    asm.xorlri(RAX, Immediate(128i64));
    asm.xorlri(R8, Immediate(-129i64));
    asm.xorlri(R15, Immediate(128i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x83u8, 0xF0u8, 1u8);
    assertAsm(buffer, 0x41u8, 0x83u8, 0xF0u8, 0x7Fu8);
    assertAsm(buffer, 0x41u8, 0x83u8, 0xF7u8, 0x80u8);

    assertAsm(buffer, 0x35u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x41u8, 0x81u8, 0xF0u8, 0x7Fu8, 0xFFu8, 0xFFu8, 0xFFu8);
    assertAsm(buffer, 0x41u8, 0x81u8, 0xF7u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpbar() {
    let asm = AssemblerX64::new();
    asm.cmpbar(Address::offset(RAX, 0i32), RAX);
    asm.cmpbar(Address::offset(RAX, 0i32), RBX);
    asm.cmpbar(Address::offset(RAX, 0i32), RSP);
    asm.cmpbar(Address::offset(RAX, 0i32), RDI);
    asm.cmpbar(Address::offset(RAX, 0i32), R8);
    asm.cmpbar(Address::offset(R8, 0i32), RAX);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x38u8, 0x00u8);
    assertAsm(buffer, 0x38u8, 0x18u8);
    assertAsm(buffer, 0x40u8, 0x38u8, 0x20u8);
    assertAsm(buffer, 0x40u8, 0x38u8, 0x38u8);
    assertAsm(buffer, 0x44u8, 0x38u8, 0x00u8);
    assertAsm(buffer, 0x41u8, 0x38u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpbai() {
    let asm = AssemblerX64::new();
    asm.cmpbai(Address::offset(RAX, 0i32), Immediate(1i64));
    asm.cmpbai(Address::offset(RAX, 0i32), Immediate(127i64));
    asm.cmpbai(Address::offset(RAX, 0i32), Immediate(-128i64));
    asm.cmpbai(Address::offset(RAX, 0i32), Immediate(255i64));
    asm.cmpbai(Address::offset(R8, 0i32), Immediate(255i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x80u8, 0x38u8, 1u8);
    assertAsm(buffer, 0x80u8, 0x38u8, 0x7Fu8);
    assertAsm(buffer, 0x80u8, 0x38u8, 0x80u8);
    assertAsm(buffer, 0x80u8, 0x38u8, 0xFFu8);
    assertAsm(buffer, 0x41u8, 0x80u8, 0x38u8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmplri() {
    let asm = AssemblerX64::new();
    asm.cmplri(RAX, Immediate(0i64));
    asm.cmplri(R15, Immediate(0i64));
    asm.cmplri(R9, Immediate(0i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x83u8, 0xF8u8, 0u8);
    assertAsm(buffer, 0x41u8, 0x83u8, 0xFFu8, 0u8);
    assertAsm(buffer, 0x41u8, 0x83u8, 0xF9u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmplai() {
    let asm = AssemblerX64::new();
    asm.cmplai(Address::offset(RAX, 0i32), Immediate(127i64));
    asm.cmplai(Address::offset(RAX, 0i32), Immediate(-128i64));
    asm.cmplai(Address::offset(RAX, 0i32), Immediate(128i64));
    asm.cmplai(Address::offset(R8, 0i32), Immediate(128i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x83u8, 0x38u8, 0x7Fu8);
    assertAsm(buffer, 0x83u8, 0x38u8, 0x80u8);
    assertAsm(buffer, 0x81u8, 0x38u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x41u8, 0x81u8, 0x38u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmplar() {
    let asm = AssemblerX64::new();
    asm.cmplar(Address::offset(RBX, 1i32), RAX);
    asm.cmplar(Address::offset(RBX, 1i32), R10);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x39u8, 0x43u8, 1u8);
    assertAsm(buffer, 0x44u8, 0x39u8, 0x53u8, 1u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpqai() {
    let asm = AssemblerX64::new();
    asm.cmpqai(Address::offset(RAX, 0i32), Immediate(127i64));
    asm.cmpqai(Address::offset(RAX, 0i32), Immediate(-128i64));
    asm.cmpqai(Address::offset(RAX, 0i32), Immediate(128i64));
    asm.cmpqai(Address::offset(R8, 0i32), Immediate(128i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x83u8, 0x38u8, 0x7Fu8);
    assertAsm(buffer, 0x48u8, 0x83u8, 0x38u8, 0x80u8);
    assertAsm(buffer, 0x48u8, 0x81u8, 0x38u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x81u8, 0x38u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpqar() {
    let asm = AssemblerX64::new();
    asm.cmpqar(Address::offset(RBX, 1i32), RAX);
    asm.cmpqar(Address::offset(RBX, 256i32), RAX);
    asm.cmpqar(Address::offset(RDI, 1i32), RAX);
    asm.cmpqar(Address::offset(R9, 1i32), RAX);
    asm.cmpqar(Address::offset(RDI, 1i32), R10);
    asm.cmpqar(Address::rip(1i32), RAX);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x39u8, 0x43u8, 1u8);
    assertAsm(buffer, 0x48u8, 0x39u8, 0x83u8, 0u8, 1u8, 0u8, 0u8);
    assertAsm(buffer, 0x48u8, 0x39u8, 0x47u8, 1u8);
    assertAsm(buffer, 0x49u8, 0x39u8, 0x41u8, 1u8);
    assertAsm(buffer, 0x4Cu8, 0x39u8, 0x57u8, 1u8);
    assertAsm(buffer, 0x48u8, 0x39u8, 0x05u8, 1u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCmpqri() {
    let asm = AssemblerX64::new();
    asm.cmpqri(RAX, Immediate(127i64));
    asm.cmpqri(R15, Immediate(-128i64));
    asm.cmpqri(R9, Immediate(0i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x83u8, 0xF8u8, 0x7Fu8);
    assertAsm(buffer, 0x49u8, 0x83u8, 0xFFu8, 0x80u8);
    assertAsm(buffer, 0x49u8, 0x83u8, 0xF9u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmNotlr() {
    let asm = AssemblerX64::new();
    asm.notlr(RAX);
    asm.notlr(R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF7u8, 0xD0u8);
    assertAsm(buffer, 0x41u8, 0xF7u8, 0xD7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmNotqr() {
    let asm = AssemblerX64::new();
    asm.notqr(RAX);
    asm.notqr(R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xF7u8, 0xD0u8);
    assertAsm(buffer, 0x49u8, 0xF7u8, 0xD7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmNeglr() {
    let asm = AssemblerX64::new();
    asm.neglr(RAX);
    asm.neglr(R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF7u8, 0xD8u8);
    assertAsm(buffer, 0x41u8, 0xF7u8, 0xDFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmNegqr() {
    let asm = AssemblerX64::new();
    asm.negqr(RAX);
    asm.negqr(R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xF7u8, 0xD8u8);
    assertAsm(buffer, 0x49u8, 0xF7u8, 0xDFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmAndqri() {
    let asm = AssemblerX64::new();
    asm.andqri(RAX, Immediate(-8i64));
    asm.andqri(RAX, Immediate(128i64));
    asm.andqri(R9, Immediate(-8i64));
    asm.andqri(R9, Immediate(128i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0x83u8, 0xE0u8, 0xF8u8);
    assertAsm(buffer, 0x48u8, 0x25u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsm(buffer, 0x49u8, 0x83u8, 0xE1u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0x81u8, 0xE1u8, 0x80u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpr() {
    let asm = AssemblerX64::new();
    asm.jmpr(RAX);
    asm.jmpr(RDI);
    asm.jmpr(R8);
    asm.jmpr(R15);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xFFu8, 0xE0u8);
    assertAsm(buffer, 0xFFu8, 0xE7u8);
    assertAsm(buffer, 0x41u8, 0xFFu8, 0xE0u8);
    assertAsm(buffer, 0x41u8, 0xFFu8, 0xE7u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShrlri() {
    let asm = AssemblerX64::new();
    asm.shrlri(RAX, Immediate(2i64));
    asm.shrlri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xC1u8, 0xE8u8, 2u8);
    assertAsm(buffer, 0x41u8, 0xC1u8, 0xE8u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShrlr() {
    let asm = AssemblerX64::new();
    asm.shrlr(RAX);
    asm.shrlr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xD3u8, 0xE8u8);
    assertAsm(buffer, 0x41u8, 0xD3u8, 0xE8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShrqri() {
    let asm = AssemblerX64::new();
    asm.shrqri(RAX, Immediate(2i64));
    asm.shrqri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xC1u8, 0xE8u8, 2u8);
    assertAsm(buffer, 0x49u8, 0xC1u8, 0xE8u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShrqr() {
    let asm = AssemblerX64::new();
    asm.shrqr(RAX);
    asm.shrqr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xD3u8, 0xE8u8);
    assertAsm(buffer, 0x49u8, 0xD3u8, 0xE8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSarlri() {
    let asm = AssemblerX64::new();
    asm.sarlri(RAX, Immediate(2i64));
    asm.sarlri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xC1u8, 0xF8u8, 2u8);
    assertAsm(buffer, 0x41u8, 0xC1u8, 0xF8u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSarlr() {
    let asm = AssemblerX64::new();
    asm.sarlr(RAX);
    asm.sarlr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xD3u8, 0xF8u8);
    assertAsm(buffer, 0x41u8, 0xD3u8, 0xF8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSarqri() {
    let asm = AssemblerX64::new();
    asm.sarqri(RAX, Immediate(2i64));
    asm.sarqri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xC1u8, 0xF8u8, 2u8);
    assertAsm(buffer, 0x49u8, 0xC1u8, 0xF8u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmSarqr() {
    let asm = AssemblerX64::new();
    asm.sarqr(RAX);
    asm.sarqr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xD3u8, 0xF8u8);
    assertAsm(buffer, 0x49u8, 0xD3u8, 0xF8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShllri() {
    let asm = AssemblerX64::new();
    asm.shllri(RAX, Immediate(2i64));
    asm.shllri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xC1u8, 0xE0u8, 2u8);
    assertAsm(buffer, 0x41u8, 0xC1u8, 0xE0u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShllr() {
    let asm = AssemblerX64::new();
    asm.shllr(RAX);
    asm.shllr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xD3u8, 0xE0u8);
    assertAsm(buffer, 0x41u8, 0xD3u8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShlqri() {
    let asm = AssemblerX64::new();
    asm.shlqri(RAX, Immediate(2i64));
    asm.shlqri(R8, Immediate(2i64));

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xC1u8, 0xE0u8, 2u8);
    assertAsm(buffer, 0x49u8, 0xC1u8, 0xE0u8, 2u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmShlqr() {
    let asm = AssemblerX64::new();
    asm.shlqr(RAX);
    asm.shlqr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xD3u8, 0xE0u8);
    assertAsm(buffer, 0x49u8, 0xD3u8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmRollr() {
    let asm = AssemblerX64::new();
    asm.rollr(RAX);
    asm.rollr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xD3u8, 0xC0u8);
    assertAsm(buffer, 0x41u8, 0xD3u8, 0xC0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmRolqr() {
    let asm = AssemblerX64::new();
    asm.rolqr(RAX);
    asm.rolqr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xD3u8, 0xC0u8);
    assertAsm(buffer, 0x49u8, 0xD3u8, 0xC0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmRorlr() {
    let asm = AssemblerX64::new();
    asm.rorlr(RAX);
    asm.rorlr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xD3u8, 0xC8u8);
    assertAsm(buffer, 0x41u8, 0xD3u8, 0xC8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmRorqr() {
    let asm = AssemblerX64::new();
    asm.rorqr(RAX);
    asm.rorqr(R8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x48u8, 0xD3u8, 0xC8u8);
    assertAsm(buffer, 0x49u8, 0xD3u8, 0xC8u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtsi2ssdrr() {
    let asm = AssemblerX64::new();
    asm.cvtsi2ssdrr(XMM0, RCX);
    asm.cvtsi2ssdrr(XMM3, R15);
    asm.cvtsi2ssdrr(XMM8, RSP);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x2Au8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x2Au8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x2Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtsi2ssqrr() {
    let asm = AssemblerX64::new();
    asm.cvtsi2ssqrr(XMM0, RCX);
    asm.cvtsi2ssqrr(XMM3, R15);
    asm.cvtsi2ssqrr(XMM8, RSP);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0x2Au8, 0xC1u8);
    assertAsm(buffer, 0xF3u8, 0x49u8, 0x0Fu8, 0x2Au8, 0xDFu8);
    assertAsm(buffer, 0xF3u8, 0x4Cu8, 0x0Fu8, 0x2Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtsi2sddrr() {
    let asm = AssemblerX64::new();
    asm.cvtsi2sddrr(XMM0, RCX);
    asm.cvtsi2sddrr(XMM3, R15);
    asm.cvtsi2sddrr(XMM8, RSP);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x2Au8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x2Au8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x2Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvtsi2sdqrr() {
    let asm = AssemblerX64::new();
    asm.cvtsi2sdqrr(XMM0, RCX);
    asm.cvtsi2sdqrr(XMM3, R15);
    asm.cvtsi2sdqrr(XMM8, RSP);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x48u8, 0x0Fu8, 0x2Au8, 0xC1u8);
    assertAsm(buffer, 0xF2u8, 0x49u8, 0x0Fu8, 0x2Au8, 0xDFu8);
    assertAsm(buffer, 0xF2u8, 0x4Cu8, 0x0Fu8, 0x2Au8, 0xC4u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvttss2sidrr() {
    let asm = AssemblerX64::new();
    asm.cvttss2sidrr(RCX, XMM0);
    asm.cvttss2sidrr(R15, XMM3);
    asm.cvttss2sidrr(RSP, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x0Fu8, 0x2Cu8, 0xC8u8);
    assertAsm(buffer, 0xF3u8, 0x44u8, 0x0Fu8, 0x2Cu8, 0xFBu8);
    assertAsm(buffer, 0xF3u8, 0x41u8, 0x0Fu8, 0x2Cu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvttss2siqrr() {
    let asm = AssemblerX64::new();
    asm.cvttss2siqrr(RCX, XMM0);
    asm.cvttss2siqrr(R15, XMM3);
    asm.cvttss2siqrr(RSP, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF3u8, 0x48u8, 0x0Fu8, 0x2Cu8, 0xC8u8);
    assertAsm(buffer, 0xF3u8, 0x4Cu8, 0x0Fu8, 0x2Cu8, 0xFBu8);
    assertAsm(buffer, 0xF3u8, 0x49u8, 0x0Fu8, 0x2Cu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvttsd2sidrr() {
    let asm = AssemblerX64::new();
    asm.cvttsd2sidrr(RCX, XMM0);
    asm.cvttsd2sidrr(R15, XMM3);
    asm.cvttsd2sidrr(RSP, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x0Fu8, 0x2Cu8, 0xC8u8);
    assertAsm(buffer, 0xF2u8, 0x44u8, 0x0Fu8, 0x2Cu8, 0xFBu8);
    assertAsm(buffer, 0xF2u8, 0x41u8, 0x0Fu8, 0x2Cu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmCvttsd2siqrr() {
    let asm = AssemblerX64::new();
    asm.cvttsd2siqrr(RCX, XMM0);
    asm.cvttsd2siqrr(R15, XMM3);
    asm.cvttsd2siqrr(RSP, XMM8);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xF2u8, 0x48u8, 0x0Fu8, 0x2Cu8, 0xC8u8);
    assertAsm(buffer, 0xF2u8, 0x4Cu8, 0x0Fu8, 0x2Cu8, 0xFBu8);
    assertAsm(buffer, 0xF2u8, 0x49u8, 0x0Fu8, 0x2Cu8, 0xE0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpBackwardNear() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    asm.jmp(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xEBu8, 0xFEu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpBackwardStillNear() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    for x in std::range(0i32, 126i32) {
        asm.nop();
    }
    asm.jmp(lbl);

    let buffer = asm.finalizeTesting();

    assertAsmNop(buffer, 126i64);
    assertAsm(buffer, 0xEBu8, 0x80u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpBackwardAlreadyFar() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    for x in std::range(0i32, 127i32) {
        asm.nop();
    }
    asm.jmp(lbl);

    let buffer = asm.finalizeTesting();

    assertAsmNop(buffer, 127i64);
    assertAsm(buffer, 0xE9u8, 0x7Cu8, 0xFFu8, 0xFFu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpForward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createLabel();
    asm.jmp(lbl);
    asm.bindLabel(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xE9u8, 0u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpNearForward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createLabel();
    asm.jmpNear(lbl);
    asm.bindLabel(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xEBu8, 0u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJmpNearBackward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    asm.jmpNear(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0xEBu8, 0xFEu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccNearBackward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    asm.jccNear(Condition::Overflow, lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x70u8, 0xFEu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccNearForward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createLabel();
    asm.jccNear(Condition::Overflow, lbl);
    asm.bindLabel(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x70u8, 0x00u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccBackwardNear() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    asm.jcc(Condition::Overflow, lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x70u8, 0xFEu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccBackwardStillNear() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    for x in std::range(0i32, 126i32) {
        asm.nop();
    }
    asm.jcc(Condition::Overflow, lbl);

    let buffer = asm.finalizeTesting();

    assertAsmNop(buffer, 126i64);
    assertAsm(buffer, 0x70u8, 0x80u8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccBackwardAlreadyFar() {
    let asm = AssemblerX64::new();
    let lbl = asm.createAndBindLabel();
    for x in std::range(0i32, 127i32) {
        asm.nop();
    }
    asm.jcc(Condition::Overflow, lbl);

    let buffer = asm.finalizeTesting();

    assertAsmNop(buffer, 127i64);
    assertAsm(buffer, 0x0Fu8, 0x80u8, 0x7Bu8, 0xFFu8, 0xFFu8, 0xFFu8);
    assertAsmEnd(buffer);
}

@Test
fn testAsmJccForward() {
    let asm = AssemblerX64::new();
    let lbl = asm.createLabel();
    asm.jcc(Condition::Overflow, lbl);
    asm.bindLabel(lbl);

    let buffer = asm.finalizeTesting();

    assertAsm(buffer, 0x0Fu8, 0x80u8, 0u8, 0u8, 0u8, 0u8);
    assertAsmEnd(buffer);
}

fn assertAsmNop(code: MachineCode, length: Int64) {
    assert(length > 0i64);

    let mut idx = 0i64;
    while idx < length {
        assert(0x90u8 == code.bytes(code.start + idx));
        idx = idx + 1i64;
    }

    code.start = code.start + length;
}
