@test fun testSsaGenRetVoid(_x: Testing) {
    let fct = bytecode("bcSsaGenRetVoid");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  1: Ret.Void
");
}

fun bcSsaGenRetVoid() {}

@test fun testSsaGenRetIntConst(_x: Testing) {
    let fct = bytecode("bcSsaGenRetIntConst");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  1: Int32(4711) [2]
  2: Ret.Int32 1
");
}

fun bcSsaGenRetIntConst() -> Int32 { 4711 }

@test fun testSsaGenRetInt64Const(_x: Testing) {
    let fct = bytecode("bcSsaGenRetInt64Const");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  1: Int64(4711) [2]
  2: Ret.Int64 1
");
}

fun bcSsaGenRetInt64Const() -> Int64 { 4711L }

@test fun testSsaGenIdInt(_x: Testing) {
    let fct = bytecode("bcSsaGenIdInt");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [2]
  1: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  2: Ret.Int32 0
");
}

fun bcSsaGenIdInt(x: Int32) -> Int32 { x }

@test fun testSsaGenAddIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenAddIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [3]
  1: Arg.Int32(1) [3]
  2: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  3: Add.Int32 0, 1 [4]
  4: Ret.Int32 3
");
}

fun bcSsaGenAddIntArguments(a: Int32, b: Int32) -> Int32 { a + b }

@test fun testSsaGenAddFloat32Arguments(_x: Testing) {
    let fct = bytecode("bcSsaGenAddFloat32Arguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Float32(0) [3]
  1: Arg.Float32(1) [3]
  2: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  3: Add.Float32 0, 1 [4]
  4: Ret.Float32 3
");
}

fun bcSsaGenAddFloat32Arguments(a: Float32, b: Float32) -> Float32 { a + b }

@test fun testSsaGenMultipleAssignments(_x: Testing) {
    let fct = bytecode("bcSsaGenMultipleAssignments");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [6]
  1: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  2: Int32(42) [3, 3]
  3: Add.Int32 2, 2 [5]
  4: Int32(23) [5]
  5: Add.Int32 3, 4 [6, 7]
  6: Add.Int32 5, 0 [7]
  7: Add.Int32 5, 6 [8]
  8: Ret.Int32 7
");
}

fun bcSsaGenMultipleAssignments(d: Int32) -> Int32 {
    var a = 42;
    var b = a;
    var c = a + b;

    a = c + 23;
    c = a + d;

    a + c
}

@test fun testSsaGenSubIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenSubIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [3]
  1: Arg.Int32(1) [3]
  2: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  3: Sub.Int32 0, 1 [4]
  4: Ret.Int32 3
")
}

fun bcSsaGenSubIntArguments(a: Int32, b: Int32) -> Int32 { a - b }

@test fun testSsaGenNegIntArgument(_x: Testing) {
    let fct = bytecode("bcSsaGenNegIntArgument");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [2]
  1: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  2: Neg.Int32 0 [3]
  3: Ret.Int32 2
");
}

fun bcSsaGenNegIntArgument(a: Int32) -> Int32 { -a }

@test fun testSsaGenMulIntArguments(_x: Testing) {
    let fct = bytecode("bcSsaGenMulIntArguments");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [3]
  1: Arg.Int32(1) [3]
  2: Goto(2)
Block 1: pred = [2]
Block 2: pred = [0] succ = [1]
  3: Mul.Int32 0, 1 [4]
  4: Ret.Int32 3
");
}

fun bcSsaGenMulIntArguments(a: Int32, b: Int32) -> Int32 { a * b }

@test fun testSsaGenSimpleIf(_x: Testing) {
    let fct = bytecode("bcSsaGenSimpleIf");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Bool(0) [3]
  1: Goto(2)
Block 1: pred = [3]
Block 2: pred = [0] succ = [3, 4]
  2: Int32(1) [6]
  3: If(4, 3) 0
Block 3: pred = [2, 4] succ = [1]
  6: Phi 2, 4 [7]
  7: Ret.Int32 6
Block 4: pred = [2] succ = [3]
  4: Int32(10) [6]
  5: Goto(3)
");
}

fun bcSsaGenSimpleIf(a: Bool) -> Int32 {
    var result = 1;
    if a { result = 10; }
    return result;
}

@test fun testSsaGenIfReturnInBothBranches(_x: Testing) {
    let fct = bytecode("bcSsaGenIfReturnInBothBranches");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Bool(0) [2]
  1: Goto(2)
Block 1: pred = [4, 3]
Block 2: pred = [0] succ = [3, 4]
  2: If(4, 3) 0
Block 3: pred = [2] succ = [1]
  5: Int32(2) [6]
  6: Ret.Int32 5
Block 4: pred = [2] succ = [1]
  3: Int32(1) [4]
  4: Ret.Int32 3
");
}

fun bcSsaGenIfReturnInBothBranches(a: Bool) -> Int32 {
    if a { return 1; } else { return 2; }
}

@test fun testSsaGenIfWithConditionalAssignment(_x: Testing) {
    let fct = bytecode("bcSsaGenIfWithConditionalAssignment");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Bool(0) [4]
  1: Goto(2)
Block 1: pred = [3]
Block 2: pred = [0] succ = [3, 4]
  2: Int32(1) [7]
  3: Int32(27) [9]
  4: If(4, 3) 0
Block 3: pred = [2, 4] succ = [1]
  7: Phi 2, 5 [9]
  9: Add.Int32 7, 3 [10]
  10: Ret.Int32 9
Block 4: pred = [2] succ = [3]
  5: Int32(4) [7]
  6: Goto(3)
");
}

fun bcSsaGenIfWithConditionalAssignment(a: Bool) -> Int32 {
    var x = 1;
    var y = 27;
    if a { x = 4; }
    x + y
}

@test fun testSsaGenWhileCountDown(_x: Testing) {
    let fct = bytecode("bcSsaGenWhileCountDown");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [4]
  1: Goto(2)
Block 1: pred = [3]
Block 2: pred = [0] succ = [5]
  2: Goto(5)
Block 3: pred = [5] succ = [1]
  10: Ret.Int32 4
Block 4: pred = [5] succ = [5]
  7: Int32(1) [8]
  8: Sub.Int32 4, 7 [4]
  9: Goto(5)
Block 5: pred = [2, 4] succ = [3, 4]
  4: Phi 0, 8 [5, 8, 10]
  3: Int32(0) [5]
  5: Greater.Int32 4, 3 [6]
  6: If(4, 3) 5
");
}

fun bcSsaGenWhileCountDown(x: Int32) -> Int32 {
    var x = x;
    while x > 0 { x = x - 1; }
    x
}

@test fun testSsaGenWhileCountDownWithSum(_x: Testing) {
    let fct = bytecode("bcSsaGenWhileCountDownWithSum");
    let graph = createGraph(fct);

    assertGraph(graph, "
Block 0: succ = [2]
  0: Arg.Int32(0) [5]
  1: Goto(2)
Block 1: pred = [3]
Block 2: pred = [0] succ = [5]
  2: Int32(0) [10]
  3: Goto(5)
Block 3: pred = [5] succ = [1]
  13: Ret.Int32 10
Block 4: pred = [5] succ = [5]
  8: Int32(1) [9]
  9: Sub.Int32 5, 8 [11, 5]
  11: Add.Int32 10, 9 [10]
  12: Goto(5)
Block 5: pred = [2, 4] succ = [3, 4]
  5: Phi 0, 9 [6, 9]
  10: Phi 2, 11 [11, 13]
  4: Int32(0) [6]
  6: Greater.Int32 5, 4 [7]
  7: If(4, 3) 6
");
}

fun bcSsaGenWhileCountDownWithSum(x: Int32) -> Int32 {
    var x = x;
    var sum = 0;
    while x > 0 {
        x = x - 1;
        sum = sum + x;
    }
    sum
}
