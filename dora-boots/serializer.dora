use package::bytecode::BytecodeType;
use package::bytecode::opcode as opc;
use package::interface::{Address, CodeDescriptor, CommentTable, ConstPool, ConstPoolEntry, ConstPoolValue, GcPoint, GcPointTable, LazyCompilationData, LazyCompilationSite, LocationTable};

pub fn encodeCodeDescriptor(writer: ByteWriter, descriptor: CodeDescriptor) {
    encodeConstPool(writer, descriptor.constPool);
    encodeArrayUInt8(writer, descriptor.code);
    encodeLazyCompilationTable(writer, descriptor.lazyCompilation);
    encodeGcPointTable(writer, descriptor.gcPoints);
    encodeLocationTable(writer, descriptor.locations);
    encodeCommentTable(writer, descriptor.comments);
}

fn encodeConstPool(writer: ByteWriter, table: ConstPool) {
    writer.emitInt32(table.size().toInt32());

    for entry in table {
        encodeConstPoolValue(writer, entry.value);
    }
}

fn encodeConstPoolValue(writer: ByteWriter, value: ConstPoolValue) {
    match value {
        ConstPoolValue::Address(value) => {
            writer.emitByte(opc::CONST_POOL_ENTRY_KIND_ADDRESS.toUInt8());
            writer.emitAddress(value);
        },

        ConstPoolValue::Float32(value) => {
            writer.emitByte(opc::CONST_POOL_ENTRY_KIND_FLOAT32.toUInt8());
            writer.emitInt32(value.asInt32());
        },

        ConstPoolValue::Float64(value) => {
            writer.emitByte(opc::CONST_POOL_ENTRY_KIND_FLOAT64.toUInt8());
            writer.emitInt64(value.asInt64());
        },

        ConstPoolValue::Int128(lower, upper) => {
            writer.emitByte(opc::CONST_POOL_ENTRY_KIND_INT128.toUInt8());
            writer.emitInt64(lower);
            writer.emitInt64(upper);
        },
    }
}

fn encodeArrayUInt8(writer: ByteWriter, array: Array[UInt8]) {
    writer.emitInt32(array.size().toInt32());

    for value in array {
        writer.emitByte(value);
    }
}

fn encodeCommentTable(writer: ByteWriter, table: CommentTable) {
    writer.emitInt32(table.size().toInt32());

    for (offset, comment) in table {
        writer.emitInt32(offset);
        encodeString(writer, comment);
    }
}

fn encodeLazyCompilationTable(writer: ByteWriter, table: LazyCompilationData) {
    writer.emitInt32(table.size().toInt32());

    for (offset, site) in table {
        writer.emitInt32(offset);
        encodeLazyCompilationSite(writer, site);
    }
}

fn encodeLazyCompilationSite(writer: ByteWriter, site: LazyCompilationSite) {
    match site {
        LazyCompilationSite::Direct(site) => {
            writer.emitByte(opc::LAZY_COMPILATION_SITE_DIRECT.toUInt8());
            writer.emitInt32(site.fct_id.value);
            encodeBytecodeTypeArray(writer, site.type_params);
            writer.emitInt32(site.const_pool_offset);
        },

        LazyCompilationSite::Virtual(site) => {
            writer.emitByte(opc::LAZY_COMPILATION_SITE_VIRTUAL.toUInt8());
            writer.emitBool(site.receiver_is_first);
            writer.emitInt32(site.fct_id.value);
            encodeBytecodeTypeArray(writer, site.type_params);
            writer.emitInt32(site.vtable_index);
            encodeBytecodeType(writer, site.trait_object_ty);
        },

        LazyCompilationSite::Lambda(site) => {
            writer.emitByte(opc::LAZY_COMPILATION_SITE_LAMBDA.toUInt8());
            writer.emitBool(site.receiver_is_first);
            encodeBytecodeTypeArray(writer, site.params);
            encodeBytecodeType(writer, site.return_ty);
        }
    }
}

fn encodeGcPointTable(writer: ByteWriter, table: GcPointTable) {
    writer.emitInt32(table.size().toInt32());

    for (offset, gcpoint) in table {
        writer.emitInt32(offset);
        encodeGcPoint(writer, gcpoint);
    }
}

fn encodeGcPoint(writer: ByteWriter, table: GcPoint) {
    writer.emitInt32(table.size().toInt32());

    for offset in table {
        writer.emitInt32(offset);
    }
}

fn encodeString(writer: ByteWriter, value: String) {
    writer.emitInt32(value.size().toInt32());

    for byte in value.asBytes() {
        writer.emitByte(byte);
    }
}

fn encodeLocationTable(writer: ByteWriter, locations: LocationTable) {
    writer.emitInt32(locations.size().toInt32());

    for (offset, location) in locations {
        writer.emitInt32(offset);
        writer.emitInt32(location.line);
        writer.emitInt32(location.column);
    }
}

pub fn encodeBytecodeTypeArray(writer: ByteWriter, types: Array[BytecodeType]) {
    writer.emitInt32(types.size().toInt32());

    for ty in types {
        encodeBytecodeType(writer, ty);
    }
}

fn encodeBytecodeType(writer: ByteWriter, ty: BytecodeType) {
    match ty {
        BytecodeType::Unit => {
            writer.emitByte(opc::BC_TYPE_UNIT.toUInt8());
        },
        BytecodeType::Bool => {
            writer.emitByte(opc::BC_TYPE_BOOL.toUInt8());
        },
        BytecodeType::Char => {
            writer.emitByte(opc::BC_TYPE_CHAR.toUInt8());
        },
        BytecodeType::UInt8 => {
            writer.emitByte(opc::BC_TYPE_U_INT8.toUInt8());
        },
        BytecodeType::Int32 => {
            writer.emitByte(opc::BC_TYPE_INT32.toUInt8());
        },
        BytecodeType::Int64 => {
            writer.emitByte(opc::BC_TYPE_INT64.toUInt8());
        },
        BytecodeType::Float32 => {
            writer.emitByte(opc::BC_TYPE_FLOAT32.toUInt8());
        },
        BytecodeType::Float64 => {
            writer.emitByte(opc::BC_TYPE_FLOAT64.toUInt8());
        },
        BytecodeType::Ptr => {
            writer.emitByte(opc::BC_TYPE_PTR.toUInt8());
        },
        BytecodeType::This => {
            unreachable[()]();
        },
        BytecodeType::Tuple(subtypes) => {
            writer.emitByte(opc::BC_TYPE_TUPLE.toUInt8());
            encodeBytecodeTypeArray(writer, subtypes);
        },
        BytecodeType::TypeParam(type_param_id) => {
            writer.emitByte(opc::BC_TYPE_TYPE_PARAM.toUInt8());
            writer.emitInt32(type_param_id);
        },
        BytecodeType::Enum(enum_id, source_type_array) => {
            writer.emitByte(opc::BC_TYPE_ENUM.toUInt8());
            writer.emitInt32(enum_id.value);
            encodeBytecodeTypeArray(writer, source_type_array);
        },
        BytecodeType::Struct(struct_id, source_type_array) => {
            writer.emitByte(opc::BC_TYPE_STRUCT.toUInt8());
            writer.emitInt32(struct_id.value);
            encodeBytecodeTypeArray(writer, source_type_array);
        },
        BytecodeType::Class(class_id, source_type_array) => {
            writer.emitByte(opc::BC_TYPE_CLASS.toUInt8());
            writer.emitInt32(class_id.value);
            encodeBytecodeTypeArray(writer, source_type_array);
        },
        BytecodeType::Trait(trait_id, source_type_array) => {
            writer.emitByte(opc::BC_TYPE_TRAIT.toUInt8());
            writer.emitInt32(trait_id.value);
            encodeBytecodeTypeArray(writer, source_type_array);
        },
        BytecodeType::Lambda(params, ret) => {
            writer.emitByte(opc::BC_TYPE_LAMBDA.toUInt8());
            encodeBytecodeTypeArray(writer, params);
            encodeBytecodeType(writer, ret);
        }
    }
}

pub class ByteWriter {
    buffer: Vec[UInt8],
}

impl ByteWriter {
    pub static fn new(): ByteWriter {
        ByteWriter(
            Vec[UInt8]::new(),
        )
    }

    pub fn emitAddress(address: Address) {
        self.emitInt64(address.value);
    }

    pub fn emitInt64(value: Int64) {
        self.emitInt32(value.toInt32());
        self.emitInt32((value >> 32i32).toInt32());
    }

    pub fn emitInt32(value: Int32) {
        self.buffer.push(value.toUInt8());
        self.buffer.push((value >> 8i32).toUInt8());
        self.buffer.push((value >> 16i32).toUInt8());
        self.buffer.push((value >> 24i32).toUInt8());
    }

    pub fn emitByte(value: UInt8) {
        self.buffer.push(value);
    }

    pub fn emitBool(value: Bool) {
        let value = if value { 1u8 } else { 0u8 };
        self.emitByte(value);
    }

    pub fn toArray(): Array[UInt8] {
        self.buffer.toArray()
    }
}
