class BytecodeFunction(let code: Array[UInt8], let const_pool: Array[ConstPoolEntry], let registers: Array[BytecodeType], let arguments: Int32) {
    fun constPool(idx: ConstPoolId): ConstPoolEntry {
        self.const_pool(idx.value.toInt64())
    }

    fun codeAt(idx: Int32): Int32 {
        self.code(idx.toInt64()).toInt32()
    }

    fun codeInt32At(idx: Int32): Int32 {
        let byte1 = self.codeAt(idx);
        let byte2 = self.codeAt(idx+1I);
        let byte3 = self.codeAt(idx+2I);
        let byte4 = self.codeAt(idx+3I);

        (byte4 << 24I) | (byte3 << 16I) | (byte2 << 8I) | byte1
    }
}

enum ConstPoolEntry {
    Int32(Int32),
    Int64(Int64),
    Float32(Float32),
    Float64(Float64),
    Char(Char),
    String(String),
}

impl ConstPoolEntry {
    fun toInt32(): Option[Int32] {
        match self {
            ConstPoolEntry::Int32(value) => Some(value),
            _ => None,
        }
    }

    fun toInt64(): Option[Int64] {
        match self {
            ConstPoolEntry::Int64(value) => Some(value),
            _ => None,
        }
    }

    fun toFloat32(): Option[Float32] {
        match self {
            ConstPoolEntry::Float32(value) => Some(value),
            _ => None,
        }
    }

    fun toFloat64(): Option[Float64] {
        match self {
            ConstPoolEntry::Float64(value) => Some(value),
            _ => None,
        }
    }
}

impl Stringable for ConstPoolEntry {
    fun toString(): String {
        match self {
            ConstPoolEntry::Int32(value) => "Int32 ${value}",
            ConstPoolEntry::Int64(value) => "Int64 ${value}",
            ConstPoolEntry::Float32(value) => "Float32 ${value}",
            ConstPoolEntry::Float64(value) => "Float64 ${value}",
            ConstPoolEntry::Char(value) => "Char ${value}",
            ConstPoolEntry::String(value) => "String ${value}",
        }
    }
}

enum SourceType {
    Unit,
    UInt8,
    Bool,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    Class(Int32, Array[SourceType]),
    Struct(Int32, Array[SourceType]),
    Trait(Int32, Array[SourceType]),
    Tuple(Array[SourceType]),
    TypeParam(Int32),
}

struct BytecodeRegister(value: Int32)

impl Equals for BytecodeRegister {
    fun equals(other: BytecodeRegister): Bool {
        self.value == other.value
    }
}

impl Hash for BytecodeRegister {
    fun hash(): Int32 {
        self.value
    }
}

impl Stringable for BytecodeRegister {
    fun toString(): String = "r${self.value}";
}

struct ClassDefId(value: Int32)
struct FieldId(value: Int32)
struct GlobalId(value: Int32)
struct ConstPoolId(value: Int32)

impl ConstPoolId {
    fun equals(rhs: ConstPoolId): Bool {
        self.value == rhs.value
    }
}

struct FctId { value: Int32 }

enum BytecodeType {
    Ptr,
    UInt8,
    Bool,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    Struct(Int32, Array[SourceType]),
    Tuple(Array[SourceType]),
    TypeParam(Int32),
}

impl Stringable for BytecodeType {
    fun toString(): String {
        match self {
            BytecodeType::Ptr => "Ptr",
            BytecodeType::UInt8 => "UInt8",
            BytecodeType::Bool => "Bool",
            BytecodeType::Char => "Char",
            BytecodeType::Int32 => "Int32",
            BytecodeType::Int64 => "Int64",
            BytecodeType::Float32 => "Float32",
            BytecodeType::Float64 => "Float64",
            BytecodeType::Struct(id, params) => "Struct(${id}, <type params>)",
            BytecodeType::Tuple(types) => "Tuple(<type params>)",
            BytecodeType::TypeParam(idx) => "TypeParam(${idx})",
        }
    }
}
