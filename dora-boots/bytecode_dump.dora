fun bytecodeDump(bc: BytecodeFunction) {
    let dumper = BytecodeDumper(bc);
    readBytecode(bc.code, dumper);

    var i = 0L;
    while i < bc.const_pool.size() {
        let entry = bc.const_pool.get(i);
        println("@${i} = ${entry.toString()}");
        i = i + 1L;
    }

    i = 0L;
    while i < bc.registers.size() {
        let ty = bc.registers.get(i);
        println("r${i} = ${ty}");
        i = i + 1L;
    }
}

class BytecodeDumper(let bc: BytecodeFunction): BytecodeVisitor {
    var pos: Int32 = 0;

    fun emitInst(name: String) {
        self.emitStart(name);
        println("");
    }

    fun emitReg3(name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${r3}");
    }

    fun emitReg2(name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}, ${r2}");
    }

    fun emitReg2AndCls(name: String, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${cls.value}");
    }

    fun emitReg1(name: String, r1: BytecodeRegister) {
        self.emitStart(name);
        println(" ${r1}")
    }

    fun emitReg1AndCls(name: String, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${cls.value}")
    }

    fun emitReg1AndIdx(name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(name);
        println(" ${r1}, @${idx.value}");
    }

    fun emitIdx(name: String, idx: ConstPoolId) {
        self.emitStart(name);
        println(" @${idx.value}");
    }

    fun emitReg1AndInt(name: String, r1: BytecodeRegister, value: Int32) {
        self.emitStart(name);
        println(" ${r1}, ${value}");
    }

    fun emitInt(name: String, value: Int32) {
        self.emitStart(name);
        println(" ${value}");
    }

    fun emitField(
        name: String,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cid: ClassDefId,
        fid: FieldId,
    ) {
        self.emitStart(name);
        println(" ${r1}, ${r2}, ${cid.value}:${fid.value}");
    }

    fun emitGlobal(name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.emitStart(name);
        println(" ${r1}, ${gid.value}");
    }

    fun emitFctVoid(name: String, fid: FctId) {
        self.emitStart(name);
        println(" ${fid.value}");
    }

    fun emitFct(name: String, r1: BytecodeRegister, fid: FctId) {
        self.emitStart(name);
        println(" ${r1}, ${fid.value}");
    }

    fun emitNew(name: String, r1: BytecodeRegister, cls: ClassDefId) {
        self.emitStart(name);
        println(" ${r1}, ${cls.value}");
    }

    fun emitStart(name: String) {
        print("${self.pos}: ${name}");
    }

    @override fun visitInstruction(offset: Int32) { self.pos = offset; }

    @override fun visitAddInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddInt32", dest, lhs, rhs); }
    @override fun visitAddInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddInt64", dest, lhs, rhs); }
    @override fun visitAddFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddFloat32", dest, lhs, rhs); }
    @override fun visitAddFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AddFloat64", dest, lhs, rhs); }

    @override fun visitSubInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubInt32", dest, lhs, rhs); }
    @override fun visitSubInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubInt64", dest, lhs, rhs); }
    @override fun visitSubFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubFloat32", dest, lhs, rhs); }
    @override fun visitSubFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SubFloat64", dest, lhs, rhs); }

    @override fun visitNegInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegInt32", dest, src); }
    @override fun visitNegInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegInt64", dest, src); }
    @override fun visitNegFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegFloat32", dest, src); }
    @override fun visitNegFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NegFloat64", dest, src); }

    @override fun visitMulInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulInt32", dest, lhs, rhs); }
    @override fun visitMulInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulInt64", dest, lhs, rhs); }
    @override fun visitMulFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulFloat32", dest, lhs, rhs); }
    @override fun visitMulFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("MulFloat64", dest, lhs, rhs); }

    @override fun visitDivInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivInt32", dest, lhs, rhs); }
    @override fun visitDivInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivInt64", dest, lhs, rhs); }
    @override fun visitDivFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivFloat32", dest, lhs, rhs); }
    @override fun visitDivFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("DivFloat64", dest, lhs, rhs); }

    @override fun visitModInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ModInt32", dest, lhs, rhs); }
    @override fun visitModInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ModInt64", dest, lhs, rhs); }

    @override fun visitAndInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AndInt32", dest, lhs, rhs); }
    @override fun visitAndInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("AndInt64", dest, lhs, rhs); }

    @override fun visitOrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("OrInt32", dest, lhs, rhs); }
    @override fun visitOrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("OrInt64", dest, lhs, rhs); }

    @override fun visitXorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("XorInt32", dest, lhs, rhs); }
    @override fun visitXorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("XorInt64", dest, lhs, rhs); }

    @override fun visitNotBool(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotBool", dest, src); }
    @override fun visitNotInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotInt32", dest, src); }
    @override fun visitNotInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("NotInt64", dest, src); }

    @override fun visitShlInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShlInt32", dest, lhs, rhs); }
    @override fun visitShrInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShrInt32", dest, lhs, rhs); }
    @override fun visitSarInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SarInt32", dest, lhs, rhs); }

    @override fun visitShlInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShlInt64", dest, lhs, rhs); }
    @override fun visitShrInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("ShrInt64", dest, lhs, rhs); }
    @override fun visitSarInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("SarInt64", dest, lhs, rhs); }

    @override fun visitRolInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("RolInt32", dest, lhs, rhs); }
    @override fun visitRorInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("RorInt32", dest, lhs, rhs); }
    @override fun visitRolInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("RolInt64", dest, lhs, rhs); }
    @override fun visitRorInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("RorInt64", dest, lhs, rhs); }

    @override fun visitReinterpretFloat32AsInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ReinterpretFloat32AsInt32", dest, src); }
    @override fun visitReinterpretInt32AsFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ReinterpretInt32AsFloat32", dest, src); }
    @override fun visitReinterpretFloat64AsInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ReinterpretFloat64AsInt64", dest, src); }
    @override fun visitReinterpretInt64AsFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ReinterpretInt64AsFloat64", dest, src); }

    @override fun visitExtendUInt8ToChar(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ExtendUInt8ToChar", dest, src); }
    @override fun visitExtendUInt8ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ExtendUInt8ToInt32", dest, src); }
    @override fun visitExtendUInt8ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ExtendUInt8ToInt64", dest, src); }
    @override fun visitExtendInt32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ExtendInt32ToInt64", dest, src); }
    @override fun visitExtendCharToInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ExtendCharToInt64", dest, src); }

    @override fun visitCastCharToInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastCharToInt32", dest, src); }
    @override fun visitCastInt32ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastInt32ToUInt8", dest, src); }
    @override fun visitCastInt32ToChar(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastInt32ToChar", dest, src); }
    @override fun visitCastInt64ToUInt8(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastInt64ToUInt8", dest, src); }
    @override fun visitCastInt64ToChar(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastInt64ToChar", dest, src); }
    @override fun visitCastInt64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("CastInt64ToInt32", dest, src); }

    @override fun visitConvertInt32ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ConvertInt32ToFloat32", dest, src); }
    @override fun visitConvertInt32ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ConvertInt32ToFloat64", dest, src); }
    @override fun visitConvertInt64ToFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ConvertInt64ToFloat32", dest, src); }
    @override fun visitConvertInt64ToFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("ConvertInt64ToFloat64", dest, src); }

    @override fun visitTruncateFloat32ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("TruncateFloat32ToInt32", dest, src); }
    @override fun visitTruncateFloat32ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("TruncateFloat32ToInt64", dest, src); }
    @override fun visitTruncateFloat64ToInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("TruncateFloat64ToInt32", dest, src); }
    @override fun visitTruncateFloat64ToInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("TruncateFloat64ToInt64", dest, src); }

    @override fun visitInstanceOf(dest: BytecodeRegister, src: BytecodeRegister, cls: ClassDefId) { self.emitReg2AndCls("InstanceOf", dest, src, cls); }
    @override fun visitCheckedCast(dest: BytecodeRegister, cls: ClassDefId) { self.emitReg1AndCls("CheckedCast", dest, cls); }

    @override fun visitMovBool(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovBool", dest, src); }
    @override fun visitMovUInt8(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovUInt8", dest, src); }
    @override fun visitMovChar(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovChar", dest, src); }
    @override fun visitMovInt32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovInt32", dest, src); }
    @override fun visitMovInt64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovInt64", dest, src); }
    @override fun visitMovFloat32(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovFloat32", dest, src); }
    @override fun visitMovFloat64(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovFloat64", dest, src); }
    @override fun visitMovPtr(dest: BytecodeRegister, src: BytecodeRegister) { self.emitReg2("MovPtr", dest, src); }

    @override fun visitLoadFieldBool(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldBool", dest, obj, cls, field); }
    @override fun visitLoadFieldUInt8(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldUInt8", dest, obj, cls, field); }
    @override fun visitLoadFieldChar(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldChar", dest, obj, cls, field); }
    @override fun visitLoadFieldInt32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldInt32", dest, obj, cls, field); }
    @override fun visitLoadFieldInt64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldInt64", dest, obj, cls, field); }
    @override fun visitLoadFieldFloat32(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldFloat32", dest, obj, cls, field); }
    @override fun visitLoadFieldFloat64(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldFloat64", dest, obj, cls, field); }
    @override fun visitLoadFieldPtr(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("LoadFieldPtr", dest, obj, cls, field); }

    @override fun visitStoreFieldBool(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldBool", src, obj, cls, field); }
    @override fun visitStoreFieldUInt8(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldUInt8", src, obj, cls, field); }
    @override fun visitStoreFieldChar(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldChar", src, obj, cls, field); }
    @override fun visitStoreFieldInt32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldInt32", src, obj, cls, field); }
    @override fun visitStoreFieldInt64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldInt64", src, obj, cls, field); }
    @override fun visitStoreFieldFloat32(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldFloat32", src, obj, cls, field); }
    @override fun visitStoreFieldFloat64(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldFloat64", src, obj, cls, field); }
    @override fun visitStoreFieldPtr(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassDefId, field: FieldId) { self.emitField("StoreFieldPtr", src, obj, cls, field); }

    @override fun visitLoadGlobalBool(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalBool", dest, glob); }
    @override fun visitLoadGlobalUInt8(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalUInt8", dest, glob); }
    @override fun visitLoadGlobalChar(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalChar", dest, glob); }
    @override fun visitLoadGlobalInt32(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalInt32", dest, glob); }
    @override fun visitLoadGlobalInt64(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalInt64", dest, glob); }
    @override fun visitLoadGlobalFloat32(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalFloat32", dest, glob); }
    @override fun visitLoadGlobalFloat64(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalFloat64", dest, glob); }
    @override fun visitLoadGlobalPtr(dest: BytecodeRegister, glob: GlobalId) { self.emitGlobal("LoadGlobalPtr", dest, glob); }

    @override fun visitStoreGlobalBool(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalBool", src, glob); }
    @override fun visitStoreGlobalUInt8(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalUInt8", src, glob); }
    @override fun visitStoreGlobalChar(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalChar", src, glob); }
    @override fun visitStoreGlobalInt32(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalInt32", src, glob); }
    @override fun visitStoreGlobalInt64(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalInt64", src, glob); }
    @override fun visitStoreGlobalFloat32(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalFloat32", src, glob); }
    @override fun visitStoreGlobalFloat64(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalFloat64", src, glob); }
    @override fun visitStoreGlobalPtr(src: BytecodeRegister, glob: GlobalId) { self.emitGlobal("StoreGlobalPtr", src, glob); }

    @override fun visitPushRegister(src: BytecodeRegister) { self.emitReg1("PushRegister", src); }

    @override fun visitConstNil(dest: BytecodeRegister) { self.emitReg1("ConstNil", dest); }
    @override fun visitConstTrue(dest: BytecodeRegister) { self.emitReg1("ConstTrue", dest); }
    @override fun visitConstFalse(dest: BytecodeRegister) { self.emitReg1("ConstFalse", dest); }
    @override fun visitConstZeroUInt8(dest: BytecodeRegister) { self.emitReg1("ConstZeroUInt8", dest); }
    @override fun visitConstZeroChar(dest: BytecodeRegister) { self.emitReg1("ConstZeroChar", dest); }
    @override fun visitConstZeroInt32(dest: BytecodeRegister) { self.emitReg1("ConstZeroInt32", dest); }
    @override fun visitConstZeroInt64(dest: BytecodeRegister) { self.emitReg1("ConstZeroInt64", dest); }
    @override fun visitConstZeroFloat32(dest: BytecodeRegister) { self.emitReg1("ConstZeroFloat32", dest); }
    @override fun visitConstZeroFloat64(dest: BytecodeRegister) { self.emitReg1("ConstZeroFloat64", dest); }
    @override fun visitConstUInt8(dest: BytecodeRegister, value: UInt8) { self.emitReg1AndInt("ConstUInt8", dest, value.toInt32()); }
    @override fun visitConstChar(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstChar", dest, idx); }
    @override fun visitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt32", dest, idx); }
    @override fun visitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstInt64", dest, idx); }
    @override fun visitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat32", dest, idx); }
    @override fun visitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstFloat64", dest, idx); }
    @override fun visitConstString(dest: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("ConstString", dest, idx); }

    @override fun visitTestEqPtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqPtr", dest, lhs, rhs); }
    @override fun visitTestNePtr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNePtr", dest, lhs, rhs); }

    @override fun visitTestEqUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqUInt8", dest, lhs, rhs); }
    @override fun visitTestNeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeUInt8", dest, lhs, rhs); }
    @override fun visitTestGtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtUInt8", dest, lhs, rhs); }
    @override fun visitTestGeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeUInt8", dest, lhs, rhs); }
    @override fun visitTestLtUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtUInt8", dest, lhs, rhs); }
    @override fun visitTestLeUInt8(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeUInt8", dest, lhs, rhs); }

    @override fun visitTestEqChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqChar", dest, lhs, rhs); }
    @override fun visitTestNeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeChar", dest, lhs, rhs); }
    @override fun visitTestGtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtChar", dest, lhs, rhs); }
    @override fun visitTestGeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeChar", dest, lhs, rhs); }
    @override fun visitTestLtChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtChar", dest, lhs, rhs); }
    @override fun visitTestLeChar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeChar", dest, lhs, rhs); }

    @override fun visitTestEqEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqEnum", dest, lhs, rhs); }
    @override fun visitTestNeEnum(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeEnum", dest, lhs, rhs); }

    @override fun visitTestEqInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqInt32", dest, lhs, rhs); }
    @override fun visitTestNeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeInt32", dest, lhs, rhs); }
    @override fun visitTestGtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtInt32", dest, lhs, rhs); }
    @override fun visitTestGeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeInt32", dest, lhs, rhs); }
    @override fun visitTestLtInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtInt32", dest, lhs, rhs); }
    @override fun visitTestLeInt32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeInt32", dest, lhs, rhs); }

    @override fun visitTestEqInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqInt64", dest, lhs, rhs); }
    @override fun visitTestNeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeInt64", dest, lhs, rhs); }
    @override fun visitTestGtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtInt64", dest, lhs, rhs); }
    @override fun visitTestGeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeInt64", dest, lhs, rhs); }
    @override fun visitTestLtInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtInt64", dest, lhs, rhs); }
    @override fun visitTestLeInt64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeInt64", dest, lhs, rhs); }

    @override fun visitTestEqFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqFloat32", dest, lhs, rhs); }
    @override fun visitTestNeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeFloat32", dest, lhs, rhs); }
    @override fun visitTestGtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtFloat32", dest, lhs, rhs); }
    @override fun visitTestGeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeFloat32", dest, lhs, rhs); }
    @override fun visitTestLtFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtFloat32", dest, lhs, rhs); }
    @override fun visitTestLeFloat32(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeFloat32", dest, lhs, rhs); }

    @override fun visitTestEqFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestEqFloat64", dest, lhs, rhs); }
    @override fun visitTestNeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestNeFloat64", dest, lhs, rhs); }
    @override fun visitTestGtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGtFloat64", dest, lhs, rhs); }
    @override fun visitTestGeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestGeFloat64", dest, lhs, rhs); }
    @override fun visitTestLtFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLtFloat64", dest, lhs, rhs); }
    @override fun visitTestLeFloat64(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) { self.emitReg3("TestLeFloat64", dest, lhs, rhs); }

    @override fun visitJumpLoop(offset: Int32) { self.emitInt("JumpLoop", offset); }
    
    @override fun visitJumpIfFalse(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfFalse", opnd, offset); }
    @override fun visitJumpIfFalseConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfFalseConst", opnd, idx); }
    @override fun visitJumpIfTrue(opnd: BytecodeRegister, offset: Int32) { self.emitReg1AndInt("JumpIfTrue", opnd, offset); }
    @override fun visitJumpIfTrueConst(opnd: BytecodeRegister, idx: ConstPoolId) { self.emitReg1AndIdx("JumpIfTrueConst", opnd, idx); }
    @override fun visitJump(offset: Int32) { self.emitInt("Jump", offset); }
    @override fun visitJumpConst(idx: ConstPoolId) { self.emitIdx("JumpConst", idx); }

    @override fun visitInvokeDirectVoid(fct: FctId) { self.emitFctVoid("InvokeDirectVoid", fct); }
    @override fun visitInvokeDirectBool(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectBool", dest, fct); }
    @override fun visitInvokeDirectUInt8(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectUInt8", dest, fct); }
    @override fun visitInvokeDirectChar(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectChar", dest, fct); }
    @override fun visitInvokeDirectInt32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectInt32", dest, fct); }
    @override fun visitInvokeDirectInt64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectInt64", dest, fct); }
    @override fun visitInvokeDirectFloat32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectFloat32", dest, fct); }
    @override fun visitInvokeDirectFloat64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectFloat64", dest, fct); }
    @override fun visitInvokeDirectPtr(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeDirectPtr", dest, fct); }

    @override fun visitInvokeVirtualVoid(fct: FctId) { self.emitFctVoid("InvokeVirtualVoid", fct); }
    @override fun visitInvokeVirtualBool(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualBool", dest, fct); }
    @override fun visitInvokeVirtualUInt8(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualUInt8", dest, fct); }
    @override fun visitInvokeVirtualChar(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualChar", dest, fct); }
    @override fun visitInvokeVirtualInt32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualInt32", dest, fct); }
    @override fun visitInvokeVirtualInt64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualInt64", dest, fct); }
    @override fun visitInvokeVirtualFloat32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualFloat32", dest, fct); }
    @override fun visitInvokeVirtualFloat64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualFloat64", dest, fct); }
    @override fun visitInvokeVirtualPtr(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeVirtualPtr", dest, fct); }

    @override fun visitInvokeStaticVoid(fct: FctId) { self.emitFctVoid("InvokeStaticVoid", fct); }
    @override fun visitInvokeStaticBool(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticBool", dest, fct); }
    @override fun visitInvokeStaticUInt8(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticUInt8", dest, fct); }
    @override fun visitInvokeStaticChar(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticChar", dest, fct); }
    @override fun visitInvokeStaticInt32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticInt32", dest, fct); }
    @override fun visitInvokeStaticInt64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticInt64", dest, fct); }
    @override fun visitInvokeStaticFloat32(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticFloat32", dest, fct); }
    @override fun visitInvokeStaticFloat64(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticFloat64", dest, fct); }
    @override fun visitInvokeStaticPtr(dest: BytecodeRegister, fct: FctId) { self.emitFct("InvokeStaticPtr", dest, fct); }

    @override fun visitNewObject(dest: BytecodeRegister, cls: ClassDefId) { self.emitNew("NewObject", dest, cls); }
    
    @override fun visitRetVoid() { self.emitInst("RetVoid"); }
    @override fun visitRetBool(opnd: BytecodeRegister) { self.emitReg1("RetBool", opnd); }
    @override fun visitRetUInt8(opnd: BytecodeRegister) { self.emitReg1("RetUInt8", opnd); }
    @override fun visitRetChar(opnd: BytecodeRegister) { self.emitReg1("RetChar", opnd); }
    @override fun visitRetInt32(opnd: BytecodeRegister) { self.emitReg1("RetInt32", opnd); }
    @override fun visitRetInt64(opnd: BytecodeRegister) { self.emitReg1("RetInt64", opnd); }
    @override fun visitRetFloat32(opnd: BytecodeRegister) { self.emitReg1("RetFlaot", opnd); }
    @override fun visitRetFloat64(opnd: BytecodeRegister) { self.emitReg1("RetFloat64", opnd); }
    @override fun visitRetPtr(opnd: BytecodeRegister) { self.emitReg1("RetPtr", opnd); }
}