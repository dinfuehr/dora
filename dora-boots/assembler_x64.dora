let RAX: Register = Register(0);
let RCX: Register = Register(1);
let RDX: Register = Register(2);
let RBX: Register = Register(3);
let RSP: Register = Register(4);
let RBP: Register = Register(5);
let RSI: Register = Register(6);
let RDI: Register = Register(7);

let R8: Register = Register(8);
let R9: Register = Register(9);
let R10: Register = Register(10);
let R11: Register = Register(11);
let R12: Register = Register(12);
let R13: Register = Register(13);
let R14: Register = Register(14);
let R15: Register = Register(15);

class AssemblerX64: Assembler {
    let buffer: AssemblerBuffer = AssemblerBuffer();

    fun pushqr(reg: Register) {
        self.emitRexOptional(reg);
        self.emitByte((0x50 + reg.lowBits()).toUInt8());
    }

    fun popqr(reg: Register) {
        self.emitRexOptional(reg);
        self.emitByte((0x58 + reg.lowBits()).toUInt8());
    }

    fun addqri(reg: Register, imm: Immediate) {
        self.emitAlu64mm(reg, imm, 0b000, 0x05Y);
    }

    fun subqri(reg: Register, imm: Immediate) {
        self.emitAlu64mm(reg, imm, 0b101, 0x2dY);
    }

    fun addqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x01Y);
        self.emitModRmReg(src, dest);
    }

    fun addlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x01Y);
        self.emitModRmReg(src, dest);
    }

    fun subqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x29Y);
        self.emitModRmReg(src, dest);
    }

    fun sublrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x29Y);
        self.emitModRmReg(src, dest);
    }

    fun movqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x89Y);
        self.emitModRmReg(src, dest);
    }

    fun movqri(dest: Register, imm: Immediate) {
        if imm.isInt32() {
            self.emitRex64RmField(dest);
            self.emitByte(0xC7Y);
            self.emitModRmOpcode(0, dest);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitRex64RmField(dest);
            self.emitByte((0xB8 + dest.lowBits()).toUInt8());
            self.emitInt64(imm.toInt64());
        }
    }

    fun movlri(dest: Register, imm: Immediate) {
        assert(imm.isInt32());
        self.emitRex32RmFieldOptional(dest);
        self.emitByte((0xB8 + dest.lowBits()).toUInt8());
        self.emitInt32(imm.toInt32());
    }

    fun movlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x89Y);
        self.emitModRmReg(src, dest);
    }

    fun orlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x09Y);
        self.emitModRmReg(src, dest);
    }

    fun orqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x09Y);
        self.emitModRmReg(src, dest);
    }

    fun andlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x21Y);
        self.emitModRmReg(src, dest);
    }

    fun andqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x21Y);
        self.emitModRmReg(src, dest);
    }

    fun xorlrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x31Y);
        self.emitModRmReg(src, dest);
    }

    fun xorqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x31Y);
        self.emitModRmReg(src, dest);
    }

    fun testlrr(lhs: Register, rhs: Register) {
        self.emitRex32ModRmOptional(rhs, lhs);
        self.emitByte(0x85Y);
        self.emitModRmReg(rhs, lhs);
    }

    fun testqrr(lhs: Register, rhs: Register) {
        self.emitRex64ModRm(rhs, lhs);
        self.emitByte(0x85Y);
        self.emitModRmReg(rhs, lhs);
    }

    fun cmplrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(src, dest);
        self.emitByte(0x39Y);
        self.emitModRmReg(src, dest);
    }

    fun cmpqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(src, dest);
        self.emitByte(0x39Y);
        self.emitModRmReg(src, dest);
    }

    fun imullrr(dest: Register, src: Register) {
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0FY);
        self.emitByte(0xAFY);
        self.emitModRmReg(dest, src);
    }

    fun imulqrr(dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0FY);
        self.emitByte(0xAFY);
        self.emitModRmReg(dest, src);
    }

    fun idivlr(src: Register) {
        self.emitRex32RmFieldOptional(src);
        self.emitByte(0xF7Y);
        self.emitModRmOpcode(0b111, src);
    }

    fun idivqr(src: Register) {
        self.emitRex64RmField(src);
        self.emitByte(0xF7Y);
        self.emitModRmOpcode(0b111, src);
    }

    fun setccr(condition: Condition, dest: Register) {
        if dest.needsRexBit() || dest.lowBits() > 3 {
            self.emitRex(false, false, false, dest.needsRexBit());
        }

        self.emitByte(0x0FY);
        self.emitByte((0x90 + condition.toInt32()).toUInt8());
        self.emitModRmOpcode(0, dest);
    }

    fun callr(src: Register) {
        self.emitRex32RmFieldOptional(src);
        self.emitByte(0xFFY);
        self.emitModRmOpcode(0b010, src);
    }

    fun cmovl(condition: Condition, dest: Register, src: Register) {
        self.emitRex32ModRmOptional(dest, src);
        self.emitByte(0x0FY);
        self.emitByte((0x40 + condition.toInt32()).toUInt8());
        self.emitModRmReg(dest, src);
    }

    fun cmovq(condition: Condition, dest: Register, src: Register) {
        self.emitRex64ModRm(dest, src);
        self.emitByte(0x0FY);
        self.emitByte((0x40 + condition.toInt32()).toUInt8());
        self.emitModRmReg(dest, src);
    }

    fun retq() {
        self.emitByte(0xC3Y);
    }

    fun nop() {
        self.emitByte(0x90Y);
    }

    fun cdq() {
        self.emitByte(0x99Y);
    }

    fun cqo() {
        self.emitRex64();
        self.emitByte(0x99Y);
    }

    fun emitAlu64mm(reg: Register, imm: Immediate, modrm_reg: Int32, rax_opcode: UInt8) {
        assert(imm.isInt32());
        self.emitRex64RmField(reg);

        if imm.isInt8() {
            self.emitByte(0x83Y);
            self.emitModRm(0b11, modrm_reg, reg.lowBits());
            self.emitByte(imm.toUInt8());
        } else if reg == RAX {
            self.emitByte(rax_opcode);
            self.emitInt32(imm.toInt32());
        } else {
            self.emitByte(0x81Y);
            self.emitModRm(0b11, modrm_reg, reg.lowBits());
            self.emitInt32(imm.toInt32());
        }
    }

    fun emitRexOptional(reg: Register) {
        if reg.needsRexBit() {
            self.emitRex(false, false, false, true);
        }
    }

    fun emitRex64RmField(modrm_rm: Register) {
        self.emitRex(true, false, false, modrm_rm.needsRexBit());
    }

    fun emitRex64ModRm(modrm_reg: Register, modrm_rm: Register) {
        self.emitRex(true, modrm_reg.needsRexBit(), false, modrm_rm.needsRexBit());
    }

    fun emitRex32ModRmOptional(modrm_reg: Register, modrm_rm: Register) {
        if modrm_reg.needsRexBit() || modrm_rm.needsRexBit() {
            self.emitRex(false, modrm_reg.needsRexBit(), false, modrm_rm.needsRexBit());
        }
    }

    fun emitRex32RmFieldOptional(reg: Register) {
        if reg.needsRexBit() {
            self.emitRex(false, false, false, reg.needsRexBit());
        }
    }

    fun emitRex64() {
        self.emitRex(true, false, false, false);
    }

    fun emitRex(w: Bool, r: Bool, x: Bool, b: Bool) {
        // w - 64-bit width
        // r - extension of modrm-reg field
        // x - extension of sib index field
        // b - extension of modrm-rm/sib base/opcode reg field
        let opcode = 0x40 | w.toInt32() << 3 | r.toInt32() << 2 | x.toInt32() << 1 | b.toInt32();
        self.emitByte(opcode.toUInt8());
    }

    fun emitModRmReg(reg: Register, rm: Register) {
        self.emitModRm(0b11, reg.lowBits(), rm.lowBits());
    }

    fun emitModRmOpcode(opcode: Int32, rm: Register) {
        self.emitModRm(0b11, opcode, rm.lowBits());
    }

    fun emitModRm(mode: Int32, reg: Int32, rm: Int32) {
        assert(mode < 4 && reg < 8 && rm < 8);
        self.emitByte((mode << 6 | reg << 3 | rm).toUInt8());
    }

    fun emitSib(scale: Int32, index: Int32, base: Int32) {
        assert(scale < 4);
        assert(index < 8);
        assert(base < 8);
        self.emitByte((scale << 6 | index << 3 | base).toUInt8());
    }

    fun emitByte(value: UInt8) {
        self.buffer.emitByte(value);
    }

    fun emitInt32(value: Int32) {
        self.buffer.emitInt32(value);
    }

    fun emitInt64(value: Int64) {
        self.buffer.emitInt64(value);
    }

    fun finalize() -> Array[UInt8] {
        self.buffer.toArray()
    }
}

enum Condition {
    Overflow,
    NoOverflow,
    Below,
    NeitherAboveNorEqual,
    NotBelow,
    AboveOrEqual,
    Equal,
    Zero,
    NotEqual,
    NotZero,
    BelowOrEqual,
    NotAbove,
    NeitherBelowNorEqual,
    Above,
    Sign,
    NoSign,
    Parity,
    ParityEven,
    NoParity,
    ParityOdd,
    Less,
    NeitherGreaterNorEqual,
    NotLess,
    GreaterOrEqual,
    LessOrEqual,
    NotGreater,
    NeitherLessNorEqual,
    Greater,
}

impl Condition {
    fun toInt32() -> Int32 {
        if self == Condition::Overflow {
            0b0000
        } else if self == Condition::NoOverflow {
            0b0001
        } else if self == Condition::Below {
            0b0010
        } else if self == Condition::NeitherAboveNorEqual {
            0b0010
        } else if self == Condition::NotBelow {
            0b0011
        } else if self == Condition::AboveOrEqual {
            0b0011
        } else if self == Condition::Equal {
            0b0100
        } else if self == Condition::Zero {
            0b0100
        } else if self == Condition::NotEqual {
            0b0101
        } else if self == Condition::NotZero {
            0b0101
        } else if self == Condition::BelowOrEqual {
            0b0110
        } else if self == Condition::NotAbove {
            0b0110
        } else if self == Condition::NeitherBelowNorEqual {
            0b0111
        } else if self == Condition::Above {
            0b0111
        } else if self == Condition::Sign {
            0b1000
        } else if self == Condition::NoSign {
            0b1001
        } else if self == Condition::Parity {
            0b1010
        } else if self == Condition::ParityEven {
            0b1010
        } else if self == Condition::NoParity {
            0b1011
        } else if self == Condition::ParityOdd {
            0b1011
        } else if self == Condition::Less {
            0b1100
        } else if self == Condition::NeitherGreaterNorEqual {
            0b1100
        } else if self == Condition::NotLess {
            0b1101
        } else if self == Condition::GreaterOrEqual {
            0b1101
        } else if self == Condition::LessOrEqual {
            0b1110
        } else if self == Condition::NotGreater {
            0b1110
        } else if self == Condition::NeitherLessNorEqual {
            0b1111
        } else if self == Condition::Greater {
            0b1111
        } else {
            unreachable();
            0
        }
    }
}

class Immediate(let value: Int64) {
    fun isInt8() -> Bool {
        let limit = 1L << 7;
        -limit <= self.value && self.value < limit
    }

    fun isInt32() -> Bool {
        let limit = 1L << 32;
        -limit <= self.value && self.value < limit
    }

    fun toUInt8() -> UInt8 {
        self.value.toUInt8()
    }

    fun toInt32() -> Int32 {
        self.value.toInt32()
    }

    fun toInt64() -> Int64 {
        self.value
    }
}

@test fun testConditionCodes() {
    assert(Condition::Overflow.toInt32() == 0b0000);

    assert(Condition::NoOverflow.toInt32() == 0b0001);

    assert(Condition::Below.toInt32() == 0b0010);
    assert(Condition::NeitherAboveNorEqual.toInt32() == 0b0010);

    assert(Condition::NotBelow.toInt32() == 0b0011);
    assert(Condition::AboveOrEqual.toInt32() == 0b0011);

    assert(Condition::Equal.toInt32() == 0b0100);
    assert(Condition::Zero.toInt32() == 0b0100);

    assert(Condition::NotEqual.toInt32() == 0b0101);
    assert(Condition::NotZero.toInt32() == 0b0101);

    assert(Condition::BelowOrEqual.toInt32() == 0b0110);
    assert(Condition::NotAbove.toInt32() == 0b0110);

    assert(Condition::NeitherBelowNorEqual.toInt32() == 0b0111);
    assert(Condition::Above.toInt32() == 0b0111);

    assert(Condition::Sign.toInt32() == 0b1000);

    assert(Condition::NoSign.toInt32() == 0b1001);

    assert(Condition::Parity.toInt32() == 0b1010);
    assert(Condition::ParityEven.toInt32() == 0b1010);

    assert(Condition::NoParity.toInt32() == 0b1011);
    assert(Condition::ParityOdd.toInt32() == 0b1011);

    assert(Condition::Less.toInt32() == 0b1100);
    assert(Condition::NeitherGreaterNorEqual.toInt32() == 0b1100);

    assert(Condition::NotLess.toInt32() == 0b1101);
    assert(Condition::GreaterOrEqual.toInt32() == 0b1101);

    assert(Condition::LessOrEqual.toInt32() == 0b1110);
    assert(Condition::NotGreater.toInt32() == 0b1110);

    assert(Condition::NeitherLessNorEqual.toInt32() == 0b1111);
    assert(Condition::Greater.toInt32() == 0b1111);

}

impl Register {
    fun lowBits() -> Int32 {
        self.value & 0b111
    }

    fun needsRexBit() -> Bool {
        self.value > 7
    }
}

@test fun testAsmRegisters() {
    assert(RAX.lowBits() == 0 && !RAX.needsRexBit());
    assert(RCX.lowBits() == 1 && !RCX.needsRexBit());
    assert(RDX.lowBits() == 2 && !RDX.needsRexBit());
    assert(RBX.lowBits() == 3 && !RBX.needsRexBit());
    assert(RSP.lowBits() == 4 && !RSP.needsRexBit());
    assert(RBP.lowBits() == 5 && !RBP.needsRexBit());
    assert(RSI.lowBits() == 6 && !RSI.needsRexBit());
    assert(RDI.lowBits() == 7 && !RDI.needsRexBit());

    assert(R8.lowBits() == 0 && R8.needsRexBit());
    assert(R9.lowBits() == 1 && R9.needsRexBit());
    assert(R10.lowBits() == 2 && R10.needsRexBit());
    assert(R11.lowBits() == 3 && R11.needsRexBit());
    assert(R12.lowBits() == 4 && R12.needsRexBit());
    assert(R13.lowBits() == 5 && R13.needsRexBit());
    assert(R14.lowBits() == 6 && R14.needsRexBit());
    assert(R15.lowBits() == 7 && R15.needsRexBit());
}

@test fun testAsmPushqr(_x: Testing) {
    let asm = AssemblerX64();
    asm.pushqr(RAX);
    asm.pushqr(RSP);
    asm.pushqr(R8);
    asm.pushqr(R15);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x50Y);
    assertAsm(buffer, 1L, 0x54Y);
    assertAsm(buffer, 2L, 0x41Y, 0x50Y);
    assertAsm(buffer, 4L, 0x41Y, 0x57Y);
    assert(buffer.size() == 6L);
}

@test fun testAsmPopqr(_x: Testing) {
    let asm = AssemblerX64();
    asm.popqr(RAX);
    asm.popqr(RSP);
    asm.popqr(R8);
    asm.popqr(R15);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x58Y);
    assertAsm(buffer, 1L, 0x5CY);
    assertAsm(buffer, 2L, 0x41Y, 0x58Y);
    assertAsm(buffer, 4L, 0x41Y, 0x5FY);
    assert(buffer.size() == 6L);
}

@test fun testAsmMovqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.movqrr(R15, RAX);
    asm.movqrr(RAX, R15);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x49Y, 0x89Y, 0xC7Y);
    assertAsm(buffer, 3L, 0x4CY, 0x89Y, 0xF8Y);
    assert(buffer.size() == 6L);
}

@test fun testAsmMovlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.movlrr(R15, RAX);
    asm.movlrr(RAX, R15);
    asm.movlrr(RCX, RAX);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x41Y, 0x89Y, 0xC7Y);
    assertAsm(buffer, 3L, 0x44Y, 0x89Y, 0xF8Y);
    assertAsm(buffer, 6L, 0x89Y, 0xC1Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmAddqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.addqrr(RAX, RBX);
    asm.addqrr(RAX, R12);
    asm.addqrr(R12, RAX);
    asm.addqrr(R15, RSP);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x48Y, 0x01Y, 0xD8Y);
    assertAsm(buffer, 3L, 0x4CY, 0x01Y, 0xE0Y);
    assertAsm(buffer, 6L, 0x49Y, 0x01Y, 0xC4Y);
    assertAsm(buffer, 9L, 0x49Y, 0x01Y, 0xE7Y);
    assert(buffer.size() == 12L);
}

@test fun testAsmAddlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.addlrr(RAX, RBX);
    asm.addlrr(RCX, R15);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x01Y, 0xD8Y);
    assertAsm(buffer, 2L, 0x44Y, 0x01Y, 0xF9Y);
    assert(buffer.size() == 5L);
}

@test fun testAsmAddqri(_x: Testing) {
    let asm = AssemblerX64();
    asm.addqri(RAX, Immediate(0x11L));
    asm.addqri(R15, Immediate(0x11L));
    asm.addqri(RAX, Immediate(0x2211L));
    asm.addqri(RCX, Immediate(0x2211L));
    asm.addqri(R15, Immediate(0x2211L));
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x48Y, 0x83Y, 0xC0Y, 0x11Y);
    assertAsm(buffer, 4L, 0x49Y, 0x83Y, 0xC7Y, 0x11Y);
    assertAsm(buffer, 8L, 0x48Y, 0x05Y);
    assertAsmInt32(buffer, 10L, 0x2211);
    assertAsm(buffer, 14L, 0x48Y, 0x81Y, 0xC1Y);
    assertAsmInt32(buffer, 17L, 0x2211);
    assertAsm(buffer, 21L, 0x49Y, 0x81Y, 0xC7Y);
    assertAsmInt32(buffer, 24L, 0x2211);
    assert(buffer.size() == 28L);
}

@test fun testAsmSubqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.subqrr(RAX, RBX);
    asm.subqrr(RCX, R15);
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x48Y, 0x29Y, 0xD8Y);
    assertAsm(buffer, 3L, 0x4CY, 0x29Y, 0xF9Y);
    assert(buffer.size() == 6L);
}

@test fun testAsmSubqri(_x: Testing) {
    let asm = AssemblerX64();
    asm.subqri(RAX, Immediate(0x11L));
    asm.subqri(R15, Immediate(0x11L));
    asm.subqri(RAX, Immediate(0x2211L));
    asm.subqri(RCX, Immediate(0x2211L));
    asm.subqri(R15, Immediate(0x2211L));
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x48Y, 0x83Y, 0xE8Y, 0x11Y);
    assertAsm(buffer, 4L, 0x49Y, 0x83Y, 0xEFY, 0x11Y);
    assertAsm(buffer, 8L, 0x48Y, 0x2DY);
    assertAsmInt32(buffer, 10L, 0x2211);
    assertAsm(buffer, 14L, 0x48Y, 0x81Y, 0xE9Y);
    assertAsmInt32(buffer, 17L, 0x2211);
    assertAsm(buffer, 21L, 0x49Y, 0x81Y, 0xEFY);
    assertAsmInt32(buffer, 24L, 0x2211);
    assert(buffer.size() == 28L);
}

@test fun testAsmRetq(_x: Testing) {
    let asm = AssemblerX64();
    asm.retq();
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0xC3Y);
    assert(buffer.size() == 1L);
}

@test fun testAsmNop(_x: Testing) {
    let asm = AssemblerX64();
    asm.nop();
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x90Y);
    assert(buffer.size() == 1L);
}

@test fun testAsmCdqCqo(_x: Testing) {
    let asm = AssemblerX64();
    asm.cdq();
    asm.cqo();
    let buffer = asm.finalize();
    assertAsm(buffer, 0L, 0x99Y);
    assert(buffer.size() == 3L);
}

@test fun testAsmOrlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.orlrr(RAX, R15);
    asm.orlrr(RAX, RCX);
    asm.orlrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x44Y, 0x09Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x09Y, 0xc8Y);
    assertAsm(buffer, 5L, 0x41Y, 0x09Y, 0xC7Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmOrqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.orqrr(RAX, R15);
    asm.orqrr(RAX, RCX);
    asm.orqrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x4CY, 0x09Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x48Y, 0x09Y, 0xC8Y);
    assertAsm(buffer, 6L, 0x49Y, 0x09Y, 0xC7Y);
    assert(buffer.size() == 9L);
}

@test fun testAsmAndlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.andlrr(RAX, R15);
    asm.andlrr(RAX, RCX);
    asm.andlrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x44Y, 0x21Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x21Y, 0xC8Y);
    assertAsm(buffer, 5L, 0x41Y, 0x21Y, 0xC7Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmAndqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.andqrr(RAX, R15);
    asm.andqrr(RAX, RCX);
    asm.andqrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x4CY, 0x21Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x48Y, 0x21Y, 0xC8Y);
    assertAsm(buffer, 6L, 0x49Y, 0x21Y, 0xC7Y);
    assert(buffer.size() == 9L);
}

@test fun testAsmXorlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.xorlrr(RAX, R15);
    asm.xorlrr(RAX, RCX);
    asm.xorlrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x44Y, 0x31Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x31Y, 0xC8Y);
    assertAsm(buffer, 5L, 0x41Y, 0x31Y, 0xC7Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmXorqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.xorqrr(RAX, R15);
    asm.xorqrr(RAX, RCX);
    asm.xorqrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x4CY, 0x31Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x48Y, 0x31Y, 0xC8Y);
    assertAsm(buffer, 6L, 0x49Y, 0x31Y, 0xC7Y);
    assert(buffer.size() == 9L);
}

@test fun testAsmCmplrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.cmplrr(RAX, R15);
    asm.cmplrr(R15, RBX);
    asm.cmplrr(RAX, RBX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x44Y, 0x39Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x41Y, 0x39Y, 0xDFY);
    assertAsm(buffer, 6L, 0x39Y, 0xD8Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmCmpqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.cmpqrr(RAX, R15);
    asm.cmpqrr(R15, RBX);
    asm.cmpqrr(RAX, RBX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x4CY, 0x39Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x49Y, 0x39Y, 0xDFY);
    assertAsm(buffer, 6L, 0x48Y, 0x39Y, 0xD8Y);
    assert(buffer.size() == 9L);
}

@test fun testAsmImullrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.imullrr(RAX, RBX);
    asm.imullrr(RCX, R15);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x0FY, 0xAFY, 0xC3Y);
    assertAsm(buffer, 3L, 0x41Y, 0x0FY, 0xAFY, 0xCFY);
    assert(buffer.size() == 7L);
}

@test fun testAsmImulqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.imulqrr(RAX, RBX);
    asm.imulqrr(RCX, R15);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x48Y, 0x0FY, 0xAFY, 0xC3Y);
    assertAsm(buffer, 4L, 0x49Y, 0x0FY, 0xAFY, 0xCFY);
    assert(buffer.size() == 8L);
}

@test fun testAsmIdivlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.idivlr(RAX);
    asm.idivlr(R15);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0xF7Y, 0xF8Y);
    assertAsm(buffer, 2L, 0x41Y, 0xF7Y, 0xFFY);
    assert(buffer.size() == 5L);
}

@test fun testAsmIdivqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.idivqr(RAX);
    asm.idivqr(R15);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x48Y, 0xF7Y, 0xF8Y);
    assertAsm(buffer, 3L, 0x49Y, 0xF7Y, 0xFFY);
    assert(buffer.size() == 6L);
}

@test fun testAsmSetccr(_x: Testing) {
    let asm = AssemblerX64();
    asm.setccr(Condition::Equal, RAX);
    asm.setccr(Condition::NotEqual, R15);
    asm.setccr(Condition::GreaterOrEqual, RCX);
    asm.setccr(Condition::Greater, RDX);
    asm.setccr(Condition::LessOrEqual, RSI);
    asm.setccr(Condition::Less, RDI);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x0FY, 0x94Y, 0xC0Y);
    assertAsm(buffer, 3L, 0x41Y, 0x0FY, 0x95Y, 0xC7Y);
    assertAsm(buffer, 7L, 0x0FY, 0x9DY, 0xC1Y);
    assertAsm(buffer, 10L, 0x0FY, 0x9FY, 0xC2Y);
    assertAsm(buffer, 13L, 0x40Y, 0x0FY, 0x9EY, 0xC6Y);
    assertAsm(buffer, 17L, 0x40Y, 0x0FY, 0x9CY, 0xC7Y);
    assert(buffer.size() == 21L);
}

@test fun testAsmCallr(_x: Testing) {
    let asm = AssemblerX64();
    asm.callr(RAX);
    asm.callr(R15);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0xFFY, 0xD0Y);
    assertAsm(buffer, 2L, 0x41Y, 0xFFY, 0xD7Y);
    assert(buffer.size() == 5L);
}

@test fun testAsmCmovl(_x: Testing) {
    let asm = AssemblerX64();
    asm.cmovl(Condition::Equal, R15, RAX);
    asm.cmovl(Condition::NotEqual, RAX, R13);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x44Y, 0x0FY, 0x44Y, 0xF8Y);
    assertAsm(buffer, 4L, 0x41Y, 0x0FY, 0x45Y, 0xC5Y);
    assert(buffer.size() == 8L);
}

@test fun testAsmCmovq(_x: Testing) {
    let asm = AssemblerX64();
    asm.cmovq(Condition::Greater, RAX, RCX);
    asm.cmovq(Condition::Equal, R15, RAX);
    asm.cmovq(Condition::NotEqual, RAX, R13);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x48Y, 0x0FY, 0x4FY, 0xC1Y);
    assertAsm(buffer, 4L, 0x4CY, 0x0FY, 0x44Y, 0xF8Y);
    assertAsm(buffer, 8L, 0x49Y, 0x0FY, 0x45Y, 0xC5Y);
    assert(buffer.size() == 12L);
}

@test fun testAsmMovlri(_x: Testing) {
    let asm = AssemblerX64();
    asm.movlri(RAX, Immediate(2L));
    asm.movlri(R14, Immediate(3L));
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0xB8Y);
    assertAsmInt32(buffer, 1L, 2);
    assertAsm(buffer, 5L, 0x41Y, 0xBEY);
    assertAsmInt32(buffer, 7L, 3);
    assert(buffer.size() == 11L);
}

@test fun testAsmMovqri(_x: Testing) {
    let asm = AssemblerX64();
    asm.movqri(RAX, Immediate(1L));
    asm.movqri(R15, Immediate(-1L));
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x48Y, 0xC7Y, 0xC0Y);
    assertAsmInt32(buffer, 3L, 1);
    assertAsm(buffer, 7L, 0x49Y, 0xC7Y, 0xC7Y);
    assertAsmInt32(buffer, 10L, -1);
    assert(buffer.size() == 14L);
}

@test fun testTestlrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.testlrr(RAX, RAX);
    asm.testlrr(RSI, RAX);
    asm.testlrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x85Y, 0xC0Y);
    assertAsm(buffer, 2L, 0x85Y, 0xC6Y);
    assertAsm(buffer, 4L, 0x41Y, 0x85Y, 0xC7Y);
    assert(buffer.size() == 7L);
}

@test fun testTestqrr(_x: Testing) {
    let asm = AssemblerX64();
    asm.testqrr(RAX, RAX);
    asm.testqrr(RSI, RAX);
    asm.testqrr(R15, RAX);
    let buffer = asm.finalize();

    assertAsm(buffer, 0L, 0x48Y, 0x85Y, 0xC0Y);
    assertAsm(buffer, 3L, 0x48Y, 0x85Y, 0xC6Y);
    assertAsm(buffer, 6L, 0x49Y, 0x85Y, 0xC7Y);
    assert(buffer.size() == 9L);
}
