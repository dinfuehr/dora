fun main() {
    SOLAR_MASS = 4.0 * PI * PI;
    let n = std::argv(0I).toInt32().getOrPanic();
    let bodies = NBodySystem();

    var i = 0I;
    println(bodies.energy().toString());

    while i < n {
        bodies.advance(0.01);
        i = i + 1I;
    }

    println(bodies.energy().toString());
}

class NBodySystem {
    var bodies: Array[Body] = Array[Body]::empty();

    {
        self.bodies = Array[Body](
            Body::sun(),
            Body::jupiter(),
            Body::saturn(),
            Body::uranus(),
            Body::neptune(),
        );

        var px = 0.0;
        var py = 0.0;
        var pz = 0.0;

        for body in self.bodies {
            px = px + body.vx * body.mass;
            py = py + body.vy * body.mass;
            pz = pz + body.vz * body.mass;
        }

        self.bodies(0L).offsetMomentum(px, py, pz);
    }

    fun advance(dt: Float64) {
        for (i, iBody) in self.bodies.enumerate() {
            var j = i + 1L;

            while j < self.bodies.size() {
                let jBody = self.bodies(j);

                let dx = iBody.x - jBody.x;
                let dy = iBody.y - jBody.y;
                let dz = iBody.z - jBody.z;

                let dSquared = dx * dx + dy * dy + dz * dz;
                let distance = dSquared.sqrt();
                let mag = dt / (dSquared * distance);

                iBody.vx = iBody.vx - dx * jBody.mass * mag;
                iBody.vy = iBody.vy - dy * jBody.mass * mag;
                iBody.vz = iBody.vz - dz * jBody.mass * mag;

                jBody.vx = jBody.vx + dx * iBody.mass * mag;
                jBody.vy = jBody.vy + dy * iBody.mass * mag;
                jBody.vz = jBody.vz + dz * iBody.mass * mag;

                j = j + 1L;
            }
        }

        for body in self.bodies {
            body.x = body.x + dt * body.vx;
            body.y = body.y + dt * body.vy;
            body.z = body.z + dt * body.vz;
        }
   }

   fun energy(): Float64 {
      var dx = 0.0;
      var dy = 0.0;
      var dz = 0.0;
      var distance = 0.0;
      var e = 0.0;

      for (i, iBody) in self.bodies.enumerate() {
         e = e + 0.5 * iBody.mass *
            ( iBody.vx * iBody.vx
                + iBody.vy * iBody.vy
                + iBody.vz * iBody.vz );

        var j = i+1L;

        while j < self.bodies.size() {
            let jBody = self.bodies(j);

            dx = iBody.x - jBody.x;
            dy = iBody.y - jBody.y;
            dz = iBody.z - jBody.z;

            distance = (dx*dx + dy*dy + dz*dz).sqrt();
            e = e - (iBody.mass * jBody.mass) / distance;

            j = j + 1L;
        }
      }

      return e;
   }
}

const PI: Float64 = 3.141592653589793;
var SOLAR_MASS: Float64 = 0.0;
const DAYS_PER_YEAR: Float64 = 365.24;

class Body {
    var x: Float64 = 0.0;
    var y: Float64 = 0.0;
    var z: Float64 = 0.0;
    var vx: Float64 = 0.0;
    var vy: Float64 = 0.0;
    var vz: Float64 = 0.0;
    var mass: Float64 = 0.0;

   fun offsetMomentum(px: Float64, py: Float64, pz: Float64): Body {
      self.vx = -px / SOLAR_MASS;
      self.vy = -py / SOLAR_MASS;
      self.vz = -pz / SOLAR_MASS;
      return self;
   }

    @static fun jupiter(): Body {
        let p = Body();
        p.x = 4.84143144246472090e+00;
        p.y = -1.16032004402742839e+00;
        p.z = -1.03622044471123109e-01;
        p.vx = 1.66007664274403694e-03 * DAYS_PER_YEAR;
        p.vy = 7.69901118419740425e-03 * DAYS_PER_YEAR;
        p.vz = -6.90460016972063023e-05 * DAYS_PER_YEAR;
        p.mass = 9.54791938424326609e-04 * SOLAR_MASS;
        return p;
    }

   @static fun saturn(): Body {
      let p = Body();
      p.x = 8.34336671824457987e+00;
      p.y = 4.12479856412430479e+00;
      p.z = -4.03523417114321381e-01;
      p.vx = -2.76742510726862411e-03 * DAYS_PER_YEAR;
      p.vy = 4.99852801234917238e-03 * DAYS_PER_YEAR;
      p.vz = 2.30417297573763929e-05 * DAYS_PER_YEAR;
      p.mass = 2.85885980666130812e-04 * SOLAR_MASS;
      return p;
   }

   @static fun uranus(): Body {
      let p = Body();
      p.x = 1.28943695621391310e+01;
      p.y = -1.51111514016986312e+01;
      p.z = -2.23307578892655734e-01;
      p.vx = 2.96460137564761618e-03 * DAYS_PER_YEAR;
      p.vy = 2.37847173959480950e-03 * DAYS_PER_YEAR;
      p.vz = -2.96589568540237556e-05 * DAYS_PER_YEAR;
      p.mass = 4.36624404335156298e-05 * SOLAR_MASS;
      return p;
   }

   @static fun neptune(): Body {
      let p = Body();
      p.x = 1.53796971148509165e+01;
      p.y = -2.59193146099879641e+01;
      p.z = 1.79258772950371181e-01;
      p.vx = 2.68067772490389322e-03 * DAYS_PER_YEAR;
      p.vy = 1.62824170038242295e-03 * DAYS_PER_YEAR;
      p.vz = -9.51592254519715870e-05 * DAYS_PER_YEAR;
      p.mass = 5.15138902046611451e-05 * SOLAR_MASS;
      return p;
   }

   @static fun sun(): Body {
      let p = Body();
      p.mass = SOLAR_MASS;
      return p;
   }
}
