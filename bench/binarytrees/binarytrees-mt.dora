const MIN_DEPTH: Int32 = 4i32;
const DEFAULT_DEPTH: Int32 = 6i32;
const DEFAULT_THREADS: Int32 = 4i32;
use std::string::Stringable;

fn main() {
    let maxDepth = if std::argc() > 0i32 {
        std::argv(0i32).toInt32().getOrPanic()
    } else {
        DEFAULT_DEPTH
    };

    let number_threads = if std::argc() > 1i32 {
        std::argv(1i32).toInt32().getOrPanic()
    } else {
        DEFAULT_THREADS
    };

    let stretchDepth = maxDepth + 1i32;
    println("stretch tree of depth " + stretchDepth.toString() +
            "\t check: " + checkTree(createTree(stretchDepth)).toString());

    let longLastingNode = createTree(maxDepth);

    let mut i = 0i32;
    let threads = Vec[std::Thread]::new();
    let nextDepth = std::AtomicInt32::new(MIN_DEPTH);
    let results = Array[String]::fill((maxDepth - MIN_DEPTH).toInt64() / 2i64 + 1i64, "");

    while i < number_threads {
        let thread = std::thread::spawn(|| {
            TreeThread::new(nextDepth, maxDepth, results).run();
        });
        threads.push(thread);
        i = i + 1i32;
    }

    for thread in threads {
        thread.join();
    }

    for line in results {
        println(line);
    }

    println("long lived tree of depth " + maxDepth.toString()
        + "\t check: " + checkTree(longLastingNode).toString());
}

class TreeThread {
    nextDepth: std::AtomicInt32,
    maxDepth: Int32,
    results: Array[String],
}

impl TreeThread {
    static fn new(nextDepth: std::AtomicInt32, maxDepth: Int32, results: Array[String]): TreeThread {
        TreeThread(nextDepth, maxDepth, results)
    }

    fn run() {
        while true {
            let depth = self.nextDepth.fetchAdd(2i32);
            if depth > self.maxDepth { return; }
            let result = loops(self.maxDepth, depth);
            self.results((depth - MIN_DEPTH).toInt64() / 2i64) = result;
        }
    }
}

fn loops(maxDepth: Int32, depth: Int32): String {
    let iterations = 16i32 << (maxDepth - depth);
    let mut check = 0i32;
    let mut item = 0i32;

    while item < iterations {
        check = check + checkTree(createTree(depth));
        item = item + 1i32;
    }

    iterations.toString() + "\t trees of depth " +
        depth.toString() + "\t check: " + check.toString()
}

fn createTree(depth: Int32): TreeNode {
    let mut depth = depth;
    let node = TreeNode(
        item = 0i32,
        left = Option[TreeNode]::None,
        right = Option[TreeNode]::None
    );

    if depth > 0i32 {
        depth = depth - 1i32;
        node.left = Option[TreeNode]::Some(createTree(depth));
        node.right = Option[TreeNode]::Some(createTree(depth));
    }

    return node;
}

fn checkTree(node: TreeNode): Int32 {
  if node.left.isNone() {
    return 1i32;
  }

  return checkTree(node.left.getOrPanic()) +
         checkTree(node.right.getOrPanic()) + 1i32;
}

class TreeNode {
    item: Int32,
    left: Option[TreeNode],
    right: Option[TreeNode]
}
