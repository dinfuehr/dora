fn main() {
  let mut maxDepth = 6i32;

  if std::argc() > 0i32 {
    maxDepth = std::argv(0i32).toInt32().getOrPanic();
  }

  if 6i32 > maxDepth {
    maxDepth = 6i32;
  }

  let stretchDepth = maxDepth + 1i32;
  println("stretch tree of depth " + stretchDepth.toString() +
          "\t check: " + checkTree(createTree(stretchDepth)).toString());

  trees(maxDepth);
}

fn trees(maxDepth: Int32) {
  let longLastingNode = createTree(maxDepth);
  let mut depth = 4i32;

  while depth <= maxDepth {
    let iterations = 16i32 << (maxDepth - depth);

    loops(iterations, depth);
    depth = depth + 2i32;
  }

  println("long lived tree of depth " + maxDepth.toString()
    + "\t check: " + checkTree(longLastingNode).toString());
}

fn loops(iterations: Int32, depth: Int32) {
  let mut check = 0i32;
  let mut item = 0i32;

  while item < iterations {
    let mut tree = TreeNode(0i32, None[TreeNode], None[TreeNode]);
    tree = createTree(depth);
    check = check + checkTree(tree);
    item = item + 1i32;
  }

  println(iterations.toString() + "\t trees of depth " +
    depth.toString() + "\t check: " + check.toString());
}

fn createTree(depth: Int32): TreeNode {
  let mut depth = depth;
  let node = TreeNode(0i32, Option[TreeNode]::None, Option[TreeNode]::None);

  if depth > 0i32 {
    depth = depth - 1i32;
    node.left = Option[TreeNode]::Some(createTree(depth));
    node.right = Option[TreeNode]::Some(createTree(depth));
  }

  return node;
}

fn checkTree(node: TreeNode): Int32 {
  if node.left.isNone() {
    return 1i32;
  }

  return checkTree(node.left.getOrPanic()) +
         checkTree(node.right.getOrPanic()) + 1i32;
}

class TreeNode {
  item: Int32,
  left: Option[TreeNode],
  right: Option[TreeNode],
}
