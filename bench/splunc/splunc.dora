use std::argc;
use std::argv;
use std::exit;

class Node {
    payload: Option[Array[Int32]],
    birthday: Int32,
    value: Int32,
    left: Option[Node],
    right: Option[Node],
}

impl Node {
    static fn new(payload: Option[Array[Int32]]): Node {
        Node(
            payload,
            birthday = 0i32,
            value = 0i32,
            left = None[Node],
            right = None[Node]
        )
    }

    fn printAge(date: Int32) {
        println((date - self.birthday).toString());
    }

    fn printAges(date: Int32) {
        self.printAge(date);

        if self.left.isSome() {
            self.left.getOrPanic().printAges(date);
        }

        if self.right.isSome() {
            self.right.getOrPanic().printAges(date);
        }
    }

    fn printTree(date: Int32, prefix: String) {
        print(prefix);
        print("age: " + (date - self.birthday).toString());
        println(" value: " + self.value.toString());

        if self.left.isSome() {
            self.left.getOrPanic().printTree(date, prefix + "  ");
        }

        if self.right.isSome() {
            self.right.getOrPanic().printTree(date, prefix + "  ");
        }
    }

    static fn splay(tree: Option[Node], node: Node): Option[Node] {
        if tree.isNone() {
            return None;
        }
        let mut tree = tree.getOrPanic();

        node.left = None;
        node.right = None;

        let mut l: Node = node;
        let mut r: Node = node;

        while true {
            if node.value <= tree.value {
                if tree.left.isNone() {
                    break;
                }

                if node.value <= tree.left.getOrPanic().value {
                    // rotate right
                    let y = tree.left.getOrPanic();
                    tree.left = y.right;
                    y.right = Option[Node]::Some(tree);
                    tree = y;
                    if tree.left.isNone() {
                        break;
                    }
                }

                // link right
                r.left = Option[Node]::Some(tree);
                r = tree;
                tree = tree.left.getOrPanic();

            } else if node.value > tree.value {
                if tree.right.isNone() {
                    break;
                }

                if node.value > tree.right.getOrPanic().value {
                    // rotate left
                    let y = tree.right.getOrPanic();
                    tree.right = y.left;
                    y.left = Option[Node]::Some(tree);
                    tree = y;
                    if tree.right.isNone() {
                        break;
                    }
                }

                // link left
                l.right = Option[Node]::Some(tree);
                l = tree;
                tree = tree.right.getOrPanic();

            } else {
                break;
            }
        }

        l.right = tree.left;
        r.left = tree.right;
        tree.left = node.right;
        tree.right = node.left;
        Some[Node](tree)
    }

    static fn insert(tree: Option[Node], node: Node): Node {
        if tree.isNone() {
            return node;
        }

        let tree = Node::splay(tree, node).getOrPanic();

        if node.value <= tree.value {
            node.left = tree.left;
            node.right = Some(tree);
            tree.left = None;
        } else {
            node.right = tree.right;
            node.left = Some(tree);
            tree.right = None;
        }

        return node;
    }

    static fn trunc(date: Int32, tree: Node, depth: Int32) {
        if tree.left.isSome() {
            if depth == 0i32 {
                tree.left = None;
            } else {
                Node::trunc(date, tree.left.getOrPanic(), depth-1i32);
            }
        }

        if tree.right.isSome() {
            if depth == 0i32 {
                tree.right = None;
            } else {
                Node::trunc(date, tree.right.getOrPanic(), depth-1i32);
            }
        }
    }

    static fn countNodes(node: Option[Node]): Int32 {
        if node.isNone() {
            return 0i32;
        }
        let node = node.getOrPanic();
        return 1i32 + Node::countNodes(node.left) + Node::countNodes(node.right);
    }
}

fn main() {
    if argc() < 4i32 {
        println("usage: splunc <seed> <max-size> <iterations> <trunc-depth> [<iterations> <trunc-depth>]");
        exit(1i32);
    }

    let rnd = std::Random::new(argv(0i32).toInt64().getOrPanic());
    let max_size = argv(1i32).toInt32().getOrPanic();
    let mut date = 0i32;

    let mut tree: Node = Node::new(None[Array[Int32]]);
    tree.birthday = date;
    date = date + 1i32;
    tree.value = rnd.nextInt32WithBound(max_size);

    let mut j = 2i32;

    while j + 2i32 <= argc() {
        let n = argv(j).toInt32().getOrPanic();
        let depth = argv(j).toInt32().getOrPanic();

        let mut i = 0i32;
        while i < n {
            let value = rnd.nextInt32WithBound(4i32);

            let node = if value == 0i32 {
                Node::new(None[Array[Int32]])
            } else if value == 1i32 {
                Node::new(Some[Array[Int32]](Array[Int32]::zero(1)))
            } else if value == 2i32 {
                Node::new(Some[Array[Int32]](Array[Int32]::zero(2)))
            } else {
                assert(value == 3i32);
                Node::new(Some[Array[Int32]](Array[Int32]::zero(3)))
            };

            node.birthday = date;
            date = date + 1i32;
            node.value = rnd.nextInt32WithBound(max_size);

            tree = Node::insert(Option[Node]::Some(tree), node);
            Node::trunc(date, tree, depth);

            i = i + 1i32;
        }

        j = j + 2i32;
    }
}
