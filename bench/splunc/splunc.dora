@open @abstract class Node {
    var birthday: Int32;
    var value: Int32;
    var left: Node;
    var right: Node;

    fun printAge(date: Int32) {
        println((date - self.birthday).toString());
    }

    fun printAges(date: Int32) {
        self.printAge(date);

        if self.left !== nil {
            self.left.printAges(date);
        }

        if self.right !== nil {
            self.right.printAges(date);
        }
    }

    fun printTree(date: Int32, prefix: String) {
        print(prefix);
        print("age: " + (date - self.birthday).toString());
        println(" value: " + self.value.toString());

        if self.left !== nil {
            self.left.printTree(date, prefix + "  ");
        }

        if self.right !== nil {
            self.right.printTree(date, prefix + "  ");
        }
    }
}

module Node {
    fun splay(tree: Node, node: Node): Node {
        var tree = tree;
        if tree === nil {
            return tree;
        }

        node.left = nil;
        node.right = nil;

        var l: Node = node;
        var r: Node = node;

        while true {
            if node.value <= tree.value {
                if tree.left === nil {
                    break;
                }

                if node.value <= tree.left.value {
                    // rotate right
                    let y = tree.left;
                    tree.left = y.right;
                    y.right = tree;
                    tree = y;
                    if tree.left === nil {
                        break;
                    }
                }

                // link right
                r.left = tree;
                r = tree;
                tree = tree.left;

            } else if node.value > tree.value {
                if tree.right === nil {
                    break;
                }

                if node.value > tree.right.value {
                    // rotate left
                    let y = tree.right;
                    tree.right = y.left;
                    y.left = tree;
                    tree = y;
                    if tree.right === nil {
                        break;
                    }
                }

                // link left
                l.right = tree;
                l = tree;
                tree = tree.right;

            } else {
                break;
            }
        }

        l.right = tree.left;
        r.left = tree.right;
        tree.left = node.right;
        tree.right = node.left;
        return tree;
    }

    fun insert(tree: Node, node: Node): Node {
        var tree = tree;
        if tree === nil {
            return node;
        }

        tree = Node::splay(tree, node);

        if node.value <= tree.value {
            node.left = tree.left;
            node.right = tree;
            tree.left = nil;
        } else { // if (node.value > true.value)
            node.right = tree.right;
            node.left = tree;
            tree.right = nil;
        }

        return node;
    }

    fun trunc(date: Int32, tree: Node, depth: Int32) {
        if tree === nil {
            return;
        }

        if tree.left !== nil {
            if depth == 0 {
                /*if tree.left !== nil {
                    println("truncate left");
                }*/
                tree.left = nil;
            } else {
                Node::trunc(date, tree.left, depth-1);
            }
        }

        if tree.right !== nil {
            if depth == 0 {
                /*if tree.right !== nil {
                    println("truncate right");
                }*/
                tree.right = nil;
            } else {
                Node::trunc(date, tree.right, depth-1);
            }
        }
    }

    fun countNodes(node: Node): Int32 {
        if node === nil {
            return 0;
        }

        return 1 + Node::countNodes(node.left) + Node::countNodes(node.right);
    }
}

class NodeA extends Node {}
class NodeB extends Node { let x1: Int64 = 0L; }
class NodeC extends Node { let x1: Int64 = 0L; let x2: Int64 = 0L; }
class NodeD extends Node { let x1: Float64 = 0.0; let x2: Float64 = 0.0; let x3: Float64 = 0.0; }

class Node40 extends Node {}
class Node48 extends Node { let x1: Int64 = 0L; }
class Node56 extends Node { let x1: Int64 = 0L; let x2: Int64 = 0L; }
class Node64 extends Node { let x1: Int64 = 0L; let x2: Int64 = 0L; let x3: Int64 = 0L; }
class Node72 extends Node { let x1: Int64 = 0L; let x2: Int64 = 0L; let x3: Int64 = 0L; let x4: Int64 = 0L; }
class Node80 extends Node { let x1: Int64 = 0L; let x2: Int64 = 0L; let x3: Int64 = 0L; let x4: Int64 = 0L; let x5: Int64 = 0L; }

fun main() {
    if argc() < 4 {
        println("usage: splunc <seed> <max-size> <iterations> <trunc-depth> [<iterations> <trunc-depth>]");
        exit(1);
    }

    let rnd = Random(argv(0).toInt64().unwrap());
    let max_size = argv(1).toInt32().unwrap();
    var date = 0;

    var tree: Node = NodeA();
    tree.birthday = date;
    date = date + 1;
    tree.value = rnd.nextInt32WithBound(max_size);

    var j = 2;

    while j + 2 <= argc() {
        let n = argv(j).toInt32().unwrap();
        let depth = argv(j).toInt32().unwrap();

        var i = 0;
        while i < n {
            let value = rnd.nextInt32WithBound(4);
            var node: Node = nil;

            if value == 0 {
                node = NodeA();
            } else if value == 1 {
                node = NodeB();
            } else if value == 2 {
                node = NodeC();
            } else {
                assert(value == 3);
                node = NodeD();
            }

            node.birthday = date;
            date = date + 1;
            node.value = rnd.nextInt32WithBound(max_size);

            tree = Node::insert(tree, node);
            Node::trunc(date, tree, depth);

            // println("nodes in tree: " + Node::countNodes(tree).toString());

            i = i + 1;
        }

        j = j + 2;
    }
}
