use std::argc;
use std::argv;
use std::timestamp;

class Node {
    left: Option[Node],
    right: Option[Node],
    i: Int32,
    j: Int32,
}

impl Node {
    static fn new(left: Option[Node], right: Option[Node]): Node {
        Node(left, right, i = 0i32, j = 0i32)
    }

    static fn leaf(): Node {
        Node::new(Option[Node]::None, Option[Node]::None)
    }
}

let mut stretchTreeDepth: Int32 = 0i32;
let mut longLivedTreeDepth: Int32 = 0i32;
const kArraySize: Int32 = 500000i32;
const kMinTreeDepth: Int32 = 4i32;
const kMaxTreeDepth: Int32 = 16i32;

fn treeSize (i: Int32): Int32 {
    return (1i32 << (i + 1i32)) - 1i32;
}

fn numIters(i: Int32): Int32 {
    return 4i32 * treeSize(stretchTreeDepth) / treeSize(i);
}

fn populate(depth: Int32, thisNode: Node) {
    let mut depth = depth;
    if depth <= 0i32 {
        return;
    } else {
        depth = depth - 1i32;
        thisNode.left = Option[Node]::Some(Node::leaf());
        thisNode.right = Option[Node]::Some(Node::leaf());
        populate(depth, thisNode.left.getOrPanic());
        populate(depth, thisNode.right.getOrPanic());
    }
}

fn makeTree(iDepth: Int32): Node {
    if iDepth <= 0i32 {
        return Node::leaf();
    } else {
        return Node::new(Option[Node]::Some(makeTree(iDepth-1i32)), Option[Node]::Some(makeTree(iDepth-1i32)));
    }
}

fn timeConstruction(depth: Int32) {
    let iNumIters = numIters(depth);
    println("Creating " + iNumIters.toString() + " trees of depth " + depth.toString());
    let start = timestamp();

    let mut i = 0i32;

    while i < iNumIters {
        let tempTree = Node::leaf();
        populate(depth, tempTree);
        i = i + 1i32;
    }

    let finish = timestamp();
    let msecs = (finish - start).toFloat32() / 1000.0f32 / 1000.0f32;
    println("\tTop down construction took " + msecs.toString() + "ms");

    let start = finish;

    let mut i = 0i32;

    while i < iNumIters {
        let tempTree = makeTree(depth);
        i = i + 1i32;
    }

    let finish = timestamp();
    let msecs = (finish - start).toFloat32() / 1000.0f32 / 1000.0f32;
    println("\tBottom up construction took " + msecs.toString() + "ms");
}

fn main() {
    if argc() != 1i32 {
        println("usage: gcbench <depth>");
        std::exit(1i32);
    }

    let depth = argv(0i32).toInt32().getOrPanic();

    stretchTreeDepth = depth+1i32;
    longLivedTreeDepth = depth;

    println("Stretching memory with a binary tree of depth " + stretchTreeDepth.toString());
    let start = timestamp();

    makeTree(stretchTreeDepth);

    println("Creating a long-lived binary tree of depth " + longLivedTreeDepth.toString());
    let longLivedTree = Node::leaf();
    populate(longLivedTreeDepth, longLivedTree);

    println("Creating a long-lived array of " + kArraySize.toString() + " doubles");
    let array = Array[Float64]::fill(kArraySize.toInt64(), 0.0);

    let mut i = 0i32;

    while i < kArraySize / 2i32 {
        array(i.toInt64()) = 1.0/i.toFloat64();
        i = i + 1i32;
    }

    let mut d = kMinTreeDepth;

    while d <= depth {
        timeConstruction(d);
        d = d + 2i32;
    }

    assert(longLivedTree.i == 0i32 && array(1000i64) == 1.0/1000.0);
    let finish = timestamp();
    let elapsed = (finish - start).toFloat32() / 1000.0f32 / 1000.0f32;
    println("Completed in " + elapsed.toString() + "ms.");
}
