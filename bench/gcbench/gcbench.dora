class Node(left: Node, right: Node) {
    var i: Int32;
    var j: Int32;
    var left: Node = left;
    var right: Node = right;

    @static fun leaf() -> Node = Node(nil, nil);
}

var stretchTreeDepth: Int32;
var longLivedTreeDepth: Int32;
const kArraySize: Int32 = 500000;
const kMinTreeDepth: Int32 = 4;
const kMaxTreeDepth: Int32 = 16;

fun treeSize (i: Int32) -> Int32 {
    return (1 << (i + 1)) - 1;
}

fun numIters(i: Int32) -> Int32 {
    return 4 * treeSize(stretchTreeDepth) / treeSize(i);
}

fun populate(depth: Int32, thisNode: Node) {
    var depth = depth;
    if depth <= 0 {
        return;
    } else {
        depth = depth - 1;
        thisNode.left = Node::leaf();
        thisNode.right = Node::leaf();
        populate(depth, thisNode.left);
        populate(depth, thisNode.right);
    }
}

fun makeTree(iDepth: Int32) -> Node {
    if iDepth <= 0 {
        return Node::leaf();
    } else {
        return Node(makeTree(iDepth-1), makeTree(iDepth-1));
    }
}

fun timeConstruction(depth: Int32) {
    let iNumIters = numIters(depth);
    println("Creating " + iNumIters.toString() + " trees of depth " + depth.toString());
    let start = timestamp();

    var i = 0;

    while i < iNumIters {
        let tempTree = Node::leaf();
        populate(depth, tempTree);
        i = i + 1;
    }

    let finish = timestamp();
    let msecs = (finish - start).toFloat32() / 1000.0F / 1000.0F;
    println("\tTop down construction took " + msecs.toString() + "ms");

    let start = finish;

    var i = 0;

    while i < iNumIters {
        let tempTree = makeTree(depth);
        i = i + 1;
    }

    let finish = timestamp();
    let msecs = (finish - start).toFloat32() / 1000.0F / 1000.0F;
    println("\tBottom up construction took " + msecs.toString() + "ms");
}

fun main() {
    if argc() != 1 {
        println("usage: gcbench <depth>");
        exit(1);
    }

    let depth = argv(0).toInt32().unwrap();

    stretchTreeDepth = depth+1;
    longLivedTreeDepth = depth;

    println("Stretching memory with a binary tree of depth " + stretchTreeDepth.toString());
    let start = timestamp();

    makeTree(stretchTreeDepth);

    println("Creating a long-lived binary tree of depth " + longLivedTreeDepth.toString());
    let longLivedTree = Node::leaf();
    populate(longLivedTreeDepth, longLivedTree);

    println("Creating a long-lived array of " + kArraySize.toString() + " doubles");
    let array = Array::fill[Float64](kArraySize.toInt64(), 0.0);

    var i = 0;

    while i < kArraySize / 2 {
        array(i.toInt64()) = 1.0/i.toFloat64();
        i = i + 1;
    }

    var d = kMinTreeDepth;

    while d <= depth {
        timeConstruction(d);
        d = d + 2;
    }

    assert(longLivedTree !== nil && array(1000L) == 1.0/1000.0);
    let finish = timestamp();
    let elapsed = (finish - start).toFloat32() / 1000.0F / 1000.0F;
    println("Completed in " + elapsed.toString() + "ms.");
}
