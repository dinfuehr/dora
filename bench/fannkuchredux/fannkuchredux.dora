use std::string::Stringable;

fn main() {
  let mut n = 7i32;
  if std::argc() > 0i32 { n = std::argv(0i32).toInt32().getOrPanic(); }
  println("Pfannkuchen ("+n.toString()+") = " + fannkuch(n).toString());
}

fn fannkuch(n: Int32): Int32 {
  let perm = Array[Int32]::fill(n.toInt64(), 0i32);
  let perm1 = Array[Int32]::fill(n.toInt64(), 0i32);
  let count = Array[Int32]::fill(n.toInt64(), 0i32);
  let mut maxFlipsCount = 0i32;
  let mut permCount = 0i32;
  let mut checksum = 0i32;

  let mut i = 0i32;
  while i < n {
    perm1(i.toInt64()) = i;
    i = i + 1i32;
  }

  let mut r = n;

  while true {
    while r != 1i32 {
      count((r-1i32).toInt64()) = r;
      r = r - 1i32;
    }

    let mut i = 0i32;
    while i < n {
      perm(i.toInt64()) = perm1(i.toInt64());
      i = i + 1i32;
    }

    let mut flipsCount = 0i32;
    let mut k = perm(0i64);

    while k != 0i32 {
      let k2 = (k+1i32) / 2i32;

      let mut i = 0i32;
      while i < k2 {
        let temp = perm(i.toInt64());
        perm(i.toInt64()) = perm((k-i).toInt64());
        perm((k-i).toInt64()) = temp;

        i = i + 1i32;
      }

      flipsCount = flipsCount + 1i32;
      k = perm(0i64);
    }

    maxFlipsCount = Int32::max(maxFlipsCount, flipsCount);

    if permCount % 2i32 == 0i32 {
      checksum = checksum + flipsCount;
    } else {
      checksum = checksum - flipsCount;
    }

    while true {
      if r == n {
        println(checksum.toString());
        return maxFlipsCount;
      }

      let perm0 = perm1(0i64);
      let mut i = 0i32;

      while i < r {
        let j = i + 1i32;
        perm1(i.toInt64()) = perm1(j.toInt64());
        i = j;
      }

      perm1(r.toInt64()) = perm0;

      count(r.toInt64()) = count(r.toInt64()) - 1i32;

      if count(r.toInt64()) > 0i32 { break; }

      r = r + 1i32;
    }

    permCount = permCount + 1i32;
  }

  return -1i32;
}
