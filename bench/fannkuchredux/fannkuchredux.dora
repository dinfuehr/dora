fun main() {
  var n = 7;
  if argc() > 0 { n = argv(0).toInt32().unwrap(); }
  println("Pfannkuchen ("+n.toString()+") = " + fannkuch(n).toString());
}

fun fannkuch(n: Int32) -> Int32 {
  let perm = Array::fill[Int32](n.toInt64(), 0);
  let perm1 = Array::fill[Int32](n.toInt64(), 0);
  let count = Array::fill[Int32](n.toInt64(), 0);
  var maxFlipsCount = 0;
  var permCount = 0;
  var checksum = 0;

  var i = 0;
  while i < n {
    perm1(i.toInt64()) = i;
    i = i + 1;
  }

  var r = n;

  while true {
    while r != 1 {
      count((r-1).toInt64()) = r;
      r = r - 1;
    }

    var i = 0;
    while i < n {
      perm(i.toInt64()) = perm1(i.toInt64());
      i = i + 1;
    }

    var flipsCount = 0;
    var k = perm(0L);

    while k != 0 {
      let k2 = (k+1) / 2;

      var i = 0;
      while i < k2 {
        let temp = perm(i.toInt64());
        perm(i.toInt64()) = perm((k-i).toInt64());
        perm((k-i).toInt64()) = temp;

        i = i + 1;
      }

      flipsCount = flipsCount + 1;
      k = perm(0L);
    }

    maxFlipsCount = Int32::max(maxFlipsCount, flipsCount);

    if permCount % 2 == 0 {
      checksum = checksum + flipsCount;
    } else {
      checksum = checksum - flipsCount;
    }

    while true {
      if r == n {
        println(checksum.toString());
        return maxFlipsCount;
      }

      let perm0 = perm1(0L);
      var i = 0;

      while i < r {
        let j = i + 1;
        perm1(i.toInt64()) = perm1(j.toInt64());
        i = j;
      }

      perm1(r.toInt64()) = perm0;

      count(r.toInt64()) = count(r.toInt64()) - 1;

      if count(r.toInt64()) > 0 { break; }

      r = r + 1;
    }

    permCount = permCount + 1;
  }

  return -1;
}
