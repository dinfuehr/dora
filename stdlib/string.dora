internal class String {
  fun equals(rhs: String) -> bool {
    var i = 0;

    if self.len() != rhs.len() {
        return false;
    }

    let len = self.len();

    while i < len {
        if self.getByte(i) != rhs.getByte(i) {
            return false;
        }

        i = i + 1;
    }

    return true;
  }

  internal fun compareTo(rhs: String) -> int;

  internal fun len() -> int;
  internal fun parseInt() -> int;
  internal fun parseLong() -> long;
  internal fun plus(rhs: String) -> String;

  internal fun getByte(idx: int) -> byte;
  internal fun clone() -> String;

  internal static fun fromBytesPartOrNull(val: Array<byte>, offset: int, len: int) -> String;
  internal static fun fromStringPartOrNull(val: String, offset: int, len: int) -> String;

  static fun fromBytesPart(val: Array<byte>, offset: int, len: int) throws -> String {
    let str = String::fromBytesPartOrNull(val, offset, len);

    if str === nil {
      throw "invalid utf-8 encoding.";
    }

    return str;
  }

  static fun fromBytes(val: Array<byte>) throws -> String {
    let str = String::fromBytesPartOrNull(val, 0, val.len());

    if str === nil {
      throw "invalid utf-8 encoding.";
    }

    return str;
  }

  static fun fromStringPart(val: String, offset: int, len: int) throws -> String {
    let str = String::fromStringPartOrNull(val, offset, len);

    if str === nil {
      throw "invalid utf-8 encoding.";
    }

    return str;
  }

  static fun fromString(val: String) -> String {
    return val.clone();
  }

  fun isEmpty() -> bool {
      return self.len() == 0;
  }

  fun codePoints() -> StringCodePointIterator {
    return StringCodePointIterator(self, 0);
  }
}

class StringCodePointIterator(let value: String, var ind: int) {
    fun hasNext() -> bool {
        return self.ind < self.value.len();
    }

    fun next() -> char {
        var ch = self.value.getByte(self.ind);

        if ch <= 0x7FY {
            self.ind = self.ind + 1;
            return ch.toInt().toCharUnchecked();
        }

        if ch <= 0xBFY {
            fatalError("unexpected continuation byte");
        }

        if ch <= 0xDFY {
            let cp = (ch.toInt() & 0x1F) << 6 | (self.value.getByte(self.ind + 1).toInt() & 0x3F);
            self.ind = self.ind + 2;
            return cp.toCharUnchecked();
        }

        if ch <= 0xEFY {
            let cp = (ch.toInt() & 0xF) << 12 |
                 (self.value.getByte(self.ind + 1).toInt() & 0x3F) << 6 |
                 (self.value.getByte(self.ind + 2).toInt() & 0x3F);
            self.ind = self.ind + 3;
            return cp.toCharUnchecked();
        }

        if ch <= 0xF7Y {
            let cp = (ch.toInt() & 0x3) << 18 |
                 (self.value.getByte(self.ind + 1).toInt() & 0x3F) << 12 |
                 (self.value.getByte(self.ind + 2).toInt() & 0x3F) << 6 |
                 (self.value.getByte(self.ind + 3).toInt() & 0x3F);
            self.ind = self.ind + 4;
            return cp.toCharUnchecked();
        }

        fatalError("invalid utf8: " + ch.toInt().toString());
        return '\0';
    }

    fun len() -> int {
        var i = 0;

        while self.hasNext() {
            i = i + 1;
            self.next();
        }

        return i;
    }

    fun toString() -> String {
        return try! String::fromStringPart(self.value, self.ind, self.value.len() - self.ind);
    }
}
