internal fun fatalError(msg: Str);
internal fun abort();
internal fun exit(status: int);
fun unreachable() {
  fatalError("unreachable code");
}

fun unimplemented() {
  fatalError("not yet implemented");
}

internal fun print(text: Str);
internal fun println(text: Str);
internal fun address_of(object: Object) -> long;
internal fun assert(val: bool);
internal fun argc() -> int;
internal fun argv(idx: int) -> Str;
internal fun forceCollect();
internal fun forceMinorCollect();

internal fun call(fct: Str);
internal fun throwFromNative(val: bool) throws;
internal fun throwFromNativeButNotThrows(val: bool);

internal class bool {
  internal fun toInt() -> int;
  fun toString() -> Str {
    if self {
      return "true";
    } else {
      return "false";
    }
  }

  internal fun equals(rhs: bool) -> bool;
  internal fun not() -> bool;
}

internal class byte {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: byte) -> bool;
  internal fun compareTo(rhs: byte) -> int;
}

internal class char {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun equals(rhs: char) -> bool;
  internal fun compareTo(rhs: char) -> int;

  fun encodeUtf8(bytes: Array<byte>, offset: int) {
    let val = self.toInt();

    if val < 0x80 {
      bytes[offset] = val.toByte();
    } else if val < 0x800 {
      bytes[offset] = (0xC0 | ((val >> 6) & 0x1F)).toByte();
      bytes[offset+1] = (0x80 | (val & 0x3F)).toByte();
    } else if val < 0x10000 {
      bytes[offset] = (0xE0 | ((val >> 12) & 0x0F)).toByte();
      bytes[offset+1] = (0x80 | ((val >> 6) & 0x3F)).toByte();
      bytes[offset+2] = (0x80 | (val & 0x3F)).toByte();
    } else {
      bytes[offset] = (0xF0 | ((val >> 18) & 0x07)).toByte();
      bytes[offset+1] = (0x80 | ((val >> 12) & 0x3F)).toByte();
      bytes[offset+2] = (0x80 | ((val >> 6) & 0x3F)).toByte();
      bytes[offset+3] = (0x80 | (val & 0x3F)).toByte();
    }
  }

  fun lenUtf8() -> int {
    let val = self.toInt();

    if val < 0x80 {
      return 1;
    } else if val < 0x800 {
      return 2;
    } else if val < 0x10000 {
      return 3;
    } else {
      return 4;
    }
  }
}

internal class int {
  internal fun toByte() -> byte;
  fun toChar() throws -> char {
    if self >= 0 && self <= 0x10FFFF && (self < 0xD800 || self > 0xDFFF) {
      return self.toCharUnchecked();
    } else {
      throw "invalid code point";
    }
  }
  internal fun toCharUnchecked() -> char;
  internal fun toLong() -> long;
  internal fun toString() -> Str;

  internal fun toFloat() -> float;
  internal fun toDouble() -> double;

  internal fun equals(rhs: int) -> bool;
  internal fun compareTo(rhs: int) -> int;

  internal fun plus(rhs: int) -> int;
  internal fun minus(rhs: int) -> int;
  internal fun times(rhs: int) -> int;
  internal fun div(rhs: int) -> int;
  internal fun mod(rhs: int) -> int;

  internal fun bitwiseOr(rhs: int) -> int;
  internal fun bitwiseAnd(rhs: int) -> int;
  internal fun bitwiseXor(rhs: int) -> int;

  internal fun shiftLeft(rhs: int) -> int;
  internal fun shiftRight(rhs: int) -> int;
  internal fun unsignedShiftRight(rhs: int) -> int;

  internal fun unaryPlus() -> int;
  internal fun unaryMinus() -> int;
  internal fun not() -> int;

  fun abs() -> int {
    if self >= 0 {
      return self;
    } else {
      return -self;
    }
  }

  static fun min(lhs: int, rhs: int) -> int {
    if lhs < rhs {
      return lhs;
    } else {
      return rhs;
    }
  }

  static fun max(lhs: int, rhs: int) -> int {
    if lhs < rhs {
      return rhs;
    } else {
      return lhs;
    }
  }

  static fun max_value() -> int {
    return 2147483647;
  }

  static fun min_value() -> int {
    return -2147483648;
  }
}

internal class long {
  internal fun toByte() -> byte;
  fun toChar() throws -> char {
    if self >= 0L && self <= 0x10FFFFL && (self < 0xD800L || self > 0xDFFFL) {
      return self.toCharUnchecked();
    } else {
      throw "invalid code point";
    }
  }
  internal fun toCharUnchecked() -> char;
  internal fun toInt() -> int;
  internal fun toString() -> Str;

  internal fun toFloat() -> float;
  internal fun toDouble() -> double;

  internal fun equals(rhs: long) -> bool;
  internal fun compareTo(rhs: long) -> int;

  internal fun plus(rhs: long) -> long;
  internal fun minus(rhs: long) -> long;
  internal fun times(rhs: long) -> long;
  internal fun div(rhs: long) -> long;
  internal fun mod(rhs: long) -> long;

  internal fun bitwiseOr(rhs: long) -> long;
  internal fun bitwiseAnd(rhs: long) -> long;
  internal fun bitwiseXor(rhs: long) -> long;

  internal fun shiftLeft(rhs: long) -> long;
  internal fun shiftRight(rhs: long) -> long;
  internal fun unsignedShiftRight(rhs: long) -> long;

  internal fun unaryPlus() -> long;
  internal fun unaryMinus() -> long;
  internal fun not() -> long;

  static fun max_value() -> long {
    return 9223372036854775807L;
  }

  static fun min_value() -> long {
    return -9223372036854775808L;
  }
}

internal class float {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toDouble() -> double;
  internal fun toString() -> Str;

  internal fun equals(rhs: float) -> bool;
  internal fun compareTo(rhs: float) -> int;

  internal fun plus(rhs: float) -> float;
  internal fun minus(rhs: float) -> float;
  internal fun times(rhs: float) -> float;
  internal fun div(rhs: float) -> float;

  internal fun unaryPlus() -> float;
  internal fun unaryMinus() -> float;

  internal fun isNan() -> bool;
  internal fun sqrt() -> float;
}

internal class double {
  internal fun toInt() -> int;
  internal fun toLong() -> long;
  internal fun toFloat() -> float;
  internal fun toString() -> Str;

  internal fun equals(rhs: double) -> bool;
  internal fun compareTo(rhs: double) -> int;

  internal fun plus(rhs: double) -> double;
  internal fun minus(rhs: double) -> double;
  internal fun times(rhs: double) -> double;
  internal fun div(rhs: double) -> double;

  internal fun unaryPlus() -> double;
  internal fun unaryMinus() -> double;

  internal fun isNan() -> bool;
  internal fun sqrt() -> double;
}

class Object

internal class Array<T> {
  init() {}
  init(len: int) {}
  init(len: int, value: T) {
    var i = 0;

    while i < len {
      self[i] = value;
      i = i + 1;
    }
  }

  internal fun len() -> int;
  internal fun get(idx: int) -> T;
  internal fun set(idx: int, val: T);
}

fun arraycopy<T>(src: Array<T>, srcPos: int, dest: Array<T>, destPos: int, len: int) {
  var i = 0;

  while i < len {
    dest[destPos+i] = src[srcPos+i];
    i = i + 1;
  }
}

trait Equals {
  fun equals(other: Self) -> bool;
}

impl Equals for int {
  internal fun equals(other: int) -> bool;
}

trait Comparable {
  fun compareTo(other: Self) -> int;
}

impl Comparable for int {
  internal fun compareTo(other: int) -> int;
}

fun bubbleSort<T: Comparable>(array: Array<T>) {
  let len = array.len();
  var swapped = true;

  while swapped {
    swapped = false;

    var i = 1;

    while i < len {
      if array[i-1].compareTo(array[i]) > 0 {
        let temp = array[i-1];
        array[i-1] = array[i];
        array[i] = temp;

        swapped = true;
      }

      i = i + 1;
    }
  }

}

internal fun defaultValue<T>() -> T;

internal fun loadFunction(name: Str) -> long;
internal fun call0(fct: long) -> long;
internal fun call1(fct: long, arg0: long) -> long;
internal fun call2(fct: long, arg0: long, arg1: long) -> long;
internal fun call3(fct: long, arg0: long, arg1: long, arg2: long) -> long;
internal fun call4(fct: long,arg0: long,arg1: long,arg2: long,arg3: long) -> long;

internal fun native_malloc(size: long) -> long;
internal fun native_free(address: long);
internal fun set_uint8(address: long, val: byte);

fun native_string(val: Str) -> long {
  var i = 0;
  let len = val.len();

  let ptr = native_malloc(len.toLong()+1L);

  while i < len {
    set_uint8(ptr+i.toLong(), val.getByte(i));
    i = i + 1;
  }

  set_uint8(ptr+len.toLong(), 0Y);

  return ptr;
}


fun getenv(variable: Str) -> Str {
  let getenv_fct = loadFunction("getenv");
  let output = call1(getenv_fct,native_string(variable));
  return Str::fromRaw(output);
}

fun getpid() -> int {
  let fct = loadFunction("getpid");
  return call0(fct).toInt();
}

fun getppid() -> int {
  let fct = loadFunction("getppid");
  return call0(fct).toInt();
}

fun sleep(seconds: int) {
  let fct = loadFunction("sleep");
  call1(fct, seconds.toLong());
}

class Exception {
  var msg: Str = nil;
  var backtrace: Array<int> = nil;
  var elements: Array<StackTraceElement> = nil;

  init(msg: Str) {
    self.retrieveStackTrace();
    self.msg = msg;
  }

  init() {
    self.retrieveStackTrace();
  }

  fun getStackTrace() -> Array<StackTraceElement> {
    if self.elements !== nil {
      return self.elements;
    }

    if self.backtrace === nil {
      self.elements = Array::<StackTraceElement>();
      return self.elements;
    }

    var i = 0;
    let len = self.backtrace.len() / 2;
    self.elements = Array::<StackTraceElement>(len);

    while i < len {
      self.elements[i] = self.getStackTraceElement(i);
      i = i + 1;
    }

    return self.elements;
  }

  fun printStackTrace() {
    if self.msg !== nil {
      println("Exception: " + self.msg);
    } else {
      println("Exception");
    }

    let x = self.getStackTrace();

    var i = 0;

    while i < x.len() {
      println(i.toString() + ": " + x[i].toString());
      i = i + 1;
    }
  }

  internal fun retrieveStackTrace();
  internal fun getStackTraceElement(idx: int) -> StackTraceElement;
}

class StackTraceElement(let name: Str, let line: int) {
  fun toString() -> Str {
    return self.name + ": " + self.line.toString();
  }
}

class IntRange(let lower: int, let upper: int) {
  fun makeIterator() -> IntRangeIter {
    return IntRangeIter(self);
  }
}

fun range(lower: int, upper: int) -> IntRange {
  return IntRange(lower, upper);
}

trait Iterator {
  fun hasNext() -> bool;
  fun next() -> int;
}

class IntRangeIter(let range: IntRange) {
  var value: int = range.lower;
}

impl Iterator for IntRangeIter {
  fun hasNext() -> bool {
    return self.value < self.range.upper;
  }

  fun next() -> int {
    let cur = self.value;
    self.value = cur + 1;
    return cur;
  }
}

open abstract class Thread {
  internal fun start();

  abstract fun run();
}

