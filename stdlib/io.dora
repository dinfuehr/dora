@internal fn fileCreate(path: String): Int64;
@internal fn fileOpen(path: String): Int64;
@internal fn fileWrite(fd: Int64, array: Array[UInt8], offset: Int64, len: Int64): Int64;
@internal fn fileRead(fd: Int64, array: Array[UInt8], offset: Int64, len: Int64): Int64;
@internal fn fileClose(fd: Int64);

@internal fn getStdHandle(stdFd: Int32): Int64;

const DEFAULT_BUFFER_SIZE: Int64 = 16384;

pub class File {
    path: String,
}

impl File {
    pub static fn new(path: String): File {
        File(path)
    }

    pub static fn create(path: String): OpenFile {
        OpenFile(fileCreate(path))
    }

    pub static fn open(path: String): OpenFile {
        OpenFile(fileOpen(path))
    }

    pub fn readAsString(): Result[String, IOError] {
        let result = self.readAsBytes();

        match result {
            Ok(bytes) => {
                let value = String::fromBytes(bytes);
                match value {
                    Some(string) => Ok[String, IOError](string),
                    None => Err[String, IOError](IOError()),
                }
            }
            Err(e) => Err(e),
        }
    }

    pub fn readAsBytes(): Result[Array[UInt8], IOError] {
        let fd = fileOpen(self.path);
        if fd == -1 {
            return Err(IOError());
        }
        let file = OpenFile(fd);
        let result = Vec[UInt8]::new();
        let buffer = Array[UInt8]::zero(DEFAULT_BUFFER_SIZE);

        while true {
            let readResult = file.read(buffer, 0, buffer.size());

            match readResult {
                Ok(bytesRead) => {
                    if bytesRead == 0 {
                        // Reached end of file.
                        break;
                    } else {
                        assert(bytesRead > 0);
                        result.appendPart(buffer, 0, bytesRead);
                    }
                }

                Err(e) => return Err(e),
            }
        }

        file.close();
        Ok(result.toArray())
    }

    pub fn writeAsString(content: String): Result[(), IOError] {
        self.writeAsBytes(content.asBytes())
    }

    pub fn writeAsBytes(buffer: Array[UInt8]): Result[(), IOError] {
        let fd = fileCreate(self.path);
        if fd == -1 {
            return Err(IOError());
        }
        let file = OpenFile(fd);
        let mut written = 0;

        while written < buffer.size() {
            let len = Int64::min(buffer.size() - written, DEFAULT_BUFFER_SIZE);
            let result = file.write(buffer, written, len);

            match result {
                Ok(bytesWritten) => {
                    if bytesWritten <= 0 {
                        return Err(IOError());
                    }

                    written = written + bytesWritten;
                }

                Err(e) => return Err(e),
            }
        }

        file.close();
        Ok(())
    }
}

pub let stdin: OpenFile = OpenFile(getStdHandle(0i32));
pub let stdout: OpenFile = OpenFile(getStdHandle(1i32));
pub let stderr: OpenFile = OpenFile(getStdHandle(2i32));

pub class OpenFile {
    fd: Int64,
}

impl OpenFile {
    pub fn close() {
        if self.fd != -1 {
            fileClose(self.fd)
        }
    }
}

impl Read for OpenFile {
    fn read(array: Array[UInt8], offset: Int64, len: Int64): Result[Int64, IOError] {
        let read = fileRead(self.fd, array, 0, array.size());

        if read >= 0 {
            Ok[Int64, IOError](read)
        } else {
            Err[Int64, IOError](IOError())
        }
    }
}

impl Write for OpenFile {
    fn write(array: Array[UInt8], offset: Int64, len: Int64): Result[Int64, IOError] {
        let written = fileWrite(self.fd, array, offset, len);

        if written >= 0 {
            Ok[Int64, IOError](written)
        } else {
            Err[Int64, IOError](IOError())
        }
    }

    fn flush(): Result[(), IOError] {
        Ok(())
    }
}

pub trait Read {
    fn read(array: Array[UInt8], offset: Int64, len: Int64): Result[Int64, IOError];
}

pub trait Write {
    fn writeAll(array: Array[UInt8], offset: Int64, len: Int64): Result[(), IOError] {
        let mut curr = offset;
        let end = offset + len;

        while curr < end {
            let result = self.write(array, curr, end - curr);

            match result {
                Ok(bytesWritten) => {
                    if bytesWritten <= 0 {
                        return Err(IOError());
                    }

                    curr = curr + bytesWritten;
                }

                Err(e) => return Err(e),
            }
        }

        Ok(())
    }
    fn write(array: Array[UInt8], offset: Int64, len: Int64): Result[Int64, IOError];
    fn flush(): Result[(), IOError];
}

pub class IOError

pub class BufferedWriter {
    file: OpenFile,
    buffer: Array[UInt8],
    len: Int64,
}

impl BufferedWriter {
    pub static fn new(file: OpenFile): BufferedWriter {
        BufferedWriter(
            file,
            Array[UInt8]::zero(DEFAULT_BUFFER_SIZE),
            0,
        )
    }
}

impl BufferedWriter {
    fn flushBuffer(): Result[(), IOError] {
        let result = self.file.writeAll(self.buffer, 0, self.len);
        self.len = 0;
        result
    }

    fn remainingCapacity(): Int64 {
        self.buffer.size() - self.len
    }
}

impl Write for BufferedWriter {
    fn write(array: Array[UInt8], offset: Int64, len: Int64): Result[Int64, IOError] {
        if self.remainingCapacity() < len {
            let result = self.flushBuffer();

            if result.isErr() {
                return Err(result.getErrOrPanic());
            }
        }

        if len < self.buffer.size() {
            Array[UInt8]::copy(array, offset, self.buffer, self.len, len);
            self.len = self.len + len;
            Ok[Int64, IOError](len)
        } else {
            self.file.write(array, offset, len)
        }
    }

    fn flush(): Result[(), IOError] {
        self.flushBuffer()
    }
}

pub class Directory {
    path: String,
}

impl Directory {
    pub fn new(path: String): Directory {
        Directory(path)
    }
}

@internal fn socketConnect(addr: String): Int64;
@internal fn socketClose(fd: Int64);
@internal fn socketRead(fd: Int64, array: Array[UInt8], offset: Int64, len: Int64): Int64;
@internal fn socketWrite(fd: Int64, array: Array[UInt8], offset: Int64, len: Int64): Int64;

@internal fn socketBind(addr: String): Int64;
@internal fn socketAccept(fd: Int64): Int64;

pub class TcpListener {
    fd: Int64,
}

impl TcpListener {
    pub static fn bind(addr: String): Result[TcpListener, IOError] {
        let fd = socketBind(addr);
        if fd != -1 {
            Ok[TcpListener, IOError](TcpListener(fd))
        } else {
            Err[TcpListener, IOError](IOError())
        }
    }

    pub fn accept(): Result[TcpStream, IOError] {
        let stream_fd = socketAccept(self.fd);

        if stream_fd != -1 {
            Ok[TcpStream, IOError](TcpStream(stream_fd))
        } else {
            Err[TcpStream, IOError](IOError())
        }
    }

    pub fn close() {
        if self.fd != -1 {
            socketClose(self.fd);
            self.fd = -1;
        }
    }
}

pub class TcpStream {
    fd: Int64,
}

impl TcpStream {
    pub static fn connect(addr: String): Result[TcpStream, IOError] {
        let fd = socketConnect(addr);
        if fd != -1 {
            Ok[TcpStream, IOError](TcpStream(fd))
        } else {
            Err[TcpStream, IOError](IOError())
        }
    }

    pub fn close() {
        if self.fd != -1 {
            socketClose(self.fd);
            self.fd = -1;
        }
    }

    pub fn read(array: Array[UInt8]): Int64 {
        socketRead(self.fd, array, 0, array.size())
    }

    pub fn write(array: Array[UInt8]): Int64 {
        socketWrite(self.fd, array, 0, array.size())
    }
}
