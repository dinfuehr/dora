pub trait Default {
    static fn default(): Self;
}

pub trait Hash {
    fn hash(): Int32;
}

// Implementations of the `Zero` trait indicate that zero-initialized memory of the appropriate size can be allocated to
// represent a valid value of that type.¹
//
//   let numbers: Array[Int] = Array.ofZero[Int](4)
//   assert(numbers == Array(0, 0, 0, 0)
//
//   let strings: Array[Option[String]] = Array.ofZero[Option[String]](2)
//   assert(strings == Array(None, None)
//
// `Zero` is a special trait whose implementations are automatically derived for qualifying types.
// It cannot be implemented manually.
// A type qualifies if it is either `Option`, or obeys all of the following rules ...
// - The type is a struct.
// - The type does not contain any reference-types directly or transitively.
//
// ¹ This means that implementations of `Zero` may make full use of the operating system's optimization of `calloc`
//   (lazy allocation, lazy zeroing, copy on write, etc.), unlike implementations of the `Default` trait –
//   which invoke an user-defined function to initialize each individual element (malloc & loop with function calls).


// @restricted / @internal
pub trait Zero {
    static fn zero(): Self; // should be `let` instead of `fn`
}

pub enum Ordering {
    Less,
    Equal,
    Greater,
}

impl Ordering {
    pub fn is_lt(): Bool {
        match self {
            Ordering::Less => true,
            Ordering::Equal | Ordering::Greater => false,
        }
    }

    pub fn is_le(): Bool {
        match self {
            Ordering::Less | Ordering::Equal => true,
            Ordering::Greater => false,
        }
    }

    pub fn is_eq(): Bool {
        match self {
            Ordering::Equal => true,
            Ordering::Less | Ordering::Greater => false,
        }
    }

    pub fn is_ne(): Bool {
        match self {
          Ordering::Less | Ordering::Greater => true,
          Ordering::Equal => false,
        }
    }

    pub fn is_gt(): Bool {
        match self {
            Ordering::Greater => true,
            Ordering::Less | Ordering::Equal => false,
        }
    }

    pub fn is_ge(): Bool {
        match self {
            Ordering::Greater | Ordering::Equal => true,
            Ordering::Less => false,
        }
    }
}

pub trait Comparable {
    fn cmp(other: Self): Ordering;
}

pub trait Equals {
    fn equals(other: Self): Bool;
}

pub trait Add {
    fn add(rhs: Self): Self;
}

pub trait Sub {
    fn sub(rhs: Self): Self;
}

pub trait Mul {
    fn mul(rhs: Self): Self;
}

pub trait Div {
    fn div(rhs: Self): Self;
}

pub trait Mod {
    fn modulo(rhs: Self): Self;
}

pub trait BitAnd {
    fn bitand(rhs: Self): Self;
}

pub trait BitOr {
    fn bitor(rhs: Self): Self;
}

pub trait BitXor {
    fn bitxor(rhs: Self): Self;
}

pub trait Shl {
    fn shl(rhs: Int32): Self;
}

pub trait Shr {
    fn shr(rhs: Int32): Self;
}

pub trait Sar {
    fn sar(rhs: Int32): Self;
}

pub trait Not {
    fn not(): Self;
}

pub trait Neg {
    fn neg(): Self;
}

pub trait Iterator {
    type Item;
    fn next(): Option[Self::Item];

    fn count(): Int64 {
      let mut result = 0;

      while self.next() is Some(_) {
        result += 1;
      }

      result
    }

    @TraitObjectIgnore
    fn enumerate(): Enumerate[Self] {
        Enumerate[Self](it = self, idx = 0)
    }

    @TraitObjectIgnore
    fn map[R](f: (Self::Item): R): Map[Self, R] {
        Map[Self, R](it = self, fct = f)
    }

    // @TraitObjectIgnore
    // fn collect[X: FromIterator[Self::Item]](): X {
    //     X::fromIter(self)
    // }
}

pub trait IntoIterator {
    type IteratorType: Iterator;
    fn iter(): Self::IteratorType;
}

pub class Enumerate[I: Iterator] {
    it: I,
    idx: Int,
}

impl[I: Iterator] Iterator for Enumerate[I] {
    type Item = (Int, I::Item);

    fn next(): Option[(Int, I::Item)] {
        if self.it.next() is Some(value) {
            let idx = self.idx;
            self.idx += 1;
            Some[(Int, I::Item)]((idx, value))
        } else {
            None[(Int, I::Item)]
        }
    }
}

pub class Map[I: Iterator, R] {
    it: I,
    fct: (I::Item): R,
}

impl[I: Iterator, R] Iterator for Map[I, R] {
    type Item = R;

    fn next(): Option[R] {
        if self.it.next() is Some(value) {
            Some[R](self.fct(value))
        } else {
            None[R]
        }
    }
}

pub trait FromIterator[A] {
    fn fromIter[T](iter: T): Self where T: Iterator[Item=A];
}

pub trait IndexGet {
    type Index;
    type Item;
    fn get(index: Self::Index): Self::Item;
}

pub trait IndexSet {
    type Index;
    type Item;
    fn set(index: Self::Index, value: Self::Item);
}
