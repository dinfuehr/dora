use package::bytecode::{BytecodeFunction, BytecodeTraitType, BytecodeType, FunctionId, ImplId, Location};
use package::interface as iface;
use package::serializer::ByteWriter;

pub class CompilationInfo {
    pub fctId: FunctionId,
    pub loc: Location,
    pub compilationMode: iface::CompilationMode,
    pub emitDebug: Bool,
    pub emitGraph: Bool,
    pub emitHtml: Bool,
    pub emitCodeComments: Bool,
    pub inline: Bool,
    pub optimize: Bool,
    displayName: Option[String],
    inlinedFunctions: Vec[iface::InlinedFunction],
    byteWriter: ByteWriter,
    pub maxInlinableFunctionBytecodeSize: Int32,
    pub maxTotalInlinedBytecodeSize: Int32,
}

impl CompilationInfo {
    pub static fn new(
        fctId: FunctionId,
        loc: Location,
        compilationMode: iface::CompilationMode,
        emitDebug: Bool,
        emitGraph: Bool,
        emitHtml: Bool,
        emitCodeComments: Bool
    ): CompilationInfo {
        CompilationInfo(
            fctId,
            loc,
            compilationMode,
            emitDebug,
            emitGraph,
            emitHtml,
            emitCodeComments,
            inline = true,
            optimize = true,
            displayName = None[String],
            inlinedFunctions = Vec[iface::InlinedFunction]::new(),
            byteWriter = ByteWriter::new(),
            maxInlinableFunctionBytecodeSize = 200i32,
            maxTotalInlinedBytecodeSize = 1000i32,
        )
    }

    pub fn getDisplayName(): String {
        if self.displayName.isSome() {
            return self.displayName.getOrPanic();
        }

        let name = iface::getFunctionDisplayName(self.fctId);
        self.displayName = Some(name);
        name
    }

    pub fn addInlinedFunction(fct_id: FunctionId, type_params: Array[BytecodeType], location: iface::InlinedLocation): iface::InlinedFunctionId {
        let id = self.inlinedFunctions.size();
        self.inlinedFunctions.push(iface::InlinedFunction(fct_id, type_params, inlined_location = location));
        iface::InlinedFunctionId(id.toInt32())
    }

    pub fn getInlinedFunctions(): Array[iface::InlinedFunction] {
        self.inlinedFunctions.toArray()
    }

    pub fn getByteWriter(): ByteWriter {
        self.byteWriter.clear();
        self.byteWriter
    }
}

pub class FunctionCompilationInfo {
    pub fctId: FunctionId,
    pub bc: BytecodeFunction,
    pub returnType: BytecodeType,
    pub typeParams: Array[BytecodeType],
    pub specializeSelf: Option[SpecializeSelf],
}

pub struct SpecializeSelf {
    pub impl_id: ImplId,
    pub container_type_params: Int,
    pub trait_ty: BytecodeTraitType,
    pub extended_ty: BytecodeType,
}
