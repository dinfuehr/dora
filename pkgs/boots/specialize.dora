use package::bytecode::BytecodeType;
use package::interface as iface;
use package::CompilationInfo;
use package::compilation::{FunctionCompilationInfo, SpecializeSelf};

pub fn specializeTy(ci: CompilationInfo, specializeSelf: Option[SpecializeSelf], ty: BytecodeType, type_params: Array[BytecodeType]): BytecodeType {
    if !ty.isGeneric() {
        return ty;
    }

    match ty {
        BytecodeType::Unit
        | BytecodeType::Ptr
        | BytecodeType::UInt8
        | BytecodeType::Bool
        | BytecodeType::Char
        | BytecodeType::Int32
        | BytecodeType::Int64
        | BytecodeType::Float32
        | BytecodeType::Float64 => ty,
        BytecodeType::This => {
            let extended_ty = specializeSelf.getOrPanic().extended_ty;
            specializeTy(ci, None[SpecializeSelf], extended_ty, type_params)
        }
        BytecodeType::Struct(struct_id, struct_type_params) => {
            BytecodeType::Struct(struct_id, specializeArray(ci, specializeSelf, struct_type_params, type_params))
        },
        BytecodeType::Enum(enum_id, enum_type_params) => {
            BytecodeType::Enum(enum_id, specializeArray(ci, specializeSelf, enum_type_params, type_params))
        },
        BytecodeType::Class(class_id, class_type_params) => {
            BytecodeType::Class(class_id, specializeArray(ci, specializeSelf, class_type_params, type_params))
        },
        BytecodeType::TraitObject(trait_id, trait_type_params, assoc_types) => {
            BytecodeType::TraitObject(trait_id, specializeArray(ci, specializeSelf, trait_type_params, type_params), specializeArray(ci, specializeSelf, assoc_types, type_params))
        },
        BytecodeType::Tuple(subtypes) => {
            BytecodeType::Tuple(specializeArray(ci, specializeSelf, subtypes, type_params))
        },
        BytecodeType::TypeParam(idx) => {
            if specializeSelf is Some(specializeSelf) {
                let trait_params_count = specializeSelf.trait_ty.typeParams.size();
                if idx.toInt64() < trait_params_count {
                    let ty = specializeSelf.trait_ty.typeParams(idx.toInt64());
                    specializeTy(ci, None[SpecializeSelf], ty, type_params)
                } else {
                    let converted_id = specializeSelf.container_type_params + idx.toInt64() - trait_params_count;
                    type_params(converted_id)
                }
            } else {
                type_params(idx.toInt64())
            }
        }
        BytecodeType::Lambda(params, ret) => {
            BytecodeType::Lambda(specializeArray(ci, specializeSelf, params, type_params), specializeTy(ci, specializeSelf, ret, type_params))
        },
        BytecodeType::GenericAssoc(..) | BytecodeType::Assoc(..) => {
            iface::specializeAssocTy(ci, specializeSelf, ty, type_params)
        }
        BytecodeType::TypeAlias(..) => unreachable[BytecodeType](),
    }
}

pub fn specializeArray(ci: CompilationInfo, specializeSelf: Option[SpecializeSelf], array: Array[BytecodeType], type_params: Array[BytecodeType]): Array[BytecodeType] {
    if array.isEmpty() || !array.isGeneric() {
        return array;
    }

    let result = Array[BytecodeType]::fill(array.size(), BytecodeType::Unit);

    for idx in std::range(0, array.size()) {
        result(idx) = specializeTy(ci, specializeSelf, array(idx), type_params);
    }

    result
}
