use package::interface::{Address, Config, StructData, EnumData, EnumVariantData};
use package::bytecode::{AliasId, BytecodeFunction, BytecodeType, ClassId, ConstPoolEntry, EnumId, FunctionId, ClassFieldId, Location, StructId, StructFieldId, TraitId};
use package::bytecode::opcode as opc;
use package::compilation::CompilationInfo;
use package::interface::{FunctionInliningData, FunctionInliningInfo, Architecture};

pub fn decodeConfig(encoded: Array[UInt8]): Config {
    let reader = ByteReader::new(encoded);
    let architecture = decodeArchitecture(reader);
    let safepoint_trampoline = reader.readAddress();
    let trap_trampoline = reader.readAddress();
    let unreachable_trampoline = reader.readAddress();
    let fatal_error_trampoline = reader.readAddress();
    let object_write_barrier_slow_path = reader.readAddress();
    let allocation_slow_path = reader.readAddress();
    let meta_space_start = reader.readAddress();
    let is_windows = reader.readBool();
    let is_unix = reader.readBool();
    let needs_write_barrier = reader.readBool();
    let use_tlab = reader.readBool();
    let is_debug = reader.readBool();
    let has_lse_atomics = reader.readBool();
    let has_avx2 = reader.readBool();
    assert(!reader.moreBytes());

    Config(
        architecture,
        safepoint_trampoline,
        trap_trampoline,
        unreachable_trampoline,
        fatal_error_trampoline,
        object_write_barrier_slow_path,
        allocation_slow_path,
        meta_space_start,
        is_windows,
        is_unix,
        needs_write_barrier,
        use_tlab,
        is_debug,
        has_lse_atomics,
        has_avx2,
    )
}

pub fn decodeCompilationInfo(reader: ByteReader): CompilationInfo {
    let bc = decodeBytecodeFunction(reader);
    let fctId = FunctionId(reader.readInt32());
    let typeParams = decodeTypeParams(reader);
    let returnType = decodeBytecodeType(reader);
    let loc = decodeLocation(reader);
    let emitDebug = reader.readBool();
    let emitGraph = reader.readBool();
    let emitHtml = reader.readBool();
    let emitCodeComments = reader.readBool();
    CompilationInfo::new(bc, fctId, typeParams, returnType, loc, emitDebug, emitGraph, emitHtml, emitCodeComments)
}

pub fn decodeStructData(reader: ByteReader): StructData {
    let typeParams = reader.readInt32();
    let types = decodeBytecodeTypeArray(reader);
    StructData(typeParams, types)
}

pub fn decodeEnumData(reader: ByteReader): EnumData {
    let typeParams = reader.readInt32();
    let variants = decodeEnumVariants(reader);
    EnumData(typeParams, variants)
}

fn decodeEnumVariants(reader: ByteReader): Array[EnumVariantData] {
    let size = reader.readInt32().toInt64();
    let data = Vec[EnumVariantData]::new();

    let mut i = 0i64;

    while i < size {
        data.push(decodeEnumVariantData(reader));
        i = i + 1i64;
    }

    data.toArray()
}

fn decodeEnumVariantData(reader: ByteReader): EnumVariantData {
    let fields = decodeBytecodeTypeArray(reader);
    EnumVariantData(fields)
}

pub fn decodeBytecodeFunction(reader: ByteReader): BytecodeFunction {
    let code = decodeBytecodeArray(reader);
    let constpool = decodeConstPool(reader);
    let registers = decodeRegisters(reader);
    let locations = decodeLocations(reader);
    let arguments = reader.readInt32();
    BytecodeFunction(code, constpool, registers, locations, arguments)
}

fn decodeBytecodeArray(reader: ByteReader): Array[UInt8] {
    reader.readByteArray()
}

fn decodeTypeParams(reader: ByteReader): Array[BytecodeType] {
    decodeBytecodeTypeArray(reader)
}

fn decodeRegisters(reader: ByteReader): Array[BytecodeType] {
    let size = reader.readInt32().toInt64();
    let data = Array[BytecodeType]::fill(size, BytecodeType::UInt8);

    let mut i = 0i64;

    while i < size {
        data(i) = decodeBytecodeType(reader);
        i = i + 1i64;
    }

    data
}

fn decodeBytecodeType(reader: ByteReader): BytecodeType {
    let opcode = reader.readUInt8().toInt32();

    if opcode == opc::BC_TYPE_UNIT {
        BytecodeType::Unit
    } else if opcode == opc::BC_TYPE_BOOL {
        BytecodeType::Bool
    } else if opcode == opc::BC_TYPE_U_INT8 {
        BytecodeType::UInt8
    } else if opcode == opc::BC_TYPE_CHAR {
        BytecodeType::Char
    } else if opcode == opc::BC_TYPE_INT32 {
        BytecodeType::Int32
    } else if opcode == opc::BC_TYPE_INT64 {
        BytecodeType::Int64
    } else if opcode == opc::BC_TYPE_FLOAT32 {
        BytecodeType::Float32
    } else if opcode == opc::BC_TYPE_FLOAT64 {
        BytecodeType::Float64
    } else if opcode == opc::BC_TYPE_PTR {
        BytecodeType::Ptr
    } else if opcode == opc::BC_TYPE_STRUCT {
        let structId = StructId(reader.readId());
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Struct(structId, typeParams)
    } else if opcode == opc::BC_TYPE_CLASS {
        let class_id = ClassId(reader.readId());
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Class(class_id, typeParams)
    } else if opcode == opc::BC_TYPE_ENUM {
        let enum_id = EnumId(reader.readId());
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Enum(enum_id, typeParams)
    } else if opcode == opc::BC_TYPE_TRAIT_OBJECT {
        let trait_id = TraitId(reader.readId());
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Trait(trait_id, typeParams)
    } else if opcode == opc::BC_TYPE_TUPLE {
        let typeParams = decodeBytecodeTypeArray(reader);
        BytecodeType::Tuple(typeParams)
    } else if opcode == opc::BC_TYPE_TYPE_PARAM {
        let idx = reader.readId();
        BytecodeType::TypeParam(idx)
    } else if opcode == opc::BC_TYPE_LAMBDA {
        let params = decodeBytecodeTypeArray(reader);
        let returnType = decodeBytecodeType(reader);
        BytecodeType::Lambda(params, returnType)
    } else if opcode == opc::BC_TYPE_TYPE_ALIAS {
        let alias_id = AliasId(reader.readId());
        BytecodeType::TypeAlias(alias_id)
    } else {
        println("unknown bytecode type opcode = ${opcode}");
        unreachable[BytecodeType]()
    }
}

fn decodeConstPool(reader: ByteReader): Array[ConstPoolEntry] {
    let size = reader.readInt32().toInt64();

    let data = Array[ConstPoolEntry]::fill(size, ConstPoolEntry::Int32(0i32));
    let mut i = 0i64;

    while i < size {
        data(i) = decodeConstPoolEntry(reader);
        i = i + 1i64;
    }

    data
}

fn decodeConstPoolEntry(reader: ByteReader): ConstPoolEntry {
    let opcode = reader.readUInt8().toInt32();

    if opcode == opc::CONSTPOOL_OPCODE_STRING {
        let length = reader.readInt32().toInt64();
        let value = reader.readStringContent(length);
        ConstPoolEntry::String(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_FLOAT32 {
        let value = reader.readInt32().asFloat32();
        ConstPoolEntry::Float32(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_FLOAT64 {
        let value = reader.readInt64().asFloat64();
        ConstPoolEntry::Float64(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_INT32 {
        let value = reader.readInt32();
        ConstPoolEntry::Int32(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_INT64 {
        let value = reader.readInt64();
        ConstPoolEntry::Int64(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_CHAR {
        let value = reader.readInt32().toCharUnchecked();
        ConstPoolEntry::Char(value)
    } else if opcode == opc::CONSTPOOL_OPCODE_CLASS {
        let cls_id = ClassId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Class(cls_id, type_params)
    } else if opcode == opc::CONSTPOOL_OPCODE_FIELD {
        let cls_id = ClassId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        let field_id = ClassFieldId(reader.readInt32());
        ConstPoolEntry::Field(cls_id, type_params, field_id)
    } else if opcode == opc::CONSTPOOL_OPCODE_FCT {
        let fct_id = FunctionId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Fct(fct_id, type_params)
    } else if opcode == opc::CONSTPOOL_OPCODE_TRAIT_OBJECT_METHOD {
        let trait_object_ty = decodeBytecodeType(reader);
        let fct_id = FunctionId(reader.readInt32());
        ConstPoolEntry::TraitObjectMethod(trait_object_ty, fct_id)
    } else if opcode == opc::CONSTPOOL_OPCODE_GENERIC {
        let idx = reader.readInt32();
        let fct_id = FunctionId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Generic(idx, fct_id, type_params)
    } else if opcode == opc::CONSTPOOL_OPCODE_ENUM {
        let enum_id = EnumId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Enum(enum_id, type_params)
    } else if opcode == opc::CONSTPOOL_OPCODE_ENUM_VARIANT {
        let enum_id = EnumId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        let variant = reader.readInt32();
        ConstPoolEntry::EnumVariant(enum_id, type_params, variant)
    } else if opcode == opc::CONSTPOOL_OPCODE_ENUM_ELEMENT {
        let enum_id = EnumId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        let variant = reader.readInt32();
        let idx = reader.readInt32();
        ConstPoolEntry::EnumElement(enum_id, type_params, variant, idx)
    } else if opcode == opc::CONSTPOOL_OPCODE_STRUCT {
        let struct_id = StructId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Struct(struct_id, type_params)
    } else if opcode == opc::CONSTPOOL_OPCODE_STRUCT_FIELD {
        let struct_id = StructId(reader.readInt32());
        let type_params = decodeBytecodeTypeArray(reader);
        let field_id = StructFieldId(reader.readInt32());
        ConstPoolEntry::StructField(struct_id, type_params, field_id)
    } else if opcode == opc::CONSTPOOL_OPCODE_TRAIT_OBJECT {
        let trait_ty = decodeBytecodeType(reader);
        let actual_object_ty = decodeBytecodeType(reader);
        ConstPoolEntry::TraitObject(trait_ty, actual_object_ty)
    } else if opcode == opc::CONSTPOOL_OPCODE_TUPLE_ELEMENT {
        let ty = decodeBytecodeType(reader);
        let idx = reader.readInt32();
        ConstPoolEntry::TupleElement(ty, idx)
    } else if opcode == opc::CONSTPOOL_OPCODE_TUPLE {
        let types = decodeBytecodeTypeArray(reader);
        ConstPoolEntry::Tuple(types)
    } else if opcode == opc::CONSTPOOL_OPCODE_LAMBDA {
        let params = decodeBytecodeTypeArray(reader);
        let return_ty = decodeBytecodeType(reader);
        ConstPoolEntry::Lambda(params, return_ty)
    } else {
        println("unknown ConstPoolEntry opcode = ${opcode}");
        unreachable[ConstPoolEntry]()
    }
}

fn decodeLocations(reader: ByteReader): Array[(Int32, Location)] {
    let size = reader.readInt32().toInt64();

    let data = Array[(Int32, Location)]::fill(size, (0i32, Location(0i32, 0i32)));
    let mut i = 0i64;

    while i < size {
        let offset = reader.readInt32();
        let loc = decodeLocation(reader);
        data(i) = (offset, loc);
        i = i + 1i64;
    }

    data
}

fn decodeLocation(reader: ByteReader): Location {
    let line = reader.readInt32();
    let column = reader.readInt32();

    Location(line, column)
}

fn decodeArchitecture(reader: ByteReader): Architecture {
    let value = reader.readUInt8().toInt32();
    if value == opc::INSTRUCTION_SET_X64 {
        Architecture::X64
    } else if value == opc::INSTRUCTION_SET_ARM64 {
        Architecture::Arm64
    } else {
            println("unknown architecture = ${value}");
            unreachable[Architecture]()
    }
}

pub fn decodeBytecodeTypeArray(reader: ByteReader): Array[BytecodeType] {
    let size = reader.readInt32().toInt64();
    let data = Array[BytecodeType]::fill(size, BytecodeType::Unit);

    let mut i = 0i64;

    while i < size {
        data(i) = decodeBytecodeType(reader);
        i = i + 1i64;
    }

    data
}

pub fn decodeFunctionInliningData(reader: ByteReader): FunctionInliningData {
    let bc = decodeBytecodeFunction(reader);
    let returnType = decodeBytecodeType(reader);

    FunctionInliningData(bc, returnType)
}

pub fn decodeFunctionInliningInfo(reader: ByteReader): FunctionInliningInfo {
    let hasBytecode = reader.readBool();
    let bytecodeSize = reader.readInt32();
    let hasForceInlineAnnotation = reader.readBool();
    let hasNeverInlineAnnotation = reader.readBool();

    FunctionInliningInfo(hasBytecode, bytecodeSize, hasForceInlineAnnotation, hasNeverInlineAnnotation)
}

pub class ByteReader {
    array: Array[UInt8],
    idx: Int64,
}

impl ByteReader {
    static pub fn new(array: Array[UInt8]): ByteReader {
        ByteReader(array, 0)
    }

    pub fn moreBytes(): Bool {
        self.idx < self.array.size()
    }

    pub fn readUInt8(): UInt8 {
        let value = self.array(self.idx);
        self.idx = self.idx + 1i64;
        value
    }

    pub fn readBool(): Bool {
        let value = self.readUInt8();
        assert(value == 0u8 || value == 1u8);
        value == 1u8
    }

    pub fn readInt32(): Int32 {
        let by1 = self.readUInt8().toInt32();
        let by2 = self.readUInt8().toInt32();
        let by3 = self.readUInt8().toInt32();
        let by4 = self.readUInt8().toInt32();

        (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }

    pub fn readId(): Int32 {
        self.readInt32()
    }

    pub fn readInt64(): Int64 {
        let by1 = self.readUInt8().toInt64();
        let by2 = self.readUInt8().toInt64();
        let by3 = self.readUInt8().toInt64();
        let by4 = self.readUInt8().toInt64();
        let by5 = self.readUInt8().toInt64();
        let by6 = self.readUInt8().toInt64();
        let by7 = self.readUInt8().toInt64();
        let by8 = self.readUInt8().toInt64();

        (by8 << 56i32) | (by7 << 48i32) | (by6 << 40i32) | (by5 << 32i32) | (by4 << 24i32) | (by3 << 16i32) | (by2 << 8i32) | by1
    }

    pub fn readAddress(): Address {
        Address(self.readInt64())
    }

    pub fn readByteArray(): Array[UInt8] {
        let len = self.readInt32().toInt64();
        let data = Array[UInt8]::zero(len);

        let mut idx = 0i64;

        while idx < len {
            data(idx) = self.readUInt8();
            idx = idx + 1i64;
        }

        data
    }

    pub fn readStringContent(length: Int64): String {
        let value = String::fromBytesPart(self.array, self.idx, length).getOrPanic();
        self.idx = self.idx + length;
        value
    }

    pub fn position(): Int64 {
        self.idx
    }

    fn skipBytes(value: Int64) {
        self.idx = self.idx + value;
    }
}
