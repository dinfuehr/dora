use std::Stringable;
use std::StringBuffer;
use std::Equals;
use std::Hash;

use package::bytecode::{AliasId, ClassId, ClassFieldId, EnumId, FunctionId, StructId, StructFieldId, TraitId};
use package::bytecode::opcode as opc;
use package::graph::Block;

pub class BytecodeFunction {
    pub code: Array[UInt8],
    pub const_pool: Array[ConstPoolEntry],
    pub registers: Array[BytecodeType],
    pub locations: Array[(Int32, Location)],
    pub arguments: Int32,
}

impl BytecodeFunction {
    static fn new(
            code: Array[UInt8],
            const_pool: Array[ConstPoolEntry],
            registers: Array[BytecodeType],
            locations: Array[(Int32, Location)],
            arguments: Int32): BytecodeFunction {
        BytecodeFunction(code, const_pool, registers, locations, arguments)
    }

    pub fn constPool(idx: ConstPoolId): ConstPoolEntry {
        self.const_pool(idx.0.toInt64())
    }

    pub fn codeAt(idx: Int32): Int32 {
        self.code(idx.toInt64()).toInt32()
    }

    pub fn codeInt32At(idx: Int32): Int32 {
        let byte1 = self.codeAt(idx);
        let byte2 = self.codeAt(idx+1i32);
        let byte3 = self.codeAt(idx+2i32);
        let byte4 = self.codeAt(idx+3i32);

        (byte4 << 24i32) | (byte3 << 16i32) | (byte2 << 8i32) | byte1
    }

    pub fn hasLocationAt(at: Int32): Bool {
        self.locations.size() > 0 && at >= self.locations(0).0
    }

    pub fn getLocationAt(at: Int32): Location {
        let size = self.locations.size();

        if size == 0 || at < self.locations(0).0 {
            return unreachable[Location]();
        }

        let mut i = 1;

        while i < size {
            if at < self.locations(i).0 {
                return self.locations(i-1).1;
            }

            i = i + 1;
        }

        self.locations(size-1).1
    }
}

pub enum ConstPoolEntry {
    String(String),
    Float32(Float32),
    Float64(Float64),
    Int32(Int32),
    Int64(Int64),
    Char(Char),
    Class(ClassId, Array[BytecodeType]),
    Field(ClassId, Array[BytecodeType], ClassFieldId),
    Fct(FunctionId, Array[BytecodeType]),
    TraitObjectMethod(BytecodeType, FunctionId),
    Generic(Int32, FunctionId, Array[BytecodeType]),
    GenericSelf(FunctionId, Array[BytecodeType]),
    Enum(EnumId, Array[BytecodeType]),
    EnumVariant(EnumId, Array[BytecodeType], Int32),
    EnumElement(EnumId, Array[BytecodeType], Int32, Int32),
    Struct(StructId, Array[BytecodeType]),
    StructField(StructId, Array[BytecodeType], StructFieldId),
    TraitObject(BytecodeType, BytecodeType),
    TupleElement(BytecodeType, Int32),
    Tuple(Array[BytecodeType]),
    Lambda(Array[BytecodeType], BytecodeType),
    JumpTable { targets: Array[Int32], default: Int32 },
}

impl ConstPoolEntry {
    pub fn toChar(): Option[Char] {
        match self {
            ConstPoolEntry::Char(value) => Some(value),
            _ => None,
        }
    }

    pub fn toString(): Option[String] {
        match self {
            ConstPoolEntry::String(value) => Some(value),
            _ => None,
        }
    }

    pub fn toInt32(): Option[Int32] {
        match self {
            ConstPoolEntry::Int32(value) => Some(value),
            _ => None,
        }
    }

    pub fn toInt64(): Option[Int64] {
        match self {
            ConstPoolEntry::Int64(value) => Some(value),
            _ => None,
        }
    }

    pub fn toFloat32(): Option[Float32] {
        match self {
            ConstPoolEntry::Float32(value) => Some(value),
            _ => None,
        }
    }

    pub fn toFloat64(): Option[Float64] {
        match self {
            ConstPoolEntry::Float64(value) => Some(value),
            _ => None,
        }
    }
}

impl Stringable for ConstPoolEntry {
    fn toString(): String {
        match self {
            ConstPoolEntry::Int32(value) => "Int32 ${value}",
            ConstPoolEntry::Int64(value) => "Int64 ${value}",
            ConstPoolEntry::Float32(value) => "Float32 ${value}",
            ConstPoolEntry::Float64(value) => "Float64 ${value}",
            ConstPoolEntry::Char(value) => "Char ${value}",
            ConstPoolEntry::String(value) => "String ${value}",
            ConstPoolEntry::Class(id, typeParams) => "Class ${id}${typeParams}",
            ConstPoolEntry::Field(id, typeParams, fieldId) => "Field ${id}${typeParams}.${fieldId}",
            ConstPoolEntry::Fct(id, typeParams) => "Fct ${id}${typeParams}",
            ConstPoolEntry::TraitObjectMethod(ty, id) => "TraitObjectMethod ${ty} ${id}",
            ConstPoolEntry::Generic(tp, id, typeParams) => "Generic ${tp} ${id}${typeParams}",
            ConstPoolEntry::GenericSelf(id, typeParams) => "GenericSelf ${id}${typeParams}",
            ConstPoolEntry::Enum(id, typeParams) => "Enum ${id}${typeParams}",
            ConstPoolEntry::EnumVariant(id, typeParams, variant) => "EnumVariant ${id}${typeParams}::${variant}",
            ConstPoolEntry::EnumElement(id, typeParams, variant, element) => "EnumVariant ${id}${typeParams}::${variant}.${element}",
            ConstPoolEntry::Struct(id, typeParams) => "Struct ${id}${typeParams}",
            ConstPoolEntry::StructField(id, typeParams, fieldId) => "StructField ${id}${typeParams}.${fieldId}",
            ConstPoolEntry::TraitObject(trait_ty, actual_object_ty) => "Trait ${trait_ty}.${actual_object_ty}",
            ConstPoolEntry::TupleElement(ty, idx) => "TupleElement ${ty}.${idx}",
            ConstPoolEntry::Tuple(types) => "Tuple ${types}",
            ConstPoolEntry::Lambda(params, ret) => "Lambda ${params}:${ret}",
            ConstPoolEntry::JumpTable(targets, default) => {
                let output = StringBuffer::new();

                for (idx, target) in targets.enumerate() {
                    if idx > 0 {
                        output.append(", ");
                    }

                    output.append("${idx} -> ${target}");
                }

                "JumpTable ${output.toString()}, default ${default}"
            }
        }
    }
}

pub struct BytecodeRegister(pub Int32)

impl Equals for BytecodeRegister {
    fn equals(other: BytecodeRegister): Bool {
        self.0 == other.0
    }
}

impl Hash for BytecodeRegister {
    fn hash(): Int32 {
        self.0
    }
}

impl Stringable for BytecodeRegister {
    fn toString(): String { "r${self.0}" }
}

pub struct ConstPoolId(pub Int32)

impl Stringable for ConstPoolId {
    fn toString(): String {
        self.0.toString()
    }
}

pub enum BytecodeType {
    Unit,
    Ptr,
    UInt8,
    Bool,
    Char,
    Int32,
    Int64,
    Float32,
    Float64,
    This,
    Struct(StructId, Array[BytecodeType]),
    Enum(EnumId, Array[BytecodeType]),
    Class(ClassId, Array[BytecodeType]),
    TraitObject(TraitId, Array[BytecodeType], Array[BytecodeType]),
    Tuple(Array[BytecodeType]),
    TypeParam(Int32),
    Lambda(Array[BytecodeType], BytecodeType),
    TypeAlias(AliasId),
    Assoc(AliasId, Array[BytecodeType]),
    GenericAssoc { typeParamId: Int32, traitTy: BytecodeTraitType, assocId: AliasId },
}

impl BytecodeType {
    pub fn isAnyFloat(): Bool {
        match self {
            BytecodeType::Float32 | BytecodeType::Float64 => true,
            _ => false,
        }
    }

    pub fn isPtr(): Bool {
        match self {
            BytecodeType::Ptr => true,
            _ => false,
        }
    }

    pub fn isGeneric(): Bool {
        match self {
            BytecodeType::Unit
            | BytecodeType::Ptr
            | BytecodeType::UInt8
            | BytecodeType::Bool
            | BytecodeType::Char
            | BytecodeType::Int32
            | BytecodeType::Int64
            | BytecodeType::Float32
            | BytecodeType::Float64 => false,
            BytecodeType::This => true,
            BytecodeType::Struct(struct_id, type_params) => type_params.isGeneric(),
            BytecodeType::Enum(enum_id, type_params) => type_params.isGeneric(),
            BytecodeType::Class(class_id, type_params) => type_params.isGeneric(),
            BytecodeType::TraitObject(trait_id, type_params, _assocTypes) => type_params.isGeneric(),
            BytecodeType::Tuple(subtypes) => subtypes.isGeneric(),
            BytecodeType::TypeParam(idx) => true,
            BytecodeType::Lambda(params, ret) => params.isGeneric() || ret.isGeneric(),
            BytecodeType::GenericAssoc(..) => true,
            BytecodeType::TypeAlias(..) | BytecodeType::Assoc(..)  => unreachable[Bool](),
        }
    }

    pub fn isUnit(): Bool {
        match self {
            BytecodeType::Unit => true,
            _ => false,
        }
    }

    pub fn isStruct(): Bool {
        match self {
            BytecodeType::Struct(..) => true,
            _ => false,
        }
    }

    pub fn isTuple(): Bool {
        match self {
            BytecodeType::Tuple(_) => true,
            _ => false,
        }
    }

    pub fn isEnum(): Bool {
        match self {
            BytecodeType::Enum(..) => true,
            _ => false,
        }
    }

    pub fn specialize(type_params: Array[BytecodeType]): BytecodeType {
        if type_params.isEmpty() || !self.isGeneric() {
            return self;
        }

        match self {
            BytecodeType::Unit
            | BytecodeType::Ptr
            | BytecodeType::UInt8
            | BytecodeType::Bool
            | BytecodeType::Char
            | BytecodeType::Int32
            | BytecodeType::Int64
            | BytecodeType::Float32
            | BytecodeType::Float64
            | BytecodeType::This => self,
            BytecodeType::Struct(struct_id, struct_type_params) => {
                BytecodeType::Struct(struct_id, struct_type_params.specialize(type_params))
            },
            BytecodeType::Enum(enum_id, enum_type_params) => {
                BytecodeType::Enum(enum_id, enum_type_params.specialize(type_params))
            },
            BytecodeType::Class(class_id, class_type_params) => {
                BytecodeType::Class(class_id, class_type_params.specialize(type_params))
            },
            BytecodeType::TraitObject(trait_id, trait_type_params, assoc_types) => {
                BytecodeType::TraitObject(trait_id, trait_type_params.specialize(type_params), assoc_types.specialize(type_params))
            },
            BytecodeType::Tuple(subtypes) => {
                BytecodeType::Tuple(subtypes.specialize(type_params))
            },
            BytecodeType::TypeParam(idx) => type_params(idx.toInt64()),
            BytecodeType::Lambda(params, ret) => {
                BytecodeType::Lambda(params.specialize(type_params), ret.specialize(type_params))
            },
            BytecodeType::TypeAlias(..) | BytecodeType::Assoc(..) | BytecodeType::GenericAssoc(..) => unreachable[BytecodeType](),
        }
    }
}

impl Equals for BytecodeType {
    fn equals(other: BytecodeType): Bool {
        match self {
            BytecodeType::Unit => {
                match other {
                    BytecodeType::Unit => true,
                    _ => false,
                }
            }

            BytecodeType::Ptr => {
                match other {
                    BytecodeType::Ptr => true,
                    _ => false,
                }
            }

            BytecodeType::UInt8 => {
                match other {
                    BytecodeType::UInt8 => true,
                    _ => false,
                }
            }

            BytecodeType::Bool => {
                match other {
                    BytecodeType::Bool => true,
                    _ => false,
                }
            }

            BytecodeType::Char => {
                match other {
                    BytecodeType::Char => true,
                    _ => false,
                }
            }

            BytecodeType::Int32 => {
                match other {
                    BytecodeType::Int32 => true,
                    _ => false,
                }
            }

            BytecodeType::Int64 => {
                match other {
                    BytecodeType::Int64 => true,
                    _ => false,
                }
            }

            BytecodeType::Float32 => {
                match other {
                    BytecodeType::Float32 => true,
                    _ => false,
                }
            }

            BytecodeType::Float64 => {
                match other {
                    BytecodeType::Float64 => true,
                    _ => false,
                }
            }

            BytecodeType::This => {
                match other {
                    BytecodeType::This => true,
                    _ => false,
                }
            }

            BytecodeType::Struct(id, type_params) => {
                match other {
                    BytecodeType::Struct(other_id, other_type_params) => id == other_id && type_params == other_type_params,
                    _ => false,
                }
            }

            BytecodeType::Enum(id, type_params) => {
                match other {
                    BytecodeType::Enum(other_id, other_type_params) => id == other_id && type_params == other_type_params,
                    _ => false,
                }
            }

            BytecodeType::Class(id, type_params) => {
                match other {
                    BytecodeType::Class(other_id, other_type_params) => id == other_id && type_params == other_type_params,
                    _ => false,
                }
            }

            BytecodeType::TraitObject(id, type_params, assoc_types) => {
                match other {
                    BytecodeType::TraitObject(other_id, other_type_params, other_assoc_types) => id == other_id && type_params == other_type_params && assoc_types == other_assoc_types,
                    _ => false,
                }
            }

            BytecodeType::Tuple(subtypes) => {
                match other {
                    BytecodeType::Tuple(other_subtypes) => subtypes == other_subtypes,
                    _ => false,
                }
            }

            BytecodeType::TypeParam(id) => {
                match other {
                    BytecodeType::TypeParam(other_id) => id == other_id,
                    _ => false,
                }
            }

            BytecodeType::Lambda(params, ret) => {
                match other {
                    BytecodeType::Lambda(other_params, other_ret) => params == other_params && ret == other_ret,
                    _ => false,
                }
            }

            BytecodeType::TypeAlias(id) => {
                match other {
                    BytecodeType::TypeAlias(other_id) => id == other_id,
                    _ => false,
                }
            }

            BytecodeType::Assoc(..) | BytecodeType::GenericAssoc(..) => unreachable[Bool](),
        }
    }
}

impl Hash for BytecodeType {
    fn hash(): Int32 {
        match self {
            BytecodeType::Unit => opc::BC_TYPE_UNIT,
            BytecodeType::Ptr => opc::BC_TYPE_PTR,
            BytecodeType::UInt8 => opc::BC_TYPE_U_INT8,
            BytecodeType::Bool => opc::BC_TYPE_BOOL,
            BytecodeType::Char => opc::BC_TYPE_CHAR,
            BytecodeType::Int32 => opc::BC_TYPE_INT32,
            BytecodeType::Int64 => opc::BC_TYPE_INT64,
            BytecodeType::Float32 => opc::BC_TYPE_FLOAT32,
            BytecodeType::Float64 => opc::BC_TYPE_FLOAT64,
            BytecodeType::This => opc::BC_TYPE_THIS,
            BytecodeType::Struct(id, type_params) => opc::BC_TYPE_STRUCT ^ id.hash() ^ type_params.hash(),
            BytecodeType::Enum(id, type_params) => opc::BC_TYPE_ENUM ^ id.hash() ^ type_params.hash(),
            BytecodeType::Class(id, type_params) => opc::BC_TYPE_CLASS ^ id.hash() ^ type_params.hash(),
            BytecodeType::TraitObject(id, type_params, assoc_types) => opc::BC_TYPE_TRAIT_OBJECT ^ id.hash() ^ type_params.hash() ^ assoc_types.hash(),
            BytecodeType::Tuple(subtypes) => opc::BC_TYPE_TUPLE ^ subtypes.hash(),
            BytecodeType::TypeParam(id) => opc::BC_TYPE_TYPE_PARAM ^ id,
            BytecodeType::Lambda(params, ret) => params.hash() ^ ret.hash(),
            BytecodeType::TypeAlias(id) => opc::BC_TYPE_TYPE_ALIAS ^ id.hash(),
            BytecodeType::Assoc(..) | BytecodeType::GenericAssoc(..) => unreachable[Int32](),
        }
    }
}

impl Stringable for BytecodeType {
    fn toString(): String {
        match self {
            BytecodeType::Unit => "Unit",
            BytecodeType::Ptr => "Ptr",
            BytecodeType::UInt8 => "UInt8",
            BytecodeType::Bool => "Bool",
            BytecodeType::Char => "Char",
            BytecodeType::Int32 => "Int32",
            BytecodeType::Int64 => "Int64",
            BytecodeType::Float32 => "Float32",
            BytecodeType::Float64 => "Float64",
            BytecodeType::This => "This",
            BytecodeType::Struct(id, params) => "Struct(${id}, ${params})",
            BytecodeType::Enum(id, params) => "Enum(${id}, ${params})",
            BytecodeType::Class(id, params) => "Class(${id}, ${params})",
            BytecodeType::TraitObject(id, params, assoc) => "TraitObject(${id}, ${params}, ${assoc})",
            BytecodeType::Tuple(types) => "Tuple(${types})",
            BytecodeType::TypeParam(idx) => "TypeParam(${idx})",
            BytecodeType::Lambda(params, ty) => "Lambda(${params}, ${ty})",
            BytecodeType::TypeAlias(id) => "TypeAlias(${id})",
            BytecodeType::Assoc(..) | BytecodeType::GenericAssoc(..) => unreachable[String](),
        }
    }
}

pub trait BytecodeTypeArrayExt {
    fn isGeneric(): Bool;
    fn specialize(type_params: Array[BytecodeType]): Array[BytecodeType];
}

impl BytecodeTypeArrayExt for Array[BytecodeType] {
    fn isGeneric(): Bool {
        for value in self {
            if value.isGeneric() {
                return true;
            }
        }

        false
    }

    fn specialize(type_params: Array[BytecodeType]): Array[BytecodeType] {
        if type_params.isEmpty() || !self.isGeneric() {
            return self;
        }

        let result = Array[BytecodeType]::fill(self.size(), BytecodeType::Unit);

        for idx in std::range(0, self.size()) {
            result(idx) = self(idx).specialize(type_params);
        }

        result
    }
}

pub struct Location {
    pub line: Int32,
    pub column: Int32,
}

pub class BytecodeTraitType {
    pub trait_id: TraitId,
    pub typeParams: Array[BytecodeType],
    pub bindings: Array[(AliasId, BytecodeType)],
}
