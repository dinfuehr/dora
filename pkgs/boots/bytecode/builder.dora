use package::bytecode::{ClassId, Location, GlobalId, FunctionId, ClassFieldId, ConstPoolId,
    ConstPoolEntry, BytecodeRegister, BytecodeFunction, BytecodeType};
use package::bytecode::opcode as opc;

pub class BytecodeBuilder {
    pub code: Vec[UInt8],
    pub constPool: Vec[ConstPoolEntry],
    pub registers: Vec[BytecodeType],
    pub unresolvedJumps: Vec[UnresolvedJump],
    pub arguments: Int32,
}

impl BytecodeBuilder {
    pub static fn new(): BytecodeBuilder {
        BytecodeBuilder(
            code = Vec[UInt8]::new(),
            constPool = Vec[ConstPoolEntry]::new(),
            registers = Vec[BytecodeType]::new(),
            unresolvedJumps = Vec[UnresolvedJump]::new(),
            arguments = 0i32
        )
    }

    pub fn addRegister(ty: BytecodeType): BytecodeRegister {
        self.registers.push(ty);
        BytecodeRegister(self.registers.size().toInt32() - 1i32)
    }

    pub fn addNRegisters(ty: BytecodeType, count: Int64) {
        let mut idx = 0;

        while idx < count {
            self.registers.push(ty);
            idx = idx + 1;
        }

        self.registers.push(ty);
    }

    pub fn addRegisters(types: BytecodeType...) {
        for ty in types {
            self.registers.push(ty);
        }
    }

    pub fn createLabel(): BytecodeLabel {
        BytecodeLabel::new()
    }

    pub fn defineLabel(): BytecodeLabel {
        BytecodeLabel::new().bindTo(self.code.size().toInt32())
    }

    pub fn bindLabel(lbl: BytecodeLabel) {
        lbl.bindTo(self.code.size().toInt32());
    }

    pub fn setArguments(arguments: Int32) {
        self.arguments = arguments;
    }

    pub fn emitAdd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_ADD, dest, lhs, rhs);
    }

    pub fn emitSub(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SUB, dest, lhs, rhs);
    }

    pub fn emitNeg(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_NEG, dest, src);
    }

    pub fn emitMul(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_MUL, dest, lhs, rhs);
    }

    pub fn emitDiv(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_DIV, dest, lhs, rhs);
    }

    pub fn emitMod(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_MOD, dest, lhs, rhs);
    }

    pub fn emitAnd(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_AND, dest, lhs, rhs);
    }

    pub fn emitOr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_OR, dest, lhs, rhs);
    }

    pub fn emitXor(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_XOR, dest, lhs, rhs);
    }

    pub fn emitNot(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_NOT, dest, src);
    }

    pub fn emitShl(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SHL, dest, lhs, rhs);
    }

    pub fn emitShr(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SHR, dest, lhs, rhs);
    }

    pub fn emitSar(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_SAR, dest, lhs, rhs);
    }

    pub fn emitMov(dest: BytecodeRegister, src: BytecodeRegister) {
        self.emitReg2(opc::BC_MOV, dest, src);
    }

    pub fn emitLoadField(dest: BytecodeRegister, obj: BytecodeRegister, cls: ClassId, field: ClassFieldId) {
        self.emitField(opc::BC_LOAD_FIELD, dest, obj, cls, field);
    }

    pub fn emitStoreField(src: BytecodeRegister, obj: BytecodeRegister, cls: ClassId, field: ClassFieldId) {
        self.emitField(opc::BC_STORE_FIELD, src, obj, cls, field);
    }

    pub fn emitLoadGlobal(dest: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(opc::BC_LOAD_GLOBAL, dest, glob);
    }

    pub fn emitStoreGlobal(src: BytecodeRegister, glob: GlobalId) {
        self.emitGlobal(opc::BC_STORE_GLOBAL, src, glob);
    }

    pub fn emitPushRegister(src: BytecodeRegister) {
        self.emitReg1(opc::BC_PUSH_REGISTER, src);
    }

    pub fn emitConstTrue(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_CONST_TRUE, dest);
    }

    pub fn emitConstFalse(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_CONST_FALSE, dest);
    }

    pub fn emitConstByte(dest: BytecodeRegister, value: UInt8) {
        self.emitReg1AndByte(opc::BC_CONST_UINT8, dest, value);
    }

    pub fn emitConstChar(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_CHAR, dest, idx);
    }

    pub fn emitConstInt32(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_INT32, dest, idx);
    }

    pub fn emitConstInt32Value(dest: BytecodeRegister, value: Int32) {
        let idx = self.addConst(ConstPoolEntry::Int32(value));
        self.emitReg1AndIdx(opc::BC_CONST_INT32, dest, idx);
    }

    pub fn emitConstInt64(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_INT64, dest, idx);
    }

    pub fn emitConstFloat32(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_FLOAT32, dest, idx);
    }

    pub fn emitConstFloat64(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_FLOAT64, dest, idx);
    }

    pub fn emitConstString(dest: BytecodeRegister, idx: ConstPoolId) {
        self.emitReg1AndIdx(opc::BC_CONST_STRING, dest, idx);
    }

    pub fn emitTestEq(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_EQ, dest, lhs, rhs);
    }

    pub fn emitTestNe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_NE, dest, lhs, rhs);
    }

    pub fn emitTestGt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_GT, dest, lhs, rhs);
    }

    pub fn emitTestGe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_GE, dest, lhs, rhs);
    }

    pub fn emitTestLt(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_LT, dest, lhs, rhs);
    }

    pub fn emitTestLe(dest: BytecodeRegister, lhs: BytecodeRegister, rhs: BytecodeRegister) {
        self.emitReg3(opc::BC_TEST_LE, dest, lhs, rhs);
    }

    pub fn emitLoopStart() {
        self.emitInst(opc::BC_LOOP_START);
    }

    pub fn emitJumpLoop(lbl: BytecodeLabel) {
        assert(lbl.isBound());
        let offset = self.code.size().toInt32() - lbl.offset();
        self.emitJmp(opc::BC_JUMP_LOOP, offset);
    }

    pub fn emitJumpIfFalse(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(opc::BC_JUMP_IF_FALSE, Some[BytecodeRegister](opnd), lbl);
    }

    pub fn emitJumpIfTrue(opnd: BytecodeRegister, lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(opc::BC_JUMP_IF_TRUE, Some[BytecodeRegister](opnd), lbl);
    }

    pub fn emitJump(lbl: BytecodeLabel) {
        assert(!lbl.isBound());
        self.emitJmpForward(opc::BC_JUMP, None[BytecodeRegister], lbl);
    }

    pub fn emitInvokeDirect(dest: BytecodeRegister, fct: FunctionId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_DIRECT, dest, fct, start, count);
    }

    pub fn emitInvokeVirtual(dest: BytecodeRegister, fct: FunctionId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_VIRTUAL, dest, fct, start, count);
    }

    pub fn emitInvokeStatic(dest: BytecodeRegister, fct: FunctionId, start: BytecodeRegister, count: Int32) {
        self.emitFct(opc::BC_INVOKE_STATIC, dest, fct, start, count);
    }

    pub fn emitNewObject(dest: BytecodeRegister, cls: ClassId) {
        self.emitVal3(opc::BC_NEW_OBJECT, dest.value, cls.value);
    }

    pub fn emitArrayLength(dest: BytecodeRegister) {
        self.emitReg1(opc::BC_ARRAY_LENGTH, dest);
    }

    pub fn emitLoadArray(dest: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        self.emitReg3(opc::BC_LOAD_ARRAY, dest, arr, idx);
    }

    pub fn emitStoreArray(src: BytecodeRegister, arr: BytecodeRegister, idx: BytecodeRegister) {
        self.emitReg3(opc::BC_STORE_ARRAY, src, arr, idx);
    }

    pub fn emitRet(opnd: BytecodeRegister) {
        self.emitReg1(opc::BC_RET, opnd);
    }

    pub fn generate(): BytecodeFunction {
        self.resolveJumps();
        let code = self.code.toArray();
        let const_pool = self.constPool.toArray();
        let registers = self.registers.toArray();
        let locations = Array[(Int32, Location)]::new();
        let arguments = self.arguments;
        assert(arguments.toInt64() <= registers.size());
        BytecodeFunction(
            code,
            const_pool,
            registers,
            locations,
            arguments
        )
    }

    fn resolveJumps() {
        for jump in self.unresolvedJumps {
            assert(jump.label.isBound());

            assert(jump.label.offset() > jump.inst);
            let offset = jump.label.offset() - jump.inst;

            let opcode = self.code(jump.inst.toInt64()).toInt32();

            self.patchInt32(jump.target, offset);
        }

        self.unresolvedJumps.clear();
    }

    fn emitFctVoid(inst: Int32, fct: FunctionId, start: BytecodeRegister, count: Int32) {
        self.emitVal4(inst, fct.value, start.value, count);
    }

    fn emitFct(inst: Int32, dest: BytecodeRegister, fct: FunctionId, start: BytecodeRegister, count: Int32) {
        self.emitVal5(inst, dest.value, fct.value, start.value, count);
    }

    fn emitJmp(inst: Int32, offset: Int32) {
        self.emitVal2(inst, offset);
    }

    fn emitJmpForward(inst: Int32, opnd: Option[BytecodeRegister], lbl: BytecodeLabel) {
        let start = self.code.size().toInt32();

        self.emitOpcode(inst);
        if opnd.isSome() {
            self.emitInt32Variable(opnd.getOrPanic().value);
        }
        let target = self.code.size().toInt32();
        self.emitInt32Fixed(0i32);

        self.unresolvedJumps.push(UnresolvedJump(inst = start, target, label = lbl));
    }

    fn emitInst(inst: Int32) {
        self.emitVal1(inst);
    }

    pub fn addConst(entry: ConstPoolEntry): ConstPoolId {
        self.constPool.push(entry);
        ConstPoolId(self.constPool.size().toInt32() - 1i32)
    }

    fn emitReg1(inst: Int32, r1: BytecodeRegister) {
        self.emitVal2(inst, r1.value);
    }

    fn emitReg1AndIdx(inst: Int32, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitVal3(inst, r1.value, idx.value);
    }

    fn emitReg1AndByte(inst: Int32, r1: BytecodeRegister, offset: UInt8) {
        self.emitVal2(inst, r1.value);
        self.emitByte(offset.toInt32());
    }

    fn emitReg1AndCls(inst: Int32, r1: BytecodeRegister, cls: ClassId) {
        self.emitVal3(inst, r1.value, cls.value);
    }

    fn emitReg2(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitVal3(inst, r1.value, r2.value);
    }

    fn emitReg2AndCls(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, cls: ClassId) {
        self.emitVal4(inst, r1.value, r2.value, cls.value);
    }

    fn emitReg3(inst: Int32, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitVal4(inst, r1.value, r2.value, r3.value);
    }

    fn emitGlobal(inst: Int32, r1: BytecodeRegister, glob: GlobalId) {
        self.emitVal3(inst, r1.value, glob.value);
    }

    fn emitField(
        inst: Int32,
        r1: BytecodeRegister,
        r2: BytecodeRegister,
        cls: ClassId,
        field: ClassFieldId,
    ) {
        self.emitVal5(inst, r1.value, r2.value, cls.value, field.value);
    }

    fn emitVal1(opcode: Int32) {
        self.emitOpcode(opcode);
    }

    fn emitVal2(opcode: Int32, v1: Int32) {
        self.emitOpcode(opcode);
        self.emitInt32Variable(v1);
    }

    fn emitVal3(opcode: Int32, v1: Int32, v2: Int32) {
        self.emitOpcode(opcode);
        self.emitInt32Variable(v1);
        self.emitInt32Variable(v2);
    }

    fn emitVal4(opcode: Int32, v1: Int32, v2: Int32, v3: Int32) {
        self.emitOpcode(opcode);
        self.emitInt32Variable(v1);
        self.emitInt32Variable(v2);
        self.emitInt32Variable(v3);
    }

    fn emitVal5(opcode: Int32, v1: Int32, v2: Int32, v3: Int32, v4: Int32) {
        self.emitOpcode(opcode);
        self.emitInt32Variable(v1);
        self.emitInt32Variable(v2);
        self.emitInt32Variable(v3);
        self.emitInt32Variable(v4);
    }

    fn emitOpcode(opcode: Int32) {
        self.emitByte(opcode);
    }

    fn emitByte(val: Int32) {
        assert(val >= 0i32 && val <= 255i32);
        self.code.push(val.toUInt8());
    }

    fn emitInt32Fixed(val: Int32) {
        assert(val >= 0i32);
        self.emitByte(val & 0xFFi32);
        self.emitByte((val >>> 8i32) & 0xFFi32);
        self.emitByte((val >>> 16i32) & 0xFFi32);
        self.emitByte((val >>> 24i32) & 0xFFi32);
    }

    fn emitInt32Variable(mut value: Int32) {
        while true {
            let mut byte = value & 0x7Fi32;
            value = value >> 7i32;
            if value != 0i32 {
                byte = byte | 0x80i32;
            }

            self.code.push(byte.toUInt8());

            if value == 0i32 { break; }
        }
    }

    fn patchInt32(idx: Int32, val: Int32) {
        assert(val >= 0i32);
        let idx = idx.toInt64();
        self.code(idx) = (val & 0xFFi32).toUInt8();
        self.code(idx + 1i64) = ((val >>> 8i32) & 0xFFi32).toUInt8();
        self.code(idx + 2i64) = ((val >>> 16i32) & 0xFFi32).toUInt8();
        self.code(idx + 3i64) = ((val >>> 24i32) & 0xFFi32).toUInt8();
    }
}

class BytecodeLabel(off: Int32)

impl BytecodeLabel {
    static fn new(): BytecodeLabel {
        BytecodeLabel(-1i32)
    }

    fn bindTo(offset: Int32): BytecodeLabel {
        assert(offset >= 0i32);
        self.off = offset;
        self
    }

    fn isBound(): Bool {
        self.off >= 0i32
    }

    fn offset(): Int32 {
        assert(self.isBound());
        self.off
    }
}

class UnresolvedJump {
    inst: Int32,
    target: Int32,
    label: BytecodeLabel
}
