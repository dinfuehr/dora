use package::bytecode::{GlobalId, ConstPoolId, BytecodeFunction, BytecodeRegister};
use package::bytecode::instruction::BytecodeInstruction;
use package::bytecode::{BytecodeIterator, BytecodeInstructionInfo};

pub fn bytecodeDump(bc: BytecodeFunction) {
    let dumper = StdoutBytecodeDumper() as BytecodeDumper;

    for inst in BytecodeIterator::new(bc.code) {
        dumpInstruction(inst, dumper);
    }

    let mut i = 0;

    for entry in bc.const_pool {
        println("@${i} = ${entry.toString()}");
        i = i + 1i64;
    }

    i = 0;
    for ty in bc.registers {
        println("r${i} = ${ty}");
        i = i + 1i64;
    }
}

pub trait BytecodeDumper {
    fn emitInst(inst: BytecodeInstructionInfo, name: String);
    fn emitReg1(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister);
    fn emitReg1AndInt(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, value: Int32);
    fn emitReg1AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, idx: ConstPoolId);
    fn emitReg2(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister);
    fn emitReg2AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, idx: ConstPoolId);
    fn emitReg3(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister);
    fn emitGlobal(inst: BytecodeInstructionInfo, name: String, r: BytecodeRegister, g: GlobalId);

    fn emitBackwardJump(inst: BytecodeInstructionInfo, name: String, offset: Int32);
    fn emitJump(inst: BytecodeInstructionInfo, name: String, offset: Int32);
    fn emitConditionalJump(inst: BytecodeInstructionInfo, name: String, r: BytecodeRegister, offset: Int32);
    fn emitSwitch(inst: BytecodeInstructionInfo, idx: ConstPoolId);
}

pub fn dumpInstruction(inst: BytecodeInstructionInfo, dumper: BytecodeDumper) {
    match inst.op {
        BytecodeInstruction::Add(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Add", dest, lhs, rhs);
        },
        BytecodeInstruction::Sub(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Sub", dest, lhs, rhs);
        },
        BytecodeInstruction::Neg(dest, src) => {
            dumper.emitReg2(inst, "Neg", dest, src);
        },
        BytecodeInstruction::Mul(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Mul", dest, lhs, rhs);
        },
        BytecodeInstruction::Div(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Div", dest, lhs, rhs);
        },
        BytecodeInstruction::Mod(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Mod", dest, lhs, rhs);
        },
        BytecodeInstruction::And(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "And", dest, lhs, rhs);
        },
        BytecodeInstruction::Or(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Or", dest, lhs, rhs);
        },
        BytecodeInstruction::Xor(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Xor", dest, lhs, rhs);
        },
        BytecodeInstruction::Not(dest, src) => {
            dumper.emitReg2(inst, "Not", dest, src);
        },
        BytecodeInstruction::Shl(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Shl", dest, lhs, rhs);
        },
        BytecodeInstruction::Shr(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Shr", dest, lhs, rhs);
        },
        BytecodeInstruction::Sar(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "Sar", dest, lhs, rhs);
        },

        BytecodeInstruction::Mov(dest, src) => {
            dumper.emitReg2(inst, "Mov", dest, src);
        },

        BytecodeInstruction::LoadTupleElement(dest, src, idx)  => {
            dumper.emitReg2AndIdx(inst, "LoadTupleElement", dest, src, idx);
        },
        BytecodeInstruction::LoadEnumElement(dest, src, idx) => {
            dumper.emitReg2AndIdx(inst, "LoadEnumElement", dest, src, idx);
        },
        BytecodeInstruction::LoadEnumVariant(dest, src, idx) => {
            dumper.emitReg2AndIdx(inst, "LoadEnumVariant", dest, src, idx);
        },
        BytecodeInstruction::LoadStructField(dest, src, idx) => {
            dumper.emitReg2AndIdx(inst, "LoadStructField", dest, src, idx);
        },

        BytecodeInstruction::LoadField(dest, src, idx) => {
            dumper.emitReg2AndIdx(inst, "LoadField", dest, src, idx);
        },
        BytecodeInstruction::StoreField(dest, src, idx) => {
            dumper.emitReg2AndIdx(inst, "StoreField", dest, src, idx);
        },

        BytecodeInstruction::LoadGlobal(dest, global_id) => {
            dumper.emitGlobal(inst, "LoadGlobal", dest, global_id);
        },
        BytecodeInstruction::StoreGlobal(src, global_id) => {
            dumper.emitGlobal(inst, "StoreGlobal", src, global_id);
        },

        BytecodeInstruction::PushRegister(src) => {
            dumper.emitReg1(inst, "PushRegister", src);
        },
        BytecodeInstruction::ConstTrue(dest) => {
            dumper.emitReg1(inst, "ConstTrue", dest);
        },
        BytecodeInstruction::ConstFalse(dest) => {
            dumper.emitReg1(inst, "ConstFalse", dest);
        },
        BytecodeInstruction::ConstUInt8(dest, value) => {
            dumper.emitReg1AndInt(inst, "ConstUInt8", dest, value.toInt32());
        },
        BytecodeInstruction::ConstChar(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstChar", dest, idx);
        },
        BytecodeInstruction::ConstInt32(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstInt32", dest, idx);
        },
        BytecodeInstruction::ConstInt64(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstInt64", dest, idx);
        },
        BytecodeInstruction::ConstFloat32(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstFloat32", dest, idx);

        },
        BytecodeInstruction::ConstFloat64(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstFloat64", dest, idx);

        },
        BytecodeInstruction::ConstString(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "ConstString", dest, idx);
        },

        BytecodeInstruction::TestIdentity(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestIdentity", dest, lhs, rhs);
        },
        BytecodeInstruction::TestEq(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestEq", dest, lhs, rhs);
        },
        BytecodeInstruction::TestNe(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestNe", dest, lhs, rhs);
        },
        BytecodeInstruction::TestGt(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestGt", dest, lhs, rhs);
        },
        BytecodeInstruction::TestGe(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestGe", dest, lhs, rhs);
        },
        BytecodeInstruction::TestLt(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestLt", dest, lhs, rhs);
        },
        BytecodeInstruction::TestLe(dest, lhs, rhs) => {
            dumper.emitReg3(inst, "TestLe", dest, lhs, rhs);
        },

        BytecodeInstruction::JumpLoop(distance) => {
            dumper.emitBackwardJump(inst, "JumpLoop", distance);
        },
        BytecodeInstruction::LoopStart => {
            dumper.emitInst(inst, "LoopStart");
        },
        BytecodeInstruction::Jump(distance) => {
            dumper.emitJump(inst, "Jump", distance);
        },
        BytecodeInstruction::JumpIfFalse(opnd, distance) => {
            dumper.emitConditionalJump(inst, "JumpIfFalse", opnd, distance);
        },
        BytecodeInstruction::JumpIfTrue(opnd, distance) => {
            dumper.emitConditionalJump(inst, "JumpIfTrue", opnd, distance);
        },
        BytecodeInstruction::Switch(idx) => {
            dumper.emitSwitch(inst, idx);
        },

        BytecodeInstruction::InvokeDirect(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeDirect", dest, idx);
        },
        BytecodeInstruction::InvokeVirtual(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeVirtual", dest, idx);
        },
        BytecodeInstruction::InvokeStatic(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeStatic", dest, idx);
        },
        BytecodeInstruction::InvokeLambda(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeLambda", dest, idx);
        },
        BytecodeInstruction::InvokeGenericStatic(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeGenericStatic", dest, idx);
        },
        BytecodeInstruction::InvokeGenericDirect(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "InvokeGenericDirect", dest, idx);
        },

        BytecodeInstruction::NewObject(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewObject", dest, idx);
        },
        BytecodeInstruction::NewObjectInitialized(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewObjectInitialized", dest, idx);
        },
        BytecodeInstruction::NewArray(dest, length, idx) => {
            dumper.emitReg2AndIdx(inst, "NewArray", dest, length, idx);
        },
        BytecodeInstruction::NewTuple(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewTuple", dest, idx);
        },
        BytecodeInstruction::NewEnum(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewEnum", dest, idx);
        },
        BytecodeInstruction::NewStruct(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewStruct", dest, idx);
        },
        BytecodeInstruction::NewTraitObject(dest, obj, idx) => {
            dumper.emitReg2AndIdx(inst, "NewTraitObject", dest, obj, idx);
        },
        BytecodeInstruction::NewLambda(dest, idx) => {
            dumper.emitReg1AndIdx(inst, "NewLambda", dest, idx);
        },
        BytecodeInstruction::ArrayLength(dest, src) => {
            dumper.emitReg2(inst, "ArrayLength", dest, src);
        },
        BytecodeInstruction::LoadArray(dest, arr, index) => {
            dumper.emitReg3(inst, "LoadArray", dest, arr, index);
        },
        BytecodeInstruction::StoreArray(src, arr, index) => {
            dumper.emitReg3(inst, "StoreArray", src, arr, index);
        },
        BytecodeInstruction::LoadTraitObjectValue(dest, src) => {
            dumper.emitReg2(inst, "LoadTraitObjectValue", dest, src);
        },
        BytecodeInstruction::Ret(opnd) => {
            dumper.emitReg1(inst, "Ret", opnd);
        },
    }
}

class StdoutBytecodeDumper

impl StdoutBytecodeDumper {
    fn emitStart(inst: BytecodeInstructionInfo, name: String) {
        print("${inst.start}: ${name}");
    }
}

impl BytecodeDumper for StdoutBytecodeDumper {
    fn emitInst(inst: BytecodeInstructionInfo, name: String) {
        self.emitStart(inst, name);
        println("");
    }

    fn emitReg3(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.emitStart(inst, name);
        println(" ${r1}, ${r2}, ${r3}");
    }

    fn emitReg2(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.emitStart(inst, name);
        println(" ${r1}, ${r2}");
    }

    fn emitReg2AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(inst, name);
        println(" ${r1}, ${r2}, @${idx}");
    }

    fn emitReg1(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister) {
        self.emitStart(inst, name);
        println(" ${r1}")
    }

    fn emitReg1AndInt(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, value: Int32) {
        self.emitStart(inst, name);
        println(" ${r1}, ${value}")
    }

    fn emitReg1AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.emitStart(inst, name);
        println(" ${r1}, @${idx}")
    }

    fn emitConditionalJump(inst: BytecodeInstructionInfo, name: String, r: BytecodeRegister, offset: Int32) {
        self.emitStart(inst, name);
        println(" ${r}, ${inst.start + offset.toInt64()} (+${offset})");
    }

    fn emitSwitch(inst: BytecodeInstructionInfo, idx: ConstPoolId) {
        self.emitStart(inst, "Switch");
        println(" @${idx}");
    }

    fn emitBackwardJump(inst: BytecodeInstructionInfo, name: String, offset: Int32) {
        self.emitStart(inst, name);
        println(" ${inst.start - offset.toInt64()} (-${offset})");
    }

    fn emitJump(inst: BytecodeInstructionInfo, name: String, offset: Int32) {
        self.emitStart(inst, name);
        println(" ${inst.start + offset.toInt64()} (+${offset})");
    }

    fn emitGlobal(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.emitStart(inst, name);
        println(" ${r1}, ${gid}");
    }
}
