use std::collections::VecIter;
use std::traits::IntoIterator;

use package::bytecode::{BytecodeFunction, BytecodeTraitType, BytecodeType, ConstPoolId, FunctionId, Location};
use package::bytecode::{ClassId, EnumId, ClassFieldId, GlobalId, ImplId, StructId, StructFieldId, TraitId};
use package::compilation::CompilationInfo;
use package::deserializer::decodeBytecodeFunction;
use package::deserializer::{decodeCompilationInfo, decodeStructData, decodeEnumData};
use package::deserializer::decodeConfig;
use package::deserializer::ByteReader;
use package::deserializer;
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;
use package::compileFunction;
use package::graph::TraitObjectInfo;
use package::serializer::{ByteWriter, encodeBytecodeTraitType, encodeBytecodeType, encodeBytecodeTypeArray, encodeCodeDescriptor};

pub const TRAP_DIV0: Int32 = 0i32;
pub const TRAP_ASSERT: Int32 = 1i32;
pub const TRAP_INDEX_OUT_OF_BOUNDS: Int32 = 2i32;
pub const TRAP_NIL: Int32 = 3i32;
pub const TRAP_CAST: Int32 = 4i32;
pub const TRAP_OOM: Int32 = 5i32;
pub const TRAP_STACK_OVERFLOW: Int32 = 6i32;
pub const TRAP_ILLEGAL: Int32 = 7i32;
pub const TRAP_OVERFLOW: Int32 = 8i32;

@internal pub fn getSystemConfigRaw(): Array[UInt8];
@internal pub fn getFunctionAddressRaw(data: Array[UInt8]): Int64;
@internal pub fn getFunctionVtableIndexRaw(trait_id: Int32, fct_id: Int32): Int32;
@internal pub fn getFunctionDisplayNameRaw(fct_id: Int32): Array[UInt8];
@internal pub fn getFunctionInfoForInliningRaw(fct_id: Int32): Array[UInt8];
@internal pub fn getFieldOffsetRaw(data: Array[UInt8]): Int32;
@internal pub fn getClassSizeRaw(data: Array[UInt8]): Int32;
@internal pub fn getClassPointerRaw(data: Array[UInt8]): Int64;
@internal pub fn getClassPointerForLambdaRaw(data: Array[UInt8]): Int64;
@internal pub fn getClassSizeForTraitObjectRaw(data: Array[UInt8]): Int32;
@internal pub fn getClassPointerForTraitObjectRaw(data: Array[UInt8]): Int64;
@internal pub fn getGlobalValueAddressRaw(id: Int32): Int64;
@internal pub fn getGlobalStateAddressRaw(id: Int32): Int64;
@internal pub fn hasGlobalInitialValueRaw(id: Int32): Bool;
@internal pub fn getGlobalInitializerFunctionIdRaw(id: Int32): Int32;
@internal pub fn getReadOnlyStringAddressRaw(id: String): Int64;
@internal pub fn findTraitImplRaw(data: Array[UInt8]): Array[UInt8];
@internal pub fn specializeTyRaw(data: Array[UInt8]): Array[UInt8];
@internal pub fn getIntrinsicForFunctionRaw(id: Int32): Int32;
@internal pub fn getStructDataRaw(id: Int32): Array[UInt8];
@internal pub fn getEnumDataRaw(id: Int32): Array[UInt8];
@internal pub fn getClassDataForEnumVariantRaw(data: Array[UInt8]): Array[UInt8];
@internal pub fn getFieldOffsetForEnumVariantRaw(data: Array[UInt8]): Int32;
@internal pub fn getElementSizeRaw(data: Array[UInt8]): Int32;
@internal pub fn getFunctionDataForInliningRaw(fct_id: Int32): Array[UInt8];

pub fn getFunctionAddress(ci: CompilationInfo, fct_id: FunctionId, type_params: Array[BytecodeType]): Address {
    let writer = ci.getByteWriter();
    writer.emitInt32(fct_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    Address(getFunctionAddressRaw(writer.toArray()))
}

pub fn getFunctionDisplayName(fct_id: FunctionId): String {
    let encoded = getFunctionDisplayNameRaw(fct_id.0);
    String::fromBytes(encoded).getOrPanic()
}

pub fn getFunctionInfoForInlining(fct_id: FunctionId): FunctionInliningInfo {
    let encoded = getFunctionInfoForInliningRaw(fct_id.0);
    let reader = ByteReader::new(encoded);
    let decoded = deserializer::decodeFunctionInliningInfo(reader);
    assert(!reader.moreBytes());
    decoded
}

pub fn getClassPointerForLambda(ci: CompilationInfo, fct_id: FunctionId, type_params: Array[BytecodeType]): Address {
    let writer = ci.getByteWriter();
    writer.emitInt32(fct_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    Address(getClassPointerForLambdaRaw(writer.toArray()))
}

pub fn getClassSizeForTraitObject(ci: CompilationInfo, info: TraitObjectInfo): Int32 {
    let writer = ci.getByteWriter();
    encodeBytecodeType(writer, info.trait_ty);
    encodeBytecodeType(writer, info.actual_object_ty);
    getClassSizeForTraitObjectRaw(writer.toArray())
}

pub fn getClassPointerForTraitObject(ci: CompilationInfo, info: TraitObjectInfo): Address {
    let writer = ci.getByteWriter();
    encodeBytecodeType(writer, info.trait_ty);
    encodeBytecodeType(writer, info.actual_object_ty);
    Address(getClassPointerForTraitObjectRaw(writer.toArray()))
}

pub fn getFunctionVtableIndex(trait_id: TraitId, fct_id: FunctionId): Int32 {
    getFunctionVtableIndexRaw(trait_id.0, fct_id.0)
}

pub fn getFieldOffset(ci: CompilationInfo, cls_id: ClassId, type_params: Array[BytecodeType], field_id: ClassFieldId): Int32 {
    let writer = ci.getByteWriter();
    writer.emitInt32(cls_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    writer.emitInt32(field_id.0);
    getFieldOffsetRaw(writer.toArray())
}

pub fn getClassSize(ci: CompilationInfo, cls_id: ClassId, type_params: Array[BytecodeType]): Int32 {
    let writer = ci.getByteWriter();
    writer.emitInt32(cls_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    getClassSizeRaw(writer.toArray())
}

pub fn getClassPointer(ci: CompilationInfo, cls_id: ClassId, type_params: Array[BytecodeType]): Address {
    let writer = ci.getByteWriter();
    writer.emitInt32(cls_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    Address(getClassPointerRaw(writer.toArray()))
}

pub fn getGlobalValueAddress(id: GlobalId): Address {
    Address(getGlobalValueAddressRaw(id.0))
}

pub fn getGlobalStateAddress(id: GlobalId): Address {
    Address(getGlobalStateAddressRaw(id.0))
}

pub fn hasGlobalInitialValue(id: GlobalId): Bool {
    hasGlobalInitialValueRaw(id.0)
}

pub fn getGlobalInitializerFunctionId(id: GlobalId): FunctionId {
    FunctionId(getGlobalInitializerFunctionIdRaw(id.0))
}

pub fn getReadOnlyStringAddress(value: String): Address {
    Address(getReadOnlyStringAddressRaw(value))
}

pub fn findTraitImpl(ci: CompilationInfo, trait_fct_id: FunctionId, trait_type_params: Array[BytecodeType], object_ty: BytecodeType): (FunctionId, Array[BytecodeType]) {
    let writer = ci.getByteWriter();
    writer.emitInt32(trait_fct_id.0);
    encodeBytecodeTypeArray(writer, trait_type_params);
    encodeBytecodeType(writer, object_ty);
    let encoded = findTraitImplRaw(writer.toArray());
    let reader = ByteReader::new(encoded);
    let fct_id = FunctionId(reader.readInt32());
    let type_params = deserializer::decodeBytecodeTypeArray(reader);
    assert(!reader.moreBytes());
    (fct_id, type_params)
}

pub fn specializeTy(ci: CompilationInfo, ty: BytecodeType, typeParams: Array[BytecodeType]): BytecodeType {
    let writer = ci.getByteWriter();
    encodeBytecodeType(writer, ty);
    encodeBytecodeTypeArray(writer, typeParams);
    let encoded = specializeTyRaw(writer.toArray());
    let reader = ByteReader::new(encoded);
    let ty = deserializer::decodeBytecodeType(reader);
    assert(!reader.moreBytes());
    ty
}

pub fn findImpl(ci: CompilationInfo, fct_id: FunctionId, ty: BytecodeType, trait_ty: BytecodeTraitType): Option[(ImplId, Array[BytecodeType])] {
    let writer = ci.getByteWriter();
    writer.emitInt32(fct_id.0);
    encodeBytecodeType(writer, ty);
    encodeBytecodeTraitType(writer, trait_ty);
    unimplemented[Option[(ImplId, Array[BytecodeType])]]()
}

pub fn getIntrinsicForFunction(fct_id: FunctionId): Int32 {
    getIntrinsicForFunctionRaw(fct_id.0)
}

pub fn getStructData(struct_id: StructId): StructData {
    let encoded = getStructDataRaw(struct_id.0);
    let reader = ByteReader::new(encoded);
    let structData = decodeStructData(reader);
    assert(!reader.moreBytes());
    structData
}

pub fn getEnumData(enum_id: EnumId): EnumData {
    let encoded = getEnumDataRaw(enum_id.0);
    let reader = ByteReader::new(encoded);
    let enumData = decodeEnumData(reader);
    assert(!reader.moreBytes());
    enumData
}

pub fn getClassDataForEnumVariant(ci: CompilationInfo, id: EnumId, type_params: Array[BytecodeType], variant: Int32): (Address, Int32) {
    let writer = ci.getByteWriter();
    writer.emitInt32(id.0);
    encodeBytecodeTypeArray(writer, type_params);
    writer.emitInt32(variant);
    let encoded = getClassDataForEnumVariantRaw(writer.toArray());
    let reader = ByteReader::new(encoded);
    let address = reader.readInt64();
    let size = reader.readInt32();
    assert(!reader.moreBytes());
    (Address(address), size)
}

pub fn getFieldOffsetForEnumVariant(ci: CompilationInfo, enum_id: EnumId, type_params: Array[BytecodeType], variant_id: Int32, field_id: Int32): Int32 {
    let writer = ci.getByteWriter();
    writer.emitInt32(enum_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    writer.emitInt32(variant_id);
    writer.emitInt32(field_id);
    getFieldOffsetForEnumVariantRaw(writer.toArray())
}

pub fn getElementSize(ci: CompilationInfo, cls_id: ClassId, type_params: Array[BytecodeType]): Int32 {
    let writer = ci.getByteWriter();
    writer.emitInt32(cls_id.0);
    encodeBytecodeTypeArray(writer, type_params);
    getElementSizeRaw(writer.toArray())
}

pub fn getFunctionDataForInlining(fct_id: FunctionId): FunctionInliningData {
    let encoded = getFunctionDataForInliningRaw(fct_id.0);
    let reader = ByteReader::new(encoded);
    let decoded = deserializer::decodeFunctionInliningData(reader);
    assert(!reader.moreBytes());
    decoded
}

pub class Config {
    pub architecture: Architecture,
    pub safepoint_trampoline: Address,
    pub trap_trampoline: Address,
    pub unreachable_trampoline: Address,
    pub fatal_error_trampoline: Address,
    pub object_write_barrier_slow_path: Address,
    pub allocation_slow_path: Address,
    pub meta_space_start: Address,
    pub vtable_offset_in_shape: Int32,
    pub isWindows: Bool,
    pub isUnix: Bool,
    pub needsWriteBarrier: Bool,
    pub useTlab: Bool,
    pub isDebug: Bool,
    pub hasLseAtomics: Bool,
    pub hasAvx2: Bool,
}

pub let config: Config = decodeConfig(getSystemConfigRaw());

pub fn compile(encoded: Array[UInt8]): Array[UInt8] {
    let reader = ByteReader::new(encoded);
    let ci = decodeCompilationInfo(reader);
    assert(!reader.moreBytes());
    let code = compileFunction(ci);
    let writer = ci.getByteWriter();
    encodeCodeDescriptor(writer, code);
    writer.toArray()
}

pub struct Address(pub Int64)

impl Address {
    pub static fn null(): Address {
        Address(0)
    }

    pub fn toInt64(): Int64 {
        self.0
    }
}

pub let trap_trampoline: Address = Address(0);

pub class StructData {
    pub typeParams: Int32,
    pub fields: Array[BytecodeType],
}

pub class EnumData {
    pub typeParams: Int32,
    pub variants: Array[EnumVariantData],
}

pub class EnumVariantData {
    pub fields: Array[BytecodeType],
}

pub enum Architecture {
    X64,
    Arm64,
}

impl Architecture {
    pub fn isX64(): Bool {
        match self {
            Architecture::X64 => true,
            _ => false,
        }
    }
}

pub const PTR_SIZE: Int32 = 8;
pub const THREAD_LOCAL_DATA_TLAB_TOP_OFFSET: Int32 = 0;
pub const THREAD_LOCAL_DATA_TLAB_END_OFFSET: Int32 = 8;
pub const THREAD_LOCAL_DATA_STACK_LIMIT_OFFSET: Int32 = 16;
pub const THREAD_LOCAL_DATA_DTN_OFFSET: Int32 = 24;
pub const THREAD_LOCAL_DATA_MANAGED_THREAD_HANDLE_OFFSET: Int32 = 32;
pub const THREAD_LOCAL_DATA_MARKING_OFFSET: Int32 = 40;
pub const THREAD_LOCAL_DATA_STATE_OFFSET: Int32 = 41;

pub const OBJECT_SHAPE_OFFSET: Int32 = 0;
pub const OBJECT_METADATA_OFFSET: Int32 = 4;
pub const OBJECT_HEADER_LENGTH: Int32 = 8;
pub const ARRAY_HEADER_LENGTH: Int32 = 16;
pub const LAMBDA_SIZE: Int32 = 16;
pub const MAX_TLAB_OBJECT_SIZE: Int64 = 8192;
pub const LARGE_OBJECT_SIZE: Int32 = 32768;

pub const METADATA_MARK_BIT: Int32 = 0;
pub const METADATA_REMEMBERED_BIT: Int32 = 1;

pub const GLOBAL_STATE_UNINITIALIZED: Int32 = 0;
pub const GLOBAL_STATE_RUNNING: Int32 = 1;
pub const GLOBAL_STATE_INITIALIZED: Int32 = 2;

pub class CodeDescriptor {
    pub code: Array[UInt8],
    pub lazyCompilation: LazyCompilationData,
    pub gcPoints: GcPointTable,
    pub locations: LocationTable,
    pub comments: CommentTable,
    pub inlinedFunctions: Array[InlinedFunction],
    pub relocations: RelocationTable,
}

pub class CommentTable {
    entries: Vec[(Int32, String)],
}

impl CommentTable {
    pub static fn new(): CommentTable {
        CommentTable(
            entries = Vec[(Int32, String)]::new(),
        )
    }

    pub fn insert(offset: Int32, comment: String) {
        if self.entries.last().isSome() {
            let last = self.entries.last().getOrPanic();
            assert(last.0 <= offset);
        }

        self.entries.push((offset, comment));
    }

    pub fn size(): Int64 {
        self.entries.size()
    }
}

impl std::traits::IntoIterator for CommentTable {
    type IteratorType = VecIter[(Int32, String)];

    fn iter(): VecIter[(Int32, String)] {
        self.entries.iter()
    }
}

pub struct InlinedFunctionId {
    pub value: Int32,
}

pub struct InlinedFunction {
    pub fct_id: FunctionId,
    pub type_params: Array[BytecodeType],
    pub inlined_location: InlinedLocation,
}

pub struct InlinedLocation {
    pub inlined_function_id: Option[InlinedFunctionId],
    pub location: Location,
}

pub class LocationTable {
    entries: Vec[(Int32, InlinedLocation)],
}

impl LocationTable {
    pub static fn new(): LocationTable {
        LocationTable(
            entries = Vec[(Int32, InlinedLocation)]::new(),
        )
    }

    pub fn insert(offset: Int32, loc: InlinedLocation) {
        if self.entries.last().isSome() {
            let last = self.entries.last().getOrPanic();
            assert(last.0 <= offset);
        }

        self.entries.push((offset, loc));
    }

    pub fn size(): Int64 {
        self.entries.size()
    }
}

impl std::traits::IntoIterator for LocationTable {
    type IteratorType = VecIter[(Int32, InlinedLocation)];
    fn iter(): Self::IteratorType {
        self.entries.iter()
    }
}

pub class LazyCompilationData {
    entries: Vec[(Int32, LazyCompilationSite)],
}

impl LazyCompilationData {
    pub static fn new(): LazyCompilationData {
        LazyCompilationData(
            entries = Vec[(Int32, LazyCompilationSite)]::new(),
        )
    }

    pub fn insert(offset: Int32, site: LazyCompilationSite) {
        if self.entries.last().isSome() {
            let last = self.entries.last().getOrPanic();
            assert(last.0 <= offset);
        }

        self.entries.push((offset, site));
    }

    pub fn size(): Int64 {
        self.entries.size()
    }
}

impl std::traits::IntoIterator for LazyCompilationData {
    type IteratorType = VecIter[(Int32, LazyCompilationSite)];
    fn iter(): Self::IteratorType {
        self.entries.iter()
    }
}

pub enum LazyCompilationSite {
    Direct(LazyCompilationSiteDirect),
    Virtual(LazyCompilationSiteVirtual),
    Lambda(LazyCompilationSiteLambda),
}

pub class LazyCompilationSiteDirect {
    pub fct_id: FunctionId,
    pub type_params: Array[BytecodeType],
    pub const_pool_offset_from_ra: Int32,
}

pub struct LazyCompilationSiteVirtual {
    pub receiver_is_first: Bool,
    pub trait_object_ty: BytecodeType,
    pub vtable_index: Int32,
}

pub struct LazyCompilationSiteLambda {
    pub receiver_is_first: Bool,
    pub params: Array[BytecodeType],
    pub return_ty: BytecodeType,
}

pub class RelocationTable {
    entries: Vec[(Int32, RelocationKind)],
}

impl RelocationTable {
    pub static fn new(): RelocationTable {
        RelocationTable(
            entries = Vec[(Int32, RelocationKind)]::new(),
        )
    }

    pub fn insert(offset: Int32, kind: RelocationKind) {
        if self.entries.last() is Some(last) {
            assert(last.0 <= offset);
        }

        self.entries.push((offset, kind));
    }

    pub fn size(): Int64 {
        self.entries.size()
    }
}

impl std::traits::IntoIterator for RelocationTable {
    type IteratorType = VecIter[(Int32, RelocationKind)];
    fn iter(): Self::IteratorType {
        self.entries.iter()
    }
}

pub enum RelocationKind {
    JumpTableEntry(Int32),
    CodeTarget,
    Object,
}

pub class GcPointTable {
    entries: Vec[(Int32, GcPoint)],
}

impl GcPointTable {
    pub static fn new(): GcPointTable {
        GcPointTable(
            entries = Vec[(Int32, GcPoint)]::new(),
        )
    }

    pub fn insert(offset: Int32, point: GcPoint) {
        if self.entries.last().isSome() {
            let last = self.entries.last().getOrPanic();
            assert(last.0 <= offset);
        }

        self.entries.push((offset, point));
    }

    pub fn size(): Int64 {
        self.entries.size()
    }
}

impl std::traits::IntoIterator for GcPointTable {
    type IteratorType = VecIter[(Int32, GcPoint)];
    fn iter(): Self::IteratorType {
        self.entries.iter()
    }
}

pub class GcPoint {
    offsets: Vec[Int32],
}

impl GcPoint {
    pub static fn new(): GcPoint {
        GcPoint(
            offsets = Vec[Int32]::new(),
        )
    }

    pub static fn from(offsets: Vec[Int32]): GcPoint {
        GcPoint(offsets)
    }

    pub fn size(): Int64 {
        self.offsets.size()
    }

    pub fn clone(): GcPoint {
        GcPoint::from(self.offsets.clone())
    }

    pub fn add(offset: Int32) {
        self.offsets.push(offset);
    }
}

impl std::traits::IntoIterator for GcPoint {
    type IteratorType = VecIter[Int32];
    fn iter(): Self::IteratorType {
        self.offsets.iter()
    }
}

pub struct FunctionInliningData {
    pub bc: BytecodeFunction,
    pub returnType: BytecodeType,
}

pub struct FunctionInliningInfo {
    pub hasBytecode: Bool,
    pub bytecodeSize: Int32,
    pub hasForceInlineAnnotation: Bool,
    pub hasNeverInlineAnnotation: Bool,
}

pub enum CompilationMode {
    Stage1,
    Stage2,
    Stage3,
    Jit,
}

impl CompilationMode {
    pub fn isStage2or3(): Bool {
        match self {
            CompilationMode::Stage2 | CompilationMode::Stage3 => true,
            CompilationMode::Stage1 | CompilationMode::Jit => false,
        }
    }
}