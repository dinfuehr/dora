use package::bytecode::{BytecodeType, FunctionId};
use package::compilation::{FunctionCompilationInfo, CompilationInfo};
use package::graph::{createUndefInst, Graph, Inst, Op};
use package::graph_builder;
use package::interface as iface;
use package::interface::FunctionInliningInfo;

pub fn performInlining(ci: CompilationInfo, graph: Graph) {
    let mut budget: Int32 = 1000;

    if false {
        while true {
            let call = selectNextCallSite(ci, graph);

            if call.isNone() {
                break;
            }

            let (call, info) = call.getOrPanic();

            if !info.hasForceInlineAnnotation {
                if graph.inlinedBytecodeSize + info.bytecodeSize > ci.maxTotalInlinedBytecodeSize {
                    break;
                }
            }

            graph.inlinedBytecodeSize += info.bytecodeSize;
            let fctInfo = call.getFunctionInfo();
            inline(ci, graph, call, fctInfo.fct_id, fctInfo.type_params);
        }
    }

    for block in graph.insertionOrderIterator() {
        for inst in block.instructionsIterator() {
            let op = inst.op();

            if op == Op::Invoke {
                if inst.hasFunctionInfo() {
                    let fctInfo = inst.getFunctionInfo();
                    let fctId = fctInfo.fct_id;

                    let info = iface::getFunctionInfoForInlining(fctId);

                    if !info.hasBytecode || info.hasNeverInlineAnnotation {
                        continue;
                    }

                    if info.hasForceInlineAnnotation {
                        inline(ci, graph, inst, fctId, fctInfo.type_params);
                    } else if ci.inline && info.bytecodeSize < 200i32 && info.bytecodeSize < budget {
                        inline(ci, graph, inst, fctId, fctInfo.type_params);
                        budget = budget - info.bytecodeSize;
                    }
                }
            }
        }
    }
}

fn selectNextCallSite(ci: CompilationInfo, graph: Graph): Option[(Inst, FunctionInliningInfo)] {
    let mut i = 0;

    if graph.inlinableCalls.isEmpty() {
        return None[(Inst, FunctionInliningInfo)];
    }

    // Pick "force inline" call sites first.
    for (call, info) in graph.inlinableCalls {
        if info.hasForceInlineAnnotation {
            graph.inlinableCalls.removeAt(i);
            return Some[(Inst, FunctionInliningInfo)]((call, info));
        }

        i += 1;
    }

    // Simply pick the first call for now.
    let first = graph.inlinableCalls.removeAt(0);
    Some[(Inst, FunctionInliningInfo)](first)
}

fn inline(ci: CompilationInfo, graph: Graph, inst: Inst, fctId: FunctionId, typeParams: Array[BytecodeType]) {
    let block = inst.getBlock();
    let inlined_function_id = ci.addInlinedFunction(fctId, typeParams, inst.getInlinedLocation());
    let data = iface::getFunctionBytecodeDataForInlining(fctId);
    let fct_compilation_info = FunctionCompilationInfo(bc = data.bc, returnType = data.returnType, fctId, typeParams, specializeSelf = data.specializeSelf);
    let newBlock = block.splitAfter(inst);
    let returnValue = graph_builder::addToGraph(ci, graph, inlined_function_id, fct_compilation_info, block, newBlock, inst);
    if returnValue.isSome() {
        let returnValue = returnValue.getOrPanic();
        inst.replaceAllUsesWith(returnValue);
    } else if newBlock.predecessors.isEmpty() {
        // This call has no return value because it e.g. crashes unconditionally. In this
        // case newBlock is unreachable and will be removed by cfg_simplification.
        // There is no value to replace all uses of the call return value, so
        // replace it with Undef. Undef also needs to be in newBlock to not
        // break SSA. Both Undef and its uses will be removed later.
        let undef = createUndefInst();
        newBlock.prependInst(undef);
        inst.replaceAllUsesWith(undef);
    } else {
        assert(inst.getValueType().isUnit());
    }
    inst.remove();
}
