use std::io::{BufferedWriter, File, OpenFile, Write};

use package::assembler::arm64::registerName as registerNameOnArm64;
use package::assembler::x64::registerName as registerNameOnX64;
use package::assembler::arm64::floatRegisterName as floatRegisterNameOnArm64;
use package::assembler::x64::floatRegisterName as floatRegisterNameOnX64;
use package::bytecode::{BytecodeDumper, BytecodeFunction, BytecodeInstructionInfo, BytecodeIterator, BytecodeRegister, ConstPoolId, dumpInstruction, GlobalId};
use package::graph::{Block, Graph, Inst, Location, Op, Operand};
use package::graph_builder::BytecodeAnalysis;
use package::compilation::CompilationInfo;
use package::interface::{Architecture, config};

pub fn createHtmlWriter(ci: CompilationInfo): HtmlWriter {
    let file = File::create("ssa.html");
    let html = HtmlWriter(ci, file, BufferedWriter::new(file));
    html.start();
    html
}

pub class HtmlWriter {
    ci: CompilationInfo,
    file: OpenFile,
    writer: BufferedWriter,
}

impl HtmlWriter {
    fn start() {
        self.write("<!doctype html>
<html>
    <head>
        <meta charset=\"utf-8\">
        <title>Graph Viewer</title>
        <style>
div.block {
    margin-left: 40px;
}

div.inst {
    padding-left: 1.5em;
    text-indent: -1.5em;
}

#main {
    display: flex;
    width: fit-content;
    margin: 10px;
}

.pass {
    display: flex;
    width: fit-content;
    border: 1px solid black;
}

.pass:not(:last-child) {
    border-right-width: 0px;
}

.constpool {
    margin-top: 20px;
    margin-left: 40px;
}

.registers {
    margin-top: 20px;
    margin-left: 40px;
}

.collapsed > .pass-name {
    border-left-width: 0px;
}

.collapsed > .pass-name {
    font-style: italic;
    font-size: small;
    padding: 4px;
}

.pass-name {
    text-align: right;
    transform: rotate(180deg);
    writing-mode: vertical-lr;
    white-space: pre;
    padding: 10px;
    cursor: pointer;
    border-left: 1px solid black;
}

div.graph {
    padding: 5px;
    width: 400px;
}

.selectable {
    cursor: pointer;
}

.selected {
    background-color: red;
}

.inst-value-type {
    font-style: italic;
    font-size: small;
}

.line-number {
    font-style: italic;
    font-size: small;
}
        </style>
        <script>
var selected = null;

window.onload = function() {
    let elements = document.getElementsByClassName(\"selectable\");
    for (element of elements) {
        element.addEventListener('click', function(event) {
            elementSelected(this, event);
        });
    }

    elements = document.getElementsByClassName(\"pass-name\");
    for (element of elements) {
        element.addEventListener('click', function(event) {
            passCollapse(this, event);
        });
    }
}

function elementSelected(element, event) {
    event.stopPropagation();
    let newSelection = element.classList.item(0);

    if (selected) {
        for (el of document.getElementsByClassName(selected)) {
            el.classList.remove(\"selected\");
        }
    }

    if (selected == newSelection) {
        // Cancel selection.
        selected = null;
    } else {
        for (el of document.getElementsByClassName(newSelection)) {
            el.classList.add(\"selected\");
        }
        selected = newSelection;
    }
}

function passCollapse(element, event) {
    let passNode = element.parentNode;
    let passNameNode = passNode.getElementsByClassName(\"pass-name\")[0];
    let graphNode = passNode.getElementsByClassName(\"graph\")[0];

    console.log(graphNode.style.display);

    if (passNode.classList.toggle(\"collapsed\")) {
        graphNode.style.display = 'none';
    } else {
        graphNode.style.display = '';
    }
}
        </script>
    </head>
    <body>

    <div id=\"main\">
");
    }

    pub fn dumpBytecode(bc: BytecodeFunction, analysis: BytecodeAnalysis) {
        self.write("<div class=\"pass\">");
        self.write("<div class=\"pass-name\">bytecode</div>");
        self.write("<div class=\"graph\"><code>");
        let dumper = HtmlBytecodeDumper(self.writer as Write) as BytecodeDumper;

        for blockStart in analysis.starts {
            self.write("<div class=\"block-name\">block at ${blockStart}:</div>");
            self.write("<div class=\"block\">");

            for inst in BytecodeIterator::newAtPos(bc.code, blockStart) {
                if inst.start > blockStart && analysis.starts.contains(inst.start) {
                    break;
                }

                self.write("<div>${inst.start}: ");
                dumpInstruction(inst, dumper);
                self.write("</div>");
            }

            self.write("</div>");
        }

        let mut i = 0;
        self.write("<div class=\"constpool\">");
        for entry in bc.const_pool {
            self.write("<div class=\"cp${i} selectable\">@${i} = ${entry}</div>");
            i = i + 1i64;
        }
        self.write("</div>");

        i = 0;
        self.write("<div class=\"registers\">");
        for register in bc.registers {
            self.write("<div class=\"r${i} selectable\">r${i} = ${register}</div>");
            i = i + 1;
        }
        self.write("</div>");

        self.write("</code></div>"); // end of div.graph
        self.write("</div>\n"); // end of div.pass
    }

    pub fn dumpGraph(title: String, graph: Graph) {
        self.write("<div class=\"pass\">");
        self.write("<div class=\"pass-name\">${title}</div>\n");
        self.write("<div class=\"graph\"><code>");

        for block in graph.insertionOrderIterator() {
            self.dumpBlock(block);
        }

        self.write("</code></div>\n"); // end of div.graph
        self.write("</div>\n"); // end of div.pass
    }

    fn dumpBlock(block: Block) {
        self.write("<div class=\"block-name\">@${block.id()}:</div>");
        self.write("<div class=\"block\">");

        for inst in block.phisIterator() {
            self.dumpInst(inst);
        }

        for inst in block.instructionsIterator() {
            self.dumpInst(inst);
        }

        self.write("</div>");
    }

    fn dumpInst(inst: Inst) {
        self.write("<div class=\"inst${inst.id()} inst selectable\">%${inst.id()}");

        let ty = inst.getMaybeValueType();

        if ty.isSome() {
            let ty = ty.getOrPanic();
            if !ty.isUnit() {
                self.write("&nbsp;<span class=\"inst-value-type\">&lt;${ty}&gt;</span>");
            }
        }

        if inst.hasInlinedLocation() {
            let inlined_location = inst.getInlinedLocation();
            let loc = inlined_location.location;
            self.write("&nbsp;<span class=\"line-number\">&lt;${loc.line}:${loc.column}&gt;</span>");
        }

        self.write(": ");

        if inst.hasLocationData() {
            let loc = inst.getLocationData();

            if loc.hasOutput() {
                self.write("${opnd(loc.getOutput())} &larr; ");
            }
        }

        self.write("${inst.op()}");

        match inst.op() {
            Op::Goto => {
                self.write("&nbsp;<span class=\"block-use\">${inst.getTargetBlock()}</span>");
            }

            Op::If => {
                self.write("&nbsp;<span class=\"block-use\">${inst.getTrueBlock()}</span>");
                self.write("&nbsp;<span class=\"block-use\">${inst.getFalseBlock()}</span>");
            }

            Op::UInt8Const => {
                self.write("&nbsp;${inst.getValueAsUInt8()}");
            }

            Op::Int32Const => {
                self.write("&nbsp;${inst.getValueAsInt32()}");
            }

            Op::Int64Const => {
                self.write("&nbsp;${inst.getValueAsInt64()}");
            }

            Op::Float32Const => {
                self.write("&nbsp;${inst.getValueAsFloat32()}");
            }

            Op::Float64Const => {
                self.write("&nbsp;${inst.getValueAsFloat64()}");
            }

            Op::StringConst => {
                self.write("&nbsp;\"${inst.getValueAsString()}\"");
            }

            Op::Rematerialize => {
                let loc = inst.getLocationData();
                self.write("&nbsp;");
                self.write(opnd(loc.getOutput()));
                self.write("&nbsp;&larr;&nbsp;");
                let id = inst.getExtraInst().id();
                self.write("<span class=\"inst${id} selectable\">%${id}</span>");
            }

            Op::Move => {
                let loc = inst.getLocationData();
                self.write(" ${opnd(loc.getInput(0))}");
            }

            Op::Arg => {
                self.write("&nbsp;${inst.getArgIndex()}");
            }

            _ => {
                if !inst.getInputs().isEmpty() {
                    let mut idx = 0;
                    self.write(" ");
                    for input in inst.getInputs() {
                        if idx > 0 {
                            self.write(", ");
                        }
                        let id = input.getValue().id();
                        self.write("<span class=\"inst${id} selectable\">%${id}</span>");
                        if inst.hasLocationData() {
                            let loc = inst.getLocationData();
                            if loc.hasInputAt(idx) {
                                self.write(" in ${opnd(loc.getInput(idx))}");
                            }
                        }
                        idx = idx + 1;
                    }
                }

                if inst.hasLocationData() {
                    let loc = inst.getLocationData();
                    if !loc.getTemps().isEmpty() {
                        self.write(" (temps: ");
                        let mut first = true;
                        for temp in loc.getTemps() {
                            if !first { self.write(", "); }
                            self.write(opnd(temp));
                            first = false;
                        }
                        self.write(")");
                    }

                    if !loc.getHint().isNone() {
                        self.write(" (hint ${location(loc.getHint())})");
                    }
                }
            }
        }

        self.write("</div>");
    }

    pub fn close() {
        self.write("
    </div>
    </body>
</html>
");
        self.file.close();
    }

    fn write(text: String) {
        let bytes = text.asBytes();
        self.writer.writeAll(bytes, 0, bytes.size()).getOrPanic();
    }
}

class HtmlBytecodeDumper {
    writer: Write,
}

impl HtmlBytecodeDumper {
    fn write(text: String) {
        let bytes = text.asBytes();
        self.writer.writeAll(bytes, 0, bytes.size()).getOrPanic();
    }
}

impl BytecodeDumper for HtmlBytecodeDumper {
    fn emitInst(inst: BytecodeInstructionInfo, name: String) {
        self.write(name);
    }

    fn emitReg3(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, r3: BytecodeRegister) {
        self.write("${name} ${reg(r1)}, ${reg(r2)}, ${reg(r3)}");
    }

    fn emitReg2(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister) {
        self.write("${name} ${reg(r1)}, ${reg(r2)}");
    }

    fn emitReg2AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, r2: BytecodeRegister, idx: ConstPoolId) {
        self.write("${name} ${reg(r1)}, ${reg(r2)}, ${cp(idx)}");
    }

    fn emitReg1(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister) {
        self.write("${name} ${reg(r1)}");
    }

    fn emitReg1AndInt(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, value: Int32) {
        self.write("${name} ${reg(r1)}, ${value}");
    }

    fn emitReg1AndIdx(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, idx: ConstPoolId) {
        self.write("${name} ${reg(r1)}, ${cp(idx)}");
    }

    fn emitConditionalJump(inst: BytecodeInstructionInfo, name: String, r: BytecodeRegister, offset: Int32) {
        self.write("${name} ${reg(r)}, ${inst.start + offset.toInt64()} (+${offset})");
    }

    fn emitBackwardJump(inst: BytecodeInstructionInfo, name: String, offset: Int32) {
        self.write("${name} ${inst.start - offset.toInt64()} (-${offset})");
    }

    fn emitJump(inst: BytecodeInstructionInfo, name: String, offset: Int32) {
        self.write("${name} ${inst.start + offset.toInt64()} (+${offset})");
    }

    fn emitGlobal(inst: BytecodeInstructionInfo, name: String, r1: BytecodeRegister, gid: GlobalId) {
        self.write("${name} ${reg(r1)}, ${gid.value}");
    }
}

fn reg(r: BytecodeRegister): String {
    "<span class=\"r${r.value} selectable\">${r}</span>"
}

fn cp(id: ConstPoolId): String {
    "<span class=\"cp${id.value} selectable\">@${id.value}</span>"
}

fn opnd(operand: Operand): String {
    location(operand.getLocation())
}

fn location(loc: Location): String {
    match loc {
        Location::Reg(reg) => {
            let name = match config.architecture {
                Architecture::Arm64 => registerNameOnArm64(reg),
                Architecture::X64 => registerNameOnX64(reg),
            };

            "<span class=\"cpu-reg${reg.value} selectable\">${name}</span>"
        },
        Location::FloatReg(reg) => {
            let name = match config.architecture {
                Architecture::Arm64 => floatRegisterNameOnArm64(reg),
                Architecture::X64 => floatRegisterNameOnX64(reg),
            };

            "<span class=\"cpu-freg${reg.value} selectable\">${name}</span>"
        },

        Location::Stack(slot) => {
            if slot.isFp() {
                "FP:${slot.getOffset()}"
            } else {
                "SP:${slot.getOffset()}"
            }
        },

        Location::None => "NONE",
    }
}
