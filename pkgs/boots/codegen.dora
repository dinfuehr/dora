use package::bytecode::{BytecodeType, FunctionId};
use package::codegen::x64::CodeGenX64;
use package::codegen::arm64::CodeGenArm64;
use package::compilation::CompilationInfo;
use package::assembler::{FloatRegister, Label, Register, RegSet};
use package::interface::{Address, Architecture, config, LazyCompilationSiteDirect, RelocationKind, RelocationTable};
use package::location::ArgumentLocations;
use package::graph::{Block, Graph, Inst, InstSet, Location, LocationData, Op, Operand, Policy, RegisterTrackers, Type};
use package::CodeDescriptor;

pub mod arm64;
pub mod x64;

const CODE_SIZE_ALIGNMENT: Int64 = 16;
pub const STACK_FRAME_ALIGNMENT: Int64 = 16;

pub enum EmbeddedConstant {
    Address(Address),
    Float32(Float32),
    Float64(Float64),
    Int128(Int64, Int64),
    JumpTable(Array[Block]),
}

pub fn createCodeGen(ci: CompilationInfo, graph: Graph): CodeGen {
    match config.architecture {
        Architecture::X64 => CodeGenX64::new(ci, graph) as CodeGen,
        Architecture::Arm64 => CodeGenArm64::new(ci, graph) as CodeGen,
    }
}

pub fn generateCode(graph: Graph, codegen: CodeGen, ci: CompilationInfo): CodeDescriptor {
    let stackSize = graph.getStackSize();
    assert(stackSize >= 0i32);
    assert(stackSize % STACK_FRAME_ALIGNMENT.toInt32() == 0i32);

    if ci.emitDebug {
        codegen.emitBreakpoint();
    }

    codegen.emitProlog(stackSize);

    codegen.emitComment("stack limit check");
    codegen.emitStackLimitCheck();


    for block in graph.insertionOrderIterator() {
        block.setLabel(codegen.createLabel());
    }

    for block in graph.linearOrderIterator() {
        codegen.emitComment("Block ${block.id()}");
        codegen.bindLabel(block.getLabel());

        for inst in block.instructionsIterator() {
            emitInst(codegen, inst);

            let loc = inst.getLocationData();

            if loc.hasOutput() && loc.hasSpillSlot() && !loc.getOutput().hasStack() {
                codegen.spill(inst);
            }
        }
    }

    codegen.finalize()
}

fn emitInst(codegen: CodeGen, inst: Inst) {
    match inst.op() {
        Op::Arg => {},

        Op::TrueConst => {
            codegen.emitComment("TrueConst");
            codegen.emitTrueConst(inst);
        },

        Op::FalseConst => {
            codegen.emitComment("FalseConst");
            codegen.emitFalseConst(inst);
        },

        Op::UInt8Const => {
            codegen.emitComment("UInt8Const");
            codegen.emitUInt8Const(inst);
        },

        Op::Int32Const => {
            codegen.emitComment("Int32Const");
            codegen.emitInt32Const(inst);
        },

        Op::Int64Const => {
            codegen.emitComment("Int64Const");
            codegen.emitInt64Const(inst);
        },

        Op::NullConst => {
            codegen.emitComment("NullConst");
            codegen.emitNullConst(inst);
        },

        Op::Float32Const => {
            codegen.emitComment("Float32Const");
            codegen.emitFloat32Const(inst);
        },

        Op::Float64Const => {
            codegen.emitComment("Float64Const");
            codegen.emitFloat64Const(inst);
        },

        Op::StringConst => {
            codegen.emitComment("StringConst");
            codegen.emitStringConst(inst);
        },

        Op::And => {
            codegen.emitComment("And");
            codegen.emitAnd(inst);
        }

        Op::Or => {
            codegen.emitComment("Or");
            codegen.emitOr(inst);
        }

        Op::Xor => {
            codegen.emitComment("Xor");
            codegen.emitXor(inst);
        }

        Op::Sar => {
            codegen.emitComment("Sar");
            codegen.emitSar(inst);
        }

        Op::Shr => {
            codegen.emitComment("Shr");
            codegen.emitShr(inst);
        }

        Op::Shl => {
            codegen.emitComment("Shl");
            codegen.emitShl(inst);
        }

        Op::Add => {
            codegen.emitComment("Add");
            codegen.emitAdd(inst);
        },

        Op::Sub => {
            codegen.emitComment("Sub");
            codegen.emitSub(inst);
        },

        Op::Mul => {
            codegen.emitComment("Mul");
            codegen.emitMul(inst);
        },

        Op::Div => {
            codegen.emitComment("Div");
            codegen.emitDiv(inst);
        },

        Op::Neg => {
            codegen.emitComment("Neg");
            codegen.emitNeg(inst);
        },

        Op::CheckedAdd => {
            codegen.emitComment("CheckedAdd");
            codegen.emitCheckedAdd(inst);
        },

        Op::CheckedSub => {
            codegen.emitComment("CheckedSub");
            codegen.emitCheckedSub(inst);
        },

        Op::CheckedMul => {
            codegen.emitComment("CheckedMul");
            codegen.emitCheckedMul(inst);
        },

        Op::CheckedDiv => {
            codegen.emitComment("CheckedDiv");
            codegen.emitCheckedDiv(inst);
        },

        Op::CheckedMod => {
            codegen.emitComment("CheckedMod");
            codegen.emitCheckedMod(inst);
        },

        Op::CheckedNeg => {
            codegen.emitComment("CheckedNeg");
            codegen.emitCheckedNeg(inst);
        },

        Op::DivZeroCheck => {
            codegen.emitComment("DivZeroCheck");
            codegen.emitDivZeroCheck(inst);
        },

        Op::If => {
            codegen.emitComment("If");
            codegen.emitIf(inst);
        },

        Op::Switch => {
            codegen.emitComment("Switch");
            codegen.emitSwitch(inst);
        }

        Op::Goto => {
            codegen.emitComment("Goto");
            codegen.emitGoto(inst);
        },

        Op::Return => {
            codegen.emitComment("Return");
            codegen.emitReturn(inst);
        },

        Op::Move => {
            codegen.emitComment("Move");
            codegen.emitMove(inst);
        },

        Op::LoadReg => {
            codegen.emitComment("LoadReg");
            codegen.emitLoadReg(inst);
        },

        Op::StoreReg => {
            codegen.emitComment("StoreReg");
            codegen.emitStoreReg(inst);
        },

        Op::Rematerialize => {
            codegen.emitComment("Rematerialize");
            codegen.emitRematerialize(inst);
        },

        Op::Greater
        | Op::UnsignedGreater
        | Op::GreaterOrEqual
        | Op::UnsignedGreaterOrEqual
        | Op::Less
        | Op::UnsignedLess
        | Op::LessOrEqual
        | Op::UnsignedLessOrEqual
        | Op::Equal
        | Op::NotEqual => {
            codegen.emitComment("${inst.op().name()}");
            codegen.emitCompare(inst);
        },

        Op::Invoke => {
            codegen.emitComment("Invoke");
            codegen.emitInvoke(inst);
        },

        Op::InvokeVirtual => {
            codegen.emitComment("InvokeVirtual");
            codegen.emitInvokeVirtual(inst);
        },

        Op::InvokeLambda => {
            codegen.emitComment("InvokeLambda");
            codegen.emitInvokeLambda(inst);
        },

        Op::BoundsCheck => {
            codegen.emitComment("BoundsCheck");
            codegen.emitBoundsCheck(inst);
        },

        Op::LoadArray => {
            codegen.emitComment("LoadArray");
            codegen.emitLoadArray(inst);
        },

        Op::StoreArray => {
            codegen.emitComment("StoreArray");
            codegen.emitStoreArray(inst);
        },

        Op::NewObject => {
            codegen.emitComment("NewObject");
            codegen.emitNewObject(inst);
        },

        Op::NewArray => {
            codegen.emitComment("NewArray");
            codegen.emitNewArray(inst);
        },

        Op::EnsureGlobalInitialized => {
            codegen.emitComment("EnsureGlobalInitialized");
            codegen.emitEnsureGlobalInitialized(inst);
        },

        Op::LoadGlobal => {
            codegen.emitComment("LoadGlobal");
            codegen.emitLoadGlobal(inst);
        },

        Op::GetGlobalAddress => {
            codegen.emitComment("GetGlobalAddress");
            codegen.emitGetGlobalAddress(inst);
        },

        Op::StoreGlobal => {
            codegen.emitComment("StoreGlobal");
            codegen.emitStoreGlobal(inst);
        },

        Op::MarkGlobalInitialized => {
            codegen.emitComment("MarkGlobalInitialized");
            codegen.emitMarkGlobalInitialized(inst);
        },

        Op::ThreadCurrent => {
            codegen.emitComment("ThreadCurrent");
            codegen.emitThreadCurrent(inst);
        },

        Op::AllocateStack => {
            codegen.emitComment("AllocateStack");
            codegen.emitAllocateStack(inst);
        },

        Op::Load => {
            codegen.emitComment("Load");
            codegen.emitLoad(inst);
        },

        Op::Store => {
            codegen.emitComment("Store");
            codegen.emitStore(inst);
        },

        Op::StoreWb => {
            codegen.emitComment("StoreWb");
            codegen.emitStoreWb(inst);
        },

        Op::StoreArrayWb => {
            codegen.emitComment("StoreArrayWb");
            codegen.emitStoreArrayWb(inst);
        },

        Op::StoreArrayAddressWb => {
            codegen.emitComment("StoreArrayAddressWb");
            codegen.emitStoreArrayAddressWb(inst);
        },

        Op::GetElementPtr => {
            codegen.emitComment("GetElementPtr");
            codegen.emitGetElementPtr(inst);
        },

        Op::Abort => {
            codegen.emitComment("Abort");
            codegen.emitAbort(inst);
        }

        Op::Assert => {
            codegen.emitComment("Assert");
            codegen.emitAssert(inst);
        }

        Op::Not => {
            codegen.emitComment("Not");
            codegen.emitNot(inst);
        }

        Op::Convert => {
            codegen.emitComment("Convert");
            codegen.emitConvert(inst);
        }

        Op::CompareOrdering => {
            codegen.emitComment("CompareOrdering");
            codegen.emitCompareOrdering(inst);
        }

        Op::Bitcast => {
            codegen.emitComment("Bitcast");
            codegen.emitBitcast(inst);
        }

        Op::RoundDown => {
            codegen.emitComment("RoundDown");
            codegen.emitRoundDown(inst);
        }

        Op::RoundUp => {
            codegen.emitComment("RoundUp");
            codegen.emitRoundUp(inst);
        }

        Op::RoundHalfEven => {
            codegen.emitComment("RoundHalfEven");
            codegen.emitRoundHalfEven(inst);
        }

        Op::RoundToZero => {
            codegen.emitComment("RoundToZero");
            codegen.emitRoundToZero(inst);
        }

        Op::Abs => {
            codegen.emitComment("Abs");
            codegen.emitAbs(inst);
        }

        Op::Sqrt => {
            codegen.emitComment("Sqrt");
            codegen.emitSqrt(inst);
        }

        Op::Unreachable => {
            codegen.emitComment("Unreachable");
            codegen.emitUnreachable(inst);
        }

        Op::RotateLeft => {
            codegen.emitComment("RotateLeft");
            codegen.emitRotateLeft(inst);
        }

        Op::RotateRight => {
            codegen.emitComment("RotateRight");
            codegen.emitRotateRight(inst);
        }

        Op::Debug => {
            codegen.emitComment("Debug");
            codegen.emitDebug(inst);
        }

        Op::AtomicLoad => {
            codegen.emitComment("AtomicLoad");
            codegen.emitAtomicLoad(inst);
        }

        Op::AtomicStore => {
            codegen.emitComment("AtomicStore");
            codegen.emitAtomicStore(inst);
        }

        Op::AtomicExchange => {
            codegen.emitComment("AtomicExchange");
            codegen.emitAtomicExchange(inst);
        }

        Op::AtomicCompareExchange => {
            codegen.emitComment("AtomicCompareExchange");
            codegen.emitAtomicCompareExchange(inst);
        }

        Op::AtomicFetchAdd => {
            codegen.emitComment("AtomicFetchAdd");
            codegen.emitAtomicFetchAdd(inst);
        }

        Op::CountBits => {
            codegen.emitComment("CountBits");
            codegen.emitCountBits(inst);
        }

        Op::CountLeadingZeros => {
            codegen.emitComment("CountLeadingZeros");
            codegen.emitCountLeadingZeros(inst);
        }

        Op::CountTrailingZeros => {
            codegen.emitComment("CountTrailingZeros");
            codegen.emitCountTrailingZeros(inst);
        }

        Op::Safepoint => {
            codegen.emitComment("Safepoint");
            codegen.emitSafepoint(inst);
        }

        _ => {
            println("unsupported op ${inst.op().name()}");
            unreachable[()]();
        }
    }
}

pub trait CodeGen {
    fn allocatableRegisters(): RegSet[Register];
    fn allocatableFloatRegisters(): RegSet[FloatRegister];

    fn setArgumentLocations(arguments: ArgumentLocations);

    fn argumentRegister(idx: Int64): Register;
    fn argumentRegisters(): Array[Register];
    fn argumentFloatRegisters(): Array[FloatRegister];

    fn getScratchRegister(): Register;
    fn getFloatScratchRegister(): FloatRegister;

    fn getReturnRegister(): Register;
    fn getFloatReturnRegister(): FloatRegister;

    fn emitBreakpoint();
    fn emitProlog(stackSize: Int32);
    fn emitStackLimitCheck();

    fn finalize(): CodeDescriptor;

    fn registerName(register: Register): String;

    fn createLabel(): Label;
    fn bindLabel(label: Label);

    fn spill(inst: Inst);

    fn annotateAdd(inst: Inst);
    fn annotateSub(inst: Inst);
    fn annotateMul(inst: Inst);
    fn annotateDiv(inst: Inst);
    fn annotateAnd(inst: Inst);
    fn annotateOr(inst: Inst);
    fn annotateXor(inst: Inst);
    fn annotateSar(inst: Inst);
    fn annotateShr(inst: Inst);
    fn annotateShl(inst: Inst);
    fn annotateCheckedAdd(inst: Inst);
    fn annotateCheckedSub(inst: Inst);
    fn annotateCheckedMul(inst: Inst);
    fn annotateCheckedDiv(inst: Inst);
    fn annotateCheckedMod(inst: Inst);
    fn annotateReturn(inst: Inst);
    fn annotateNot(inst: Inst);
    fn annotateCompareOrdering(inst: Inst);
    fn annotateBitcast(inst: Inst);
    fn annotateRoundDown(inst: Inst);
    fn annotateRoundUp(inst: Inst);
    fn annotateRoundToZero(inst: Inst);
    fn annotateRoundHalfEven(inst: Inst);
    fn annotateAbs(inst: Inst);
    fn annotateSqrt(inst: Inst);
    fn annotateRotateLeft(inst: Inst);
    fn annotateRotateRight(inst: Inst);
    fn annotateAtomicLoad(inst: Inst);
    fn annotateAtomicStore(inst: Inst);
    fn annotateAtomicExchange(inst: Inst);
    fn annotateAtomicCompareExchange(inst: Inst);
    fn annotateAtomicFetchAdd(inst: Inst);
    fn annotateCountBits(inst: Inst);
    fn annotateCountLeadingZeros(inst: Inst);
    fn annotateCountTrailingZeros(inst: Inst);

    fn emitTrueConst(inst: Inst);
    fn emitFalseConst(inst: Inst);
    fn emitUInt8Const(inst: Inst);
    fn emitInt32Const(inst: Inst);
    fn emitInt64Const(inst: Inst);
    fn emitFloat32Const(inst: Inst);
    fn emitFloat64Const(inst: Inst);
    fn emitNullConst(inst: Inst);
    fn emitStringConst(inst: Inst);
    fn emitAnd(inst: Inst);
    fn emitOr(inst: Inst);
    fn emitXor(inst: Inst);
    fn emitSar(inst: Inst);
    fn emitShr(inst: Inst);
    fn emitShl(inst: Inst);
    fn emitAdd(inst: Inst);
    fn emitSub(inst: Inst);
    fn emitMul(inst: Inst);
    fn emitDiv(inst: Inst);
    fn emitNeg(inst: Inst);
    fn emitNot(inst: Inst);
    fn emitCheckedAdd(inst: Inst);
    fn emitCheckedSub(inst: Inst);
    fn emitCheckedMul(inst: Inst);
    fn emitCheckedDiv(inst: Inst);
    fn emitCheckedMod(inst: Inst);
    fn emitDivZeroCheck(inst: Inst);
    fn emitCheckedNeg(inst: Inst);
    fn emitIf(inst: Inst);
    fn emitSwitch(inst: Inst);
    fn emitGoto(inst: Inst);
    fn emitReturn(inst: Inst);
    fn emitMove(inst: Inst);
    fn emitLoadReg(inst: Inst);
    fn emitStoreReg(inst: Inst);
    fn emitRematerialize(inst: Inst);
    fn emitCompare(inst: Inst);
    fn emitInvoke(inst: Inst);
    fn emitInvokeVirtual(inst: Inst);
    fn emitInvokeLambda(inst: Inst);
    fn emitBoundsCheck(inst: Inst);
    fn emitLoadArray(inst: Inst);
    fn emitStoreArray(inst: Inst);
    fn emitGetElementPtr(inst: Inst);
    fn emitNewObject(inst: Inst);
    fn emitNewArray(inst: Inst);
    fn emitLoadGlobal(inst: Inst);
    fn emitGetGlobalAddress(inst: Inst);
    fn emitStoreGlobal(inst: Inst);
    fn emitEnsureGlobalInitialized(inst: Inst);
    fn emitMarkGlobalInitialized(inst: Inst);
    fn emitThreadCurrent(inst: Inst);
    fn emitAllocateStack(inst: Inst);
    fn emitLoad(inst: Inst);
    fn emitStore(inst: Inst);
    fn emitStoreWb(inst: Inst);
    fn emitStoreArrayWb(inst: Inst);
    fn emitStoreArrayAddressWb(inst: Inst);
    fn emitAbort(inst: Inst);
    fn emitAssert(inst: Inst);
    fn emitConvert(inst: Inst);
    fn emitCompareOrdering(inst: Inst);
    fn emitBitcast(inst: Inst);
    fn emitRoundDown(inst: Inst);
    fn emitRoundUp(inst: Inst);
    fn emitRoundToZero(inst: Inst);
    fn emitRoundHalfEven(inst: Inst);
    fn emitAbs(inst: Inst);
    fn emitSqrt(inst: Inst);
    fn emitUnreachable(inst: Inst);
    fn emitRotateLeft(inst: Inst);
    fn emitRotateRight(inst: Inst);
    fn emitDebug(inst: Inst);
    fn emitAtomicLoad(inst: Inst);
    fn emitAtomicStore(inst: Inst);
    fn emitAtomicExchange(inst: Inst);
    fn emitAtomicCompareExchange(inst: Inst);
    fn emitAtomicFetchAdd(inst: Inst);
    fn emitCountBits(inst: Inst);
    fn emitCountLeadingZeros(inst: Inst);
    fn emitCountTrailingZeros(inst: Inst);
    fn emitSafepoint(inst: Inst);

    fn emitComment(comment: String);
}

fn computeOffsetsInLiveSet(live: InstSet): Vec[Int32] {
    let offsets = Vec[Int32]::new();

    for inst in live {
        let loc = inst.getLocationData();

        if inst.op() == Op::AllocateStack {
            let layout = inst.getRecordLayout();
            let offset = loc.getStackSlot();

            for ref in layout.refs {
                offsets.push(offset + ref);
            }

        } else if inst.getValueType().isPtr() && loc.hasSpillSlot() {
            offsets.push(loc.getSpillSlot());
        }
    }

    offsets
}

fn getRegisterSnapshotWithout(inst: Inst, without: Register...): RegisterTrackers {
    let snapshot = inst.getLocationData().getRegisterSnapshot();

    for reg in without {
        snapshot.gp.freeRegisterIfUsed(reg);
    }

    snapshot
}

fn getLiveValuesWithoutCurrentInst(inst: Inst): InstSet {
    let live = inst.getLocationData().getLiveValues();
    live.remove(inst);
    live
}

fn fixupDirectCallSites(directCalls: Vec[(Int32, Label, LazyCompilationSiteDirect)]) {
    for (ra, label, site) in directCalls {
        let labelOffset = label.getOffset().getOrPanic();
        site.const_pool_offset_from_ra = labelOffset.toInt32() - ra;
    }
}

fn convertRelocations(entries: Vec[(Int32, Label)]): RelocationTable {
    let relocations = RelocationTable::new();

    for (pos, label) in entries {
        let target = label.getOffset().getOrPanic().toInt32();
        relocations.insert(pos, RelocationKind::JumpTableEntry(target));
    }

    relocations
}
