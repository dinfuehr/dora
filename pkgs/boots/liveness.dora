use std::collections::{BitSet, BitVec};
use std::collections::HashSet;

use package::graph::{Block, Graph, Input, InstSet};
use package::compilation::CompilationInfo;

pub fn computeLiveness(graph: Graph, ci: CompilationInfo) {
    computeLinearOrderIndex(graph);

    for block in graph.insertionOrderIterator() {
        block.setLiveIn(InstSet::new(graph));
    }

    for block in graph.postOrderIterator() {
        let live = computeLiveIn(block);
        block.getLiveIn().unionWith(live);
    }

    for block in graph.reversePostOrderIterator() {
        if !block.isLoopHeader() {
            continue;
        }

        let loopData = block.getLoopData().getOrPanic();
        let liveLoop = block.getLiveIn();

        // A value which is live-in in the loop header, is also live-in
        // in all blocks of that loop.
        for loopBlockId in loopData.blocks() {
            let loopBlock = graph.getBlockWithId(loopBlockId.toInt32());
            loopBlock.getLiveIn().unionWith(liveLoop);
        }
    }

    for block in graph.postOrderIterator() {
        let liveIn = computeLiveIn(block);
        assert(block.getLiveIn() == liveIn);
    }
}

fn computeLiveIn(block: Block): InstSet {
    let live = InstSet::new(block.getGraph());

    for successorEdge in block.successors {
        let successor = successorEdge.target;
        let idx = successorEdge.targetIdx;

        for phi in successor.phisIterator() {
            let input = phi.getInput(idx);
            let value = input.getValue();
            live.insert(value);
        }

        live.unionWith(successor.getLiveIn());
    }

    for inst in block.reverseInstructionsIterator() {
        for input in inst.getInputs() {
            let value = input.getValue();
            live.insert(value);
        }

        live.remove(inst);
    }

    for phi in block.phisIterator() {
        live.remove(phi);
    }

    live
}

fn computeLinearOrderIndex(graph: Graph) {
    let mut idx = 1i32;
    let mut linearOrder = Vec[Block]::new();

    if false {
        for block in graph.reversePostOrderIterator() {
            linearOrder.push(block);
            idx = setLinearOrderIndex(block, idx);
        }
    } else {
        let mut deferred = Vec[Block]::new();
        let mut failureBlocks = computeFailureBlocks(graph);

        for block in graph.reversePostOrderIterator() {
            if failureBlocks.contains(block.id().toInt64()) {
                deferred.push(block);
                continue;
            }

            linearOrder.push(block);
            idx = setLinearOrderIndex(block, idx);
        }

        for block in deferred {
            linearOrder.push(block);
            idx = setLinearOrderIndex(block, idx);
        }
    }

    graph.setLinearOrder(linearOrder);
}

fn setLinearOrderIndex(block: Block, mut idx: Int32): Int32 {
    for phi in block.phisIterator() {
        phi.setLinearOrderIndex(idx);
    }

    for inst in block.instructionsIterator() {
        inst.setLinearOrderIndex(idx);
        idx = idx + 1i32;
    }

    idx
}

fn computeFailureBlocks(graph: Graph): BitSet {
    let mut failure = BitSet::new(graph.blockCount().toInt64());

    for block in graph.insertionOrderIterator() {
        if block.lastInst().isUnreachable() {
            failure.insert(block.id().toInt64());
        }
    }

    while true {
        let mut changed = false;

        for block in graph.insertionOrderIterator() {
            if failure.contains(block.id().toInt64()) {
                continue;
            }

            if block.successors.isEmpty() {
                continue;
            }

            let mut insert = true;

            for edge in block.successors {
                let target = edge.target;

                if !failure.contains(target.id().toInt64()) {
                    insert = false;
                    break;
                }
            }

            if insert {
                failure.insert(block.id().toInt64());
                changed = true;
            }
        }

        if !changed {
            break;
        }
    }

    failure
}