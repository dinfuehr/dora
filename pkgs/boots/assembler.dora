use std::Hash;
use std::Equals;
use std::traits::Iterator;

use package::graph::Location;

pub mod arm64;
pub mod x64;

class AssemblerBuffer {
    buffer: Vec[UInt8],
    pos: Int64,
}

impl AssemblerBuffer {
    static fn new(): AssemblerBuffer {
        AssemblerBuffer(buffer = Vec[UInt8]::new(), pos = 0)
    }

    fn position(): Int64 {
        self.pos
    }

    fn setPosition(newpos: Int64) {
        self.pos = newpos;
    }

    fn setPositionEnd() {
        self.pos = self.buffer.size();
    }

    fn emitByte(value: UInt8) {
        if self.pos == self.buffer.size() {
            self.buffer.push(value);
        } else {
            self.buffer(self.pos) = value;
        }

        self.pos = self.pos + 1;
    }

    fn emitInt32(value: Int32) {
        self.emitByte((value & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 8i32) & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 16i32) & 0xFFi32).toUInt8());
        self.emitByte(((value >>> 24i32) & 0xFFi32).toUInt8());
    }

    fn emitInt64(value: Int64) {
        self.emitInt32(value.toInt32());
        self.emitInt32((value >>> 32i32).toInt32());
    }

    fn patchUInt8(offset: Int64, value: UInt8) {
        self.buffer(offset) = value;
    }

    fn patchInt32(offset: Int64, value: Int32) {
        self.buffer(offset) = (value & 0xFFi32).toUInt8();
        self.buffer(offset + 1i64) = ((value >>> 8i32) & 0xFFi32).toUInt8();
        self.buffer(offset + 2i64) = ((value >>> 16i32) & 0xFFi32).toUInt8();
        self.buffer(offset + 3i64) = ((value >>> 24i32) & 0xFFi32).toUInt8();
    }

    fn size(): Int64 {
        self.buffer.size()
    }

    fn capacity(): Int64 {
        self.buffer.capacity()
    }

    fn toArray(): Array[UInt8] {
        self.buffer.toArray()
    }

    fn createLabel(): Label {
        Label::new()
    }

    fn bindLabel(lbl: Label) {
        lbl.bindTo(self.size());
    }

    fn createAndBindLabel(): Label {
        let lbl = self.createLabel();
        self.bindLabel(lbl);

        lbl
    }
}

pub class Label {
    offset: Int64
}

impl Label {
    static fn new(): Label {
        Label(offset = -1)
    }

    fn bindTo(pos: Int64) {
        assert(pos >= 0i64 && self.offset < 0i64);
        self.offset = pos;
    }

    fn isBound(): Bool {
        self.offset >= 0i64
    }
}

@Test
fn testAssemblerBufferEmitByte() {
    let buffer = AssemblerBuffer::new();
    buffer.emitByte(0x01u8);
    buffer.emitByte(0x02u8);
    assert(buffer.size() == 2i64);
}

@Test
fn testAssemblerBufferEmitInt() {
    let asm = AssemblerBuffer::new();
    asm.emitInt32(0x11223344i32);
    let buffer = asm.toArray();
    assert(buffer(0i64) == 0x44u8);
    assert(buffer(1i64) == 0x33u8);
    assert(buffer(2i64) == 0x22u8);
    assert(buffer(3i64) == 0x11u8);
    assert(buffer.size() == 4i64);
}

pub trait RegisterType: Equals {
    static fn fromInt32(value: Int32): Self;
    fn toInt32(): Int32;
    fn toLocation(): Location;
}

pub struct Register(pub value: UInt8)

impl Register {
    fn value(): UInt8 {
        self.0
    }

    fn equals(rhs: Register): Bool {
        self.0 == rhs.0
    }
}

impl Hash for Register {
    fn hash(): Int32 {
        self.0.toInt32()
    }
}

impl Equals for Register {
  fn equals(other: Register): Bool { self.0 == other.0 }
}

impl RegisterType for Register {
    static fn fromInt32(value: Int32): Register {
        assert(value < 64i32);
        Register(value.toUInt8())
    }

    fn toInt32(): Int32 {
        self.0.toInt32()
    }

    fn toLocation(): Location {
        Location::Reg(self)
    }
}

impl std::Stringable for Register {
    fn toString(): String {
        "Reg(${self.0})"
    }
}

pub struct FloatRegister(pub value: UInt8)

impl FloatRegister {
    fn value(): Int32 {
        self.0.toInt32()
    }
}

impl Equals for FloatRegister {
    fn equals(rhs: FloatRegister): Bool {
        self.0 == rhs.0
    }
}

impl Hash for FloatRegister {
    fn hash(): Int32 {
        self.0.toInt32()
    }
}

impl RegisterType for FloatRegister {
    static fn fromInt32(value: Int32): FloatRegister {
        assert(value < 64i32);
        FloatRegister(value.toUInt8())
    }

    fn toInt32(): Int32 {
        self.0.toInt32()
    }

    fn toLocation(): Location {
        Location::FloatReg(self)
    }
}


impl std::Stringable for FloatRegister {
    fn toString(): String {
        "FloatReg(${self.value()})"
    }
}

impl Equals for Register {
  fn equals(other: Register): Bool { self.0 == other.0 }
}

class MachineCode {
    bytes: Array[UInt8],
    start: Int64,
}

impl MachineCode {
    static fn new(bytes: Array[UInt8]): MachineCode {
        MachineCode(bytes = bytes, start = 0)
    }

    fn getInt32(idx: Int64): Int32 {
        self.bytes(idx).toInt32() |
            self.bytes(idx+1i64).toInt32() << 8i32 |
            self.bytes(idx+2i64).toInt32() << 16i32 |
            self.bytes(idx+3i64).toInt32() << 24i32
    }
}

pub class RegMap[T: RegisterType, V] {
    allocatable: Int64,
    in_use: Int64,
    data: Array[Option[V]],
}

impl[T: RegisterType, V] RegMap[T, V] {
    pub static fn new(rs: RegSet[T]): RegMap[T, V] {
        RegMap(
            allocatable = rs.value,
            in_use = 0,
            data = Array[Option[V]]::fill(64, None[V])
        )
    }

    pub fn clone(): RegMap[T, V] {
        RegMap(
            allocatable = self.allocatable,
            in_use = self.in_use,
            data = self.data.clone()
        )
    }

    pub fn acquire(value: V): Option[T] {
        let available = !self.in_use & self.allocatable;
        let idx = available.countZeroBitsTrailing();

        if idx == 64i32 {
            None[T]
        } else {
            self.in_use = self.in_use | (1 << idx);
            self.data(idx.toInt64()) = Some[V](value);
            Some[T](T::fromInt32(idx))
        }
    }

    pub fn pick(reg: T, value: V) {
        let available = !self.in_use & self.allocatable;
        let idx = reg.toInt32();
        assert((available & (1 << idx)) != 0);

        self.in_use = self.in_use | (1 << idx);
        self.data(idx.toInt64()) = Some[V](value);
    }

    pub fn get(reg: T): Option[V] {
        let value = reg.toInt32();
        assert((self.in_use & (1 << value)) != 0);

        self.data(value.toInt64())
    }

    pub fn free(reg: T): Option[V] {
        let value = reg.toInt32();
        assert(value < 64i32);
        self.in_use = self.in_use & !(1 << value);
        let result = self.data(value.toInt64());
        self.data(value.toInt64()) = None[V];
        result
    }
}

impl[T: RegisterType, V] std::traits::IntoIterator for RegMap[T, V] {
    type IteratorType = RegMapIterator[T, V];
    fn iter(): Self::IteratorType {
        RegMapIterator(map = self, idx = 0)
    }
}

pub class RegMapIterator[T: RegisterType, V] {
    map: RegMap[T, V],
    idx: Int64,
}

impl[T: RegisterType, V] Iterator for RegMapIterator[T, V] {
    type Item = (T, V);

    fn next(): Option[(T, V)] {
        while self.idx < self.map.data.size() {
            let value = self.map.data(self.idx);
            if value.isSome() {
                let reg = T::fromInt32(self.idx.toInt32());
                let value = value.getOrPanic();
                self.idx = self.idx + 1;
                return Some[(T, V)]((reg, value));
            }

            self.idx = self.idx + 1;
        }

        None
    }
}

pub class RegSet[T: RegisterType] {
    value: Int64,
}

impl[T: RegisterType] RegSet[T] {
    pub static fn new(registers: T...): RegSet[T] {
        let rs = RegSet[T](value = 0);

        for reg in registers {
            rs.add(reg);
        }

        rs
    }

    pub static fn firstN(registers: Int32): RegSet[T] {
        RegSet[T](value = (1 << registers) - 1)
    }

    pub fn add(reg: T): Bool {
        let value = reg.toInt32();
        assert(value < 64i32);
        let mask = 1 << value;
        if self.value & mask != 0 {
            false
        } else {
            self.value = self.value | mask;
            true
        }
    }

    pub fn contains(reg: T): Bool {
        let value = reg.toInt32();
        assert(value < 64i32);
        (self.value & (1 << value)) != 0
    }

    pub fn remove(reg: T): Bool {
        let value = reg.toInt32();
        assert(value < 64i32);
        let contains = (self.value | (1 << value)) != 0;
        self.value = self.value & !(1 << value);
        contains
    }

    pub fn isEmpty(): Bool {
        self.value == 0
    }

    pub fn popLowestIndex(): Option[T] {
        let idx = self.value.countZeroBitsTrailing();

        if idx == 64i32 {
            None[T]
        } else {
            self.value = self.value & !(1 << idx);
            return Some[T](T::fromInt32(idx));
        }
    }

    pub fn popHighestIndex(): Option[T] {
        let idx = self.value.countZeroBitsLeading();

        if idx == 64i32 {
            None[T]
        } else {
            let idx = 63i32 - idx;
            self.value = self.value & !(1 << idx);
            return Some[T](T::fromInt32(idx));
        }
    }

    pub fn first(): Option[T] {
        let idx = self.value.countZeroBitsTrailing();

        if idx == 64i32 {
            None[T]
        } else {
            Some[T](T::fromInt32(idx))
        }
    }

    pub fn clear() {
        self.value = 0
    }

    pub fn equals(other: RegSet[T]): Bool {
        self.value == other.value
    }

    pub fn intersect(other: RegSet[T]): RegSet[T] {
        RegSet(value = self.value & other.value)
    }

    pub fn union(other: RegSet[T]): RegSet[T] {
        RegSet(value = self.value | other.value)
    }

    pub fn difference(other: RegSet[T]): RegSet[T] {
        RegSet(value = self.value & !other.value)
    }

    pub fn clone(): RegSet[T] {
        RegSet(
            value = self.value,
        )
    }

    pub fn size(): Int64 {
        self.value.countOneBits().toInt64()
    }

    pub fn toArray(): Array[T] {
        let count = self.size();
        let result = Array[T]::fill(count, T::fromInt32(0i32));
        let iter = self.iter();

        for idx in std::range(0, count) {
            result(idx) = iter.next().getOrPanic();
        }

        assert(iter.next().isNone());
        result
    }
}

impl[T: RegisterType] std::traits::IntoIterator for RegSet[T] {
    type IteratorType = RegSetIterator[T];
    fn iter(): Self::IteratorType {
        RegSetIterator(value = self.value, idx = 0i32)
    }
}

pub class RegSetIterator[T: RegisterType] {
    value: Int64,
    idx: Int32,
}

impl[T: RegisterType] Iterator for RegSetIterator[T] {
    type Item = T;

    fn next(): Option[T] {
        while self.value != 0 {
            let idx = self.value.countZeroBitsTrailing();
            self.value = self.value & !(1 << idx);
            return Some[T](T::fromInt32(idx));
        }

        None
    }
}

mod tests {
    use super::{RegSet, Register};

    @Test
    fn iterateRegSet() {
        let regset = RegSet[Register]::new(Register(1u8), Register(15u8), Register(63u8));
        let iter = regset.iter();
        assert(iter.next().getOrPanic().0 == 1u8);
        assert(iter.next().getOrPanic().0 == 15u8);
        assert(iter.next().getOrPanic().0 == 63u8);
        assert(iter.next().isNone());
    }

    @Test
    fn popLowestIndexFromRegSet() {
        let regset = RegSet[Register]::new(Register(1u8), Register(15u8), Register(63u8));
        assert(regset.popLowestIndex().getOrPanic().0 == 1u8);
        assert(regset.popLowestIndex().getOrPanic().0 == 15u8);
        assert(regset.popLowestIndex().getOrPanic().0 == 63u8);
        assert(regset.popLowestIndex().isNone());
    }

    @Test
    fn popHighestIndexFromRegSet() {
        let regset = RegSet[Register]::new(Register(1u8), Register(15u8), Register(63u8));
        assert(regset.popHighestIndex().getOrPanic().0 == 63u8);
        assert(regset.popHighestIndex().getOrPanic().0 == 15u8);
        assert(regset.popHighestIndex().getOrPanic().0 == 1u8);
        assert(regset.popHighestIndex().isNone());
    }
}
