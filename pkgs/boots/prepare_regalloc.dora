use package::codegen::CodeGen;
use package::compilation::CompilationInfo;
use package::graph::{Graph, Inst, Op, Type};
use package::interface::config;

pub fn prepareRegisterAllocation(graph: Graph, codegen: CodeGen, ci: CompilationInfo) {
    for block in graph.insertionOrderIterator() {
        for inst in block.instructionsIterator() {
            if inst.op().isCompare() && isSupportedType(inst) {
                if getSingleIfUser(inst) is Some(user) {
                    inst.moveBefore(user);
                    inst.setEmitAtUseSite();
                }
            }
        }
    }
}

fn isSupportedType(inst: Inst): Bool {
    assert(inst.op().isCompare());
    match inst.getOperationType() {
        Type::Int32 | Type::Int64 | Type::Ptr => true,
        _ => false
    }
}

fn getSingleIfUser(inst: Inst): Option[Inst] {
    if inst.hasOneUser() {
        let user = inst.firstUse().getOrPanic().getUsedBy();

        if user.op() == Op::If {
            Some[Inst](user)
        } else {
            None[Inst]
        }

    } else {
        None[Inst]
    }
}
