use package::codegen::CodeGen;
use package::compilation::CompilationInfo;
use package::graph::{Graph, Inst, Op, Type};
use package::interface::config;

pub fn prepareRegisterAllocation(graph: Graph, codegen: CodeGen, ci: CompilationInfo) {
    for block in graph.insertionOrderIterator() {
        for inst in block.instructionsIterator() {
            if inst.op().isCompare() && isSupportedType(inst) && hasSingleUseInIf(inst) {
                inst.setEmitAtUseSite();
            }
        }
    }
}

fn isSupportedType(inst: Inst): Bool {
    assert(inst.op().isCompare());
    match inst.getOperationType() {
        Type::Int32 | Type::Int64 | Type::Ptr => true,
        _ => false
    }
}

fn hasSingleUseInIf(inst: Inst): Bool {
    if inst.hasOneUser() {
        let user = inst.firstUse().getOrPanic().getUsedBy();
        user.op() == Op::If && inst.getNextInst() is Some(x) && x === user
    } else {
        false
    }
}
