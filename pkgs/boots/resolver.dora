use std::collections::{HashMap, HashSet};

use package::assembler::{FloatRegister, Register, RegisterType};
use package::codegen::CodeGen;
use package::graph::{Block, createMoveInst, createRematerializeInst, Edge, Graph, Inst, Location, RegisterTrackers, Type};
use package::regalloc::RegisterTracker;

pub fn resolveMoves(graph: Graph, codegen: CodeGen) {
    for block in graph.insertionOrderIterator() {
        let block_trackers = block.getTrackerIn();
        
        for predecessorEdge in block.predecessors {
            let predecessor = predecessorEdge.source;
            let moves = ParallelMoveResolver::new();

            let predecessor_trackers = predecessor.getTrackerOut();

            processLiveRegisters[Register](block_trackers.gp, predecessor_trackers.gp, moves);
            processLiveRegisters[FloatRegister](block_trackers.fp, predecessor_trackers.fp, moves);

            processPhis(block, predecessorEdge, predecessor_trackers, moves);

            moves.resolve(codegen.getScratchRegister(), codegen.getFloatScratchRegister());

            if predecessor.successors.size() == 1 {
                moves.emitMovesAtEnd(predecessor);
            } else {
                assert(block.predecessors.size() == 1);
                moves.emitMovesAtStart(predecessor);
            }
        }
    }
}

fn processLiveRegisters[T: RegisterType](registers: RegisterTracker[T], predecessor_registers: RegisterTracker[T], moves: ParallelMoveResolver) {
    for (reg, inst) in registers.data {
        let instRegister = predecessor_registers.getRegister(inst);

        let value = if instRegister is Some(reg) {
            reg.toLocation()
        } else {
            Location::fp(inst.getLocationData().getSpillSlot())
        };

        moves.add(inst.getValueType(), reg.toLocation(), value);
    }
}

fn processPhis(block: Block, predecessorEdge: Edge, predecessor_registers: RegisterTrackers, moves: ParallelMoveResolver) {
    for phi in block.phisIterator() {
        // Critical edges should already be split.
        assert(predecessorEdge.source.successors.size() == 1);

        if phi.getValueType().isAnyFloat() {
            processPhi[FloatRegister](phi, predecessorEdge, predecessor_registers.fp, moves);
        } else {
            processPhi[Register](phi, predecessorEdge, predecessor_registers.gp, moves);
        }
    }
}

fn processPhi[T: RegisterType](phi: Inst, predecessorEdge: Edge, predecessor_registers: RegisterTracker[T], moves: ParallelMoveResolver) {
    let loc = phi.getLocationData();

    let value = phi.getInput(predecessorEdge.targetIdx).getValue();
    let valueRegister = predecessor_registers.getRegister(value);

    if valueRegister.isSome() || value.getLocationData().hasSpillSlot() {
        let value = if valueRegister is Some(reg) {
            reg.toLocation()
        } else {
            Location::fp(value.getLocationData().getSpillSlot())
        };

        // Phi could live both in register and on stack. This means
        // there are up to 2 moves emitted for each phi.

        if loc.hasSpillSlot() {
            let dest = Location::fp(loc.getSpillSlot());
            moves.add(phi.getValueType(), dest, value);
        }

        if !loc.getOutput().isNone() {
            let dest = loc.getOutput().getLocation();
            moves.add(phi.getValueType(), dest, value);
        }
    } else {
        assert(value.op().canBeRematerialized());

        // Phi could live both in register and on stack. This means
        // there are up to 2 moves emitted for each phi.

        if loc.hasSpillSlot() {
            let dest = Location::fp(loc.getSpillSlot());
            moves.addRematerialize(dest, value);
        }

        if !loc.getOutput().isNone() {
            let dest = loc.getOutput().getLocation();
            moves.addRematerialize(dest, value);
        }
    }
}


struct Move {
    ty: Type,
    dest: Location,
    src: Location,
}

struct RematerializeMove {
    dest: Location,
    value: Inst,
}

class ParallelMoveResolver {
    parallelMoves: Vec[Move],
    orderedMoves: Vec[Move],
    rematerialize: Vec[RematerializeMove],
    // Type for each src. Immutable after setup.
    types: HashMap[Location, Type],
    // All written registers (dest <- src). Immutable after setup.
    directpreds: HashMap[Location, Location],
    // All used variables and their current location.
    locations: HashMap[Location, Location],
    // All locations that still need to be stored
    todo: HashSet[Location],
}

impl ParallelMoveResolver {
    static fn new(): ParallelMoveResolver {
        ParallelMoveResolver(
            Vec[Move]::new(),
            Vec[Move]::new(),
            Vec[RematerializeMove]::new(),
            HashMap[Location, Type]::new(),
            HashMap[Location, Location]::new(),
            HashMap[Location, Location]::new(),
            HashSet[Location]::new(),
        )
    }

    fn add(ty: Type, dest: Location, src: Location) {
        if dest == src { return; }
        self.parallelMoves.push(Move(ty, dest, src));
    }

    fn addRematerialize(dest: Location, value: Inst) {
        self.rematerialize.push(RematerializeMove(dest, value));
    }

    fn resolve(scratch: Register, float_scratch: FloatRegister) {
        for move in self.parallelMoves {
            let ty = move.ty;
            let dest = move.dest;
            let src = move.src;

            // There is only one move to each location allowed.
            assert(!self.directpreds.contains(dest));
            self.directpreds.insert(dest, src);
            self.locations.insert(src, src);
            // The move describes the type of src. dest could
            // currently hold a value of another type.
            self.types.insert(src, ty);
            assert(!self.todo.contains(dest));
            self.todo.insert(dest);
        }

        for move in self.parallelMoves {
            let ty = move.ty;
            let dest = move.dest;
            let src = move.src;

            if !self.locations.contains(dest) {
                assert(self.todo.contains(dest));
                self.emitMoveChainAt(dest);
            }
        }

        while !self.todo.isEmpty() {
            let dest = self.todo.iter().next().getOrPanic();
            let ty = self.types.get(dest).getOrPanic();
            assert(self.inCycle(dest));
            let scratch = if ty.isAnyFloat() {
                float_scratch.toLocation()
            } else {
                scratch.toLocation()
            };
            self.emitOrderedMove(ty, scratch, dest);
            self.locations.insert(dest, scratch);
            self.emitMoveChainAt(dest);
        }
    }

    fn inCycle(opnd: Location): Bool {
        let start = opnd;
        let mut opnd = opnd;
        assert(self.todo.contains(opnd));

        while self.directpreds.contains(opnd) {
            opnd = self.directpreds.get(opnd).getOrPanic();
            assert(self.todo.contains(opnd));

            if opnd == start {
                return true;
            }
        }

        false
    }

    fn emitMoveChainAt(dest: Location) {
        let mut dest = dest;
        assert(self.todo.contains(dest));

        while self.todo.contains(dest) {
            let original_src = self.directpreds.get(dest).getOrPanic();
            let src_ty = self.types.get(original_src).getOrPanic();
            let actual_src = self.locations.get(original_src).getOrPanic();
            self.emitOrderedMove(src_ty, dest, actual_src);
            self.locations.insert(original_src, dest);
            assert(self.todo.remove(dest));

            if !self.directpreds.contains(original_src) {
                return;
            }

            dest = original_src;
        }
    }

    fn emitOrderedMove(ty: Type, dest: Location, src: Location) {
        self.orderedMoves.push(Move(ty, dest, src));
    }

    fn emitMovesAtEnd(block: Block) {
        let terminator = block.lastInst();
        assert(terminator.isTerminator());

        for move in self.orderedMoves {
            let inst = createMoveInst(move.ty, move.dest, move.src);
            terminator.insertBefore(inst);
        }

        for move in self.rematerialize {
            let inst = createRematerializeInst(move.dest, move.value);
            terminator.insertBefore(inst);
        }
    }

    fn emitMovesAtStart(block: Block) {
        let first = block.firstInst();

        for move in self.orderedMoves {
            let inst = createMoveInst(move.ty, move.dest, move.src);
            first.insertBefore(inst);
        }
    }
}

@Test
fn testRegisterMovesWithoutDependencies() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int64, r(1), r(0));
    moves.add(Type::Int64, r(3), r(2));
    moves.resolve(Register(10u8), FloatRegister(100u8));

    expectMoves(moves, moves.parallelMoves.toArray());
}

@Test
fn testFloatRegisterMovesWithoutDependencies() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Float64, f(1), f(0));
    moves.add(Type::Float64, f(3), f(2));
    moves.resolve(Register(10u8), FloatRegister(100u8));

    expectMoves(moves, moves.parallelMoves.toArray());
}

@Test
fn testRegisterMovesWithDependency() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int64, r(1), r(0));
    moves.add(Type::Int64, r(2), r(1));
    moves.resolve(Register(10u8), FloatRegister(100u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Int64, r(2), r(1)),
        Move(Type::Int64, r(1), r(0)),
    ));
}

@Test
fn testRegisterMovesWithDependencyAndDifferentTypes() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int32, r(1), r(0));
    moves.add(Type::Int64, r(2), r(1));
    moves.resolve(Register(10u8), FloatRegister(100u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Int64, r(2), r(1)),
        Move(Type::Int32, r(1), r(0)),
    ));
}

@Test
fn testFloatRegisterMovesWithDependency() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Float64, f(1), f(0));
    moves.add(Type::Float64, f(2), f(1));
    moves.resolve(Register(10u8), FloatRegister(100u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Float64, f(2), f(1)),
        Move(Type::Float64, f(1), f(0)),
    ));
}

@Test
fn testStackMovesWithDependency() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int32, s(1), r(0));
    moves.add(Type::Int32, r(2), s(1));
    moves.resolve(Register(10u8), FloatRegister(1u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Int32, r(2), s(1)),
        Move(Type::Int32, s(1), r(0)),
    ));
}

@Test
fn testRegisterMovesWithCycle() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int64, r(1), r(0));
    moves.add(Type::Int64, r(2), r(1));
    moves.add(Type::Int64, r(0), r(2));
    moves.resolve(Register(100u8), FloatRegister(100u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Int64, r(100), r(2)),
        Move(Type::Int64, r(2), r(1)),
        Move(Type::Int64, r(1), r(0)),
        Move(Type::Int64, r(0), r(100)),
    ));
}

@Test
fn testFloatRegisterMovesWithCycle() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Float64, f(1), f(0));
    moves.add(Type::Float64, f(2), f(1));
    moves.add(Type::Float64, f(0), f(2));
    moves.resolve(Register(100u8), FloatRegister(5u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Float64, f(5), f(2)),
        Move(Type::Float64, f(2), f(1)),
        Move(Type::Float64, f(1), f(0)),
        Move(Type::Float64, f(0), f(5)),
    ));
}

@Test
fn testStackMovesWithCycle() {
    let moves = ParallelMoveResolver::new();
    moves.add(Type::Int64, s(1), s(0));
    moves.add(Type::Int64, s(2), s(1));
    moves.add(Type::Int64, s(0), s(2));
    moves.resolve(Register(100u8), FloatRegister(100u8));

    expectMoves(moves, Array[Move]::new(
        Move(Type::Int64, r(100), s(2)),
        Move(Type::Int64, s(2), s(1)),
        Move(Type::Int64, s(1), s(0)),
        Move(Type::Int64, s(0), r(100)),
    ));
}

fn expectMoves(moves: ParallelMoveResolver, expected: Array[Move]) {
    let mut idx = 0;
    assert(moves.orderedMoves.size() == expected.size());
    for move in moves.orderedMoves {
        let exp = expected(idx);

        if move.ty != exp.ty || move.dest != exp.dest || move.src != exp.src {
            println("index ${idx}");
            println("move.dest=${move.dest} vs exp.dest=${exp.dest}");
            println("move.src=${move.src} vs exp.src=${exp.src}");
            println("move.ty=${move.ty} vs exp.ty=${exp.ty}");
        }

        assert(move.ty == exp.ty);
        assert(move.dest == exp.dest);
        assert(move.src == exp.src);
        idx = idx + 1;
    }
}

fn r(value: Int64): Location {
    Location::Reg(Register(value.toUInt8()))
}

fn f(value: Int64): Location {
    Location::FloatReg(FloatRegister(value.toUInt8()))
}

fn s(value: Int64): Location {
    Location::fp(value.toInt32())
}
