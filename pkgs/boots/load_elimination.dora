use std::{HashSet, HashMap};

use package::bytecode::GlobalId;
use package::compilation::CompilationInfo;
use package::dominator::computePostOrder;
use package::graph::{Graph, Inst, Op};

pub fn performLoadElimination(ci: CompilationInfo, graph: Graph) {
    computePostOrder(graph);

    for block in graph.reversePostOrderIterator() {
        let data = LoadData::new();

        for inst in block.instructionsIterator() {
            let op = inst.op();

            if op == Op::EnsureGlobalInitialized {
                let id = inst.getGlobalId();

                if !data.initializeGlobal(id) {
                    inst.remove();
                }
            } else if op == Op::LoadGlobal {
                let id = inst.getGlobalId();
                let value = data.getGlobalValue(id);

                if value.isSome() {
                    inst.replaceAllUsesWith(value.getOrPanic());
                    inst.remove();
                } else {
                    data.setGlobalValue(id, inst);
                }
            } else if op == Op::StoreGlobal {
                let id = inst.getGlobalId();
                let value = inst.getInput(0).getValue();
                data.setGlobalValue(id, value);
            } else if op.isCall() {
                data.kill();
            }
        }
    }
}

class LoadData {
    initialized_globals: HashSet[Int32],
    global_values: HashMap[Int32, Inst],
}

impl LoadData {
    static fn new(): LoadData {
        LoadData(
            HashSet[Int32]::new(),
            HashMap[Int32, Inst]::new(),
        )
    }

    fn initializeGlobal(id: GlobalId): Bool {
        self.initialized_globals.insert(id.value)
    }

    fn getGlobalValue(id: GlobalId): Option[Inst] {
        self.global_values.get(id.value)
    }

    fn setGlobalValue(id: GlobalId, value: Inst) {
        self.global_values.insert(id.value, value);
    }

    fn kill() {
        self.global_values.clear();
    }
}
