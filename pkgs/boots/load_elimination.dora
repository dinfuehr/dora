use std::{Equals, Hash, HashSet, HashMap};

use package::bytecode::{ClassId, GlobalId};
use package::compilation::CompilationInfo;
use package::dominator::computePostOrder;
use package::graph::{Block, ClassInfo, Graph, Inst, Op};

pub fn performLoadElimination(ci: CompilationInfo, graph: Graph) {
    computePostOrder(graph);
    let per_block_data = Array[Option[LoadData]]::fill(graph.blocks.size(), None[LoadData]);

    for block in graph.reversePostOrderIterator() {
        let data = mergePredecessors(block, per_block_data);
        processBlock(block, data);
        per_block_data(block.id().toInt64()) = Some[LoadData](data);
    }
}

fn mergePredecessors(block: Block, per_block_data: Array[Option[LoadData]]): LoadData {
    let p = block.predecessors.size();

    if p == 0 {
        return LoadData::new();
    }

    let predecessorData = Array[Option[LoadData]]::fill(p, None[LoadData]);
    let mut i = 0;

    for predEdge in block.predecessors {
        let data = per_block_data(predEdge.source.id().toInt64());

        if data.isNone() {
            return LoadData::new();
        }

        predecessorData(i) = data;
        i += 1;
    }

    let first = predecessorData(0).getOrPanic();

    if p == 1 {
        return first.clone();
    }

    let result = LoadData::new();

    for global in first.initialized_globals {
        let mut i = 1;
        let mut in_all = true;

        while i < p {
            let predData = predecessorData(i).getOrPanic();

            if predData.initialized_globals.contains(global) {
                in_all = false;
                break;
            }

            i += 1;
        }

        if in_all {
            result.initialized_globals.insert(global);
        }
    }

    for (global, value) in first.global_values {
        let mut i = 1;
        let mut in_all = true;

        while i < p {
            let predData = predecessorData(i).getOrPanic();

            if predData.global_values.get(global) is Some(x) && x == value {
                in_all = false;
                break;
            }

            i += 1;
        }

        if in_all {
            result.global_values.insert(global, value);
        }
    }

    // for (field, value) in first.class_values {
    //     let mut i = 1;
    //     let mut in_all = true;

    //     while i < p {
    //         let predData = predecessorData(i).getOrPanic();

    //         if predData.class_values.get(field) is Some(x) && x == value {
    //             in_all = false;
    //             break;
    //         }

    //         i += 1;
    //     }

    //     if in_all {
    //         result.class_values.insert(field, value);
    //     }
    // }

    result
}

fn processBlock(block: Block, data: LoadData) {
    for inst in block.instructionsIterator() {
        let op = inst.op();

        if op == Op::EnsureGlobalInitialized {
            let id = inst.getGlobalId();

            if !data.initializeGlobal(id) {
                inst.remove();
            }

        } else if op == Op::LoadGlobal {
            let id = inst.getGlobalId();

            if data.getGlobalValue(id) is Some(value) {
                inst.replaceAllUsesWith(value);
                inst.remove();
            } else {
                data.setGlobalValue(id, inst);
            }

        } else if op == Op::StoreGlobal {
            let id = inst.getGlobalId();
            let value = inst.getInput(0).getValue();
            data.setGlobalValue(id, value);

        } else if op == Op::Load {
            if inst.hasClassInfo() {
                let class_info = inst.getClassInfo();
                let object = inst.getInput(0).getValue();
                let field = Field(object, class_info, offset = inst.getOffset());

                if data.class_values.get(field) is Some(value) {
                    inst.replaceAllUsesWith(value);
                    inst.remove();
                } else {
                    data.class_values.insert(field, inst);
                }
            }

        } else if op == Op::Store || op == Op::StoreWb {
            if inst.hasClassInfo() {
                let class_info = inst.getClassInfo();
                let field_offset = inst.getOffset();

                let object = inst.getInput(0).getValue();
                let field = Field(object, class_info, offset = field_offset);
                let cur_value = data.class_values.get(field);

                data.class_values.retainIf(|field: Field, value: Inst|: Bool {
                    field.class_info != class_info || field.offset != field_offset
                });

                let new_value = inst.getInput(1).getValue();
                if cur_value is Some(cur_value) && cur_value == new_value {
                    assert(!inst.hasUses());
                    inst.remove();
                }

                data.class_values.insert(field, new_value);
            }

        } else if op.isCall() {
            data.kill();
        }
    }
}

struct Field {
    object: Inst,
    class_info: ClassInfo,
    offset: Int32,
}

impl Equals for Field {
    fn equals(other: Field): Bool {
        self.object == other.object && self.class_info == other.class_info && self.offset == other.offset
    }
}

impl Hash for Field {
    fn hash(): Int32 {
        self.object.hash() ^ self.class_info.hash() ^ self.offset
    }
}

class LoadData {
    initialized_globals: HashSet[Int32],
    global_values: HashMap[Int32, Inst],
    class_values: HashMap[Field, Inst],
}

impl LoadData {
    static fn new(): LoadData {
        LoadData(
            initialized_globals = HashSet[Int32]::new(),
            global_values = HashMap[Int32, Inst]::new(),
            class_values = HashMap[Field, Inst]::new(),
        )
    }

    fn initializeGlobal(id: GlobalId): Bool {
        self.initialized_globals.insert(id.0)
    }

    fn getGlobalValue(id: GlobalId): Option[Inst] {
        self.global_values.get(id.0)
    }

    fn setGlobalValue(id: GlobalId, value: Inst) {
        self.global_values.insert(id.0, value);
    }

    fn loadClassField(field: Field, value: Inst) {
        self.class_values.insert(field, value);
    }

    fn kill() {
        self.global_values.clear();
        self.class_values.clear();
    }

    fn clone(): LoadData {
        LoadData(
            initialized_globals = self.initialized_globals.clone(),
            global_values = self.global_values.clone(),
            class_values = self.class_values.clone(),
        )
    }
}
