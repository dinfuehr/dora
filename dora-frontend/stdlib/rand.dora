const RANDOM_MULTIPLIER: Int64 = 25214903917i64;
const RANDOM_INCREMENT: Int64 = 11i64;
const RANDOM_MASK: Int64 = 0xFF_FF_FF_FF_FF_FFi64;

@pub class Random {
  seed: Int64
}

impl Random {
  @pub @static fn new(seed: Int64): Random {
    Random((seed ^ RANDOM_MULTIPLIER) & RANDOM_MASK)
  }

  @pub fn nextInt32WithBound(bound: Int32): Int32 {
    assert(bound > 0i32);
    let bound_minus_1 = bound - 1i32;

    if (bound & bound_minus_1) == 0i32 {
      let num = self.nextInt31().toInt64();
      return ((bound.toInt64().wrappingMul(num)) >>> 31i32).toInt32();
    }

    let mut modulo = 0i32;

    while true {
      let num = self.nextInt31();
      modulo = num % bound;

      if num - modulo + bound_minus_1 >= 0i32 {
        break;
      }
    }

    return modulo;
  }

  @pub fn nextInt32(): Int32 {
    self.seed = self.seed.wrappingMul(RANDOM_MULTIPLIER).wrappingAdd(RANDOM_INCREMENT) & RANDOM_MASK;
    return (self.seed >>> 16i32).toInt32();
  }

  @pub fn nextInt31(): Int32 {
    return self.nextInt32() & 0x7F_FF_FF_FFi32;
  }

  @pub fn nextInt64(): Int64 {
    let w1 = self.nextInt32();
    let w2 = self.nextInt32();

    return (w1.toInt64() << 32i32) | w2.toInt64();
  }
}
