use std::fatalError;

@pub @internal class String

impl String {
  @pub fn equals(rhs: String): Bool {
    let mut i = 0i64;

    if self.size() != rhs.size() {
        return false;
    }

    let len = self.size();

    while i < len {
        if self.getByte(i) != rhs.getByte(i) {
            return false;
        }

        i = i + 1i64;
    }

    return true;
  }

  @pub fn toString(): String { self }

  @pub @internal fn compareTo(rhs: String): Int32;

  @pub @internal fn size(): Int64;

  @internal fn toInt32Success(): Bool;
  @internal fn toInt64Success(): Bool;

  @internal fn toInt32OrZero(): Int32;
  @internal fn toInt64OrZero(): Int64;

  @internal fn toFloat32Success(): Bool;
  @internal fn toFloat64Success(): Bool;

  @internal fn toFloat32OrZero(): Float32;
  @internal fn toFloat64OrZero(): Float64;

  @pub fn toInt32(): Option[Int32] {
    if self.toInt32Success() {
      Option[Int32]::Some(self.toInt32OrZero())
    } else {
      Option[Int32]::None
    }
  }

  @pub fn toInt64(): Option[Int64] {
    if self.toInt64Success() {
      Option[Int64]::Some(self.toInt64OrZero())
    } else {
      Option[Int64]::None
    }
  }

  @pub fn toFloat32(): Option[Float32] {
    if self.toFloat32Success() {
      Option[Float32]::Some(self.toFloat32OrZero())
    } else {
      Option[Float32]::None
    }
  }

  @pub fn toFloat64(): Option[Float64] {
    if self.toFloat64Success() {
      Option[Float64]::Some(self.toFloat64OrZero())
    } else {
      Option[Float64]::None
    }
  }

  @pub @internal fn plus(rhs: String): String;

  @pub @internal fn getByte(idx: Int64): UInt8;

  @pub @internal fn clone(): String;

  @pub fn isEmpty(): Bool {
    self.size() == 0i64
  }

  @pub fn contains(val: String): Bool {
    self.indexOfFirst(val).isSome()
  }

  @pub fn indexOfFirst(val: String): Option[Int64] {
    let m = val.size();
    if m == 0i64 {
      return Some(0i64);
    }

    let n = self.size();
    if m > n {
      return None;
    }

    let mut j = 0i64;
    let mut k = 0i64;
    let mut ell = 0i64;

    if val.getByte(0i64) == val.getByte(1i64) {
       k = 2i64;
       ell = 1i64;
    } else {
       k = 1i64;
       ell = 2i64;
    }

    j = 0i64;
    while j <= n - m {
      if val.getByte(1i64) != self.getByte(j + 1i64) {
        j = j + k;
      } else {
        if String::compare(val, 2i64, self, j + 2i64, m - 2i64) && val.getByte(0i64) == self.getByte(j) {
          return Option[Int64]::Some(j);
        }
        j = j + ell;
      }
    }
    return Option[Int64]::None;
  }

  @static fn compare(a: String, aPos: Int64, b: String, bPos: Int64, len: Int64): Bool {
    let mut i = 0i64;

    while i < len {
      if a.getByte(aPos+i) != b.getByte(bPos+i) {
        return false;
      }
      i = i + 1i64;
    }

    return true;
  }

  @pub fn startsWith(val: String): Bool {
    let valLen = val.size();
    if valLen > self.size() {
      return false;
    }
    let mut i = 0i64;
    while i < valLen {
      if self.getByte(i) !== val.getByte(i) {
        return false;
      }
      i = i + 1i64;
    }
    return true;
  }

  @pub fn endsWith(val: String): Bool {
    let slfLen = self.size();
    let valLen = val.size();
    if valLen > slfLen {
      return false;
    }
    let mut iSlf = 0i64;
    let mut iVal = slfLen - valLen;
    while iSlf < valLen {
      if self.getByte(iSlf + iVal) !== val.getByte(iSlf) {
        return false;
      }
      iSlf = iSlf + 1i64;
    }
    return true;
  }

  @pub fn codePoints(): CodepointIterator {
    CodepointIterator(self, 0i64)
  }

  @pub @static @internal fn fromBytesPart(val: Array[UInt8], offset: Int64, len: Int64): Option[String];

  @pub @static fn fromBytes(val: Array[UInt8]): Option[String] {
    String::fromBytesPart(val, 0i64, val.size())
  }

  @pub @static @internal fn fromStringPart(val: String, offset: Int64, len: Int64): Option[String];

  @pub fn asBytes(): Array[UInt8] {
    let data = Array[UInt8]::newDefault(self.size());
    let mut idx = 0;

    while idx < self.size() {
      data(idx) = self.getByte(idx);
      idx = idx + 1;
    }

    data
  }

  @pub @static fn binary(data: Int64): String {
    let mut data = data;
    if data == 0i64 { return "0"; }
    let array = Array[UInt8]::zero(64i64);
    let mut at = array.size();
    while data != 0i64 {
      array(at - 1i64) = ('0'.toInt64() + (data & 1i64)).toUInt8();
      data = data.shiftRight(1i32);
      at = at - 1i64;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1i64).getOrPanic();
  }

  @pub @static fn hex(data: Int64): String {
    let mut data = data;
    if data == 0i64 { return "0"; }
    let array = Array[UInt8]::zero(16i64);
    let mut at = array.size();
    while data != 0i64 {
      let digit = (data & 0xFi64).toInt32();

      if digit < 10i32 {
        array(at - 1i64) = ('0'.toInt32() + digit).toUInt8();
      } else {
        array(at - 1i64) = ('A'.toInt32() + digit - 10i32).toUInt8();
      }

      data = data.shiftRight(4i32);
      at = at - 1i64;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1i64).getOrPanic();
  }
}

@pub trait Stringable {
  fn toString(): String;
}

impl Stringable for Bool {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for UInt8 {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for Int32 {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for Int64 {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for Float32 {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for Float64 {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for String {
  fn toString(): String {
    self.toString()
  }
}

impl Stringable for Char {
  fn toString(): String {
    self.toString()
  }
}

@pub class StringBuffer {
  buf: Array[UInt8],
  len: Int64,
}

impl StringBuffer {
  @pub @static fn new(): StringBuffer {
    StringBuffer(Array[UInt8]::new(), 0)
  }

  @pub fn size(): Int64 {
    return self.len;
  }

  @pub fn capacity(): Int64 {
    return self.buf.size();
  }

  // reserve `elements` bytes
  // (capacity - length >= elements)
  @pub fn reserve(elements: Int64) {
    if self.capacity() - self.size() >= elements {
      return;
    }

    let newcap = self.newCapacity(elements);
    let newbuf = Array[UInt8]::zero(newcap);
    let mut i = 0i64;

    while i < self.buf.size() {
      newbuf.set(i, self.buf.get(i));
      i = i + 1i64;
    }

    self.buf = newbuf;
  }

  @pub fn newCapacity(reserve: Int64): Int64 {
    let mut len = self.len;

    if len == 0i64 {
      len = 4i64;
    }

    let c1 = (len + reserve + 7i64) & !7i64;
    let c2 = len * 2i64;

    if c1 > c2 {
      c1
    } else if c2 - c1 > 32i64 {
      c1
    } else {
      c2
    }
  }

  @pub fn appendChar(ch: Char): StringBuffer {
    let chLen = ch.lenUtf8();
    self.reserve(chLen.toInt64());
    ch.encodeUtf8(self.buf, self.len);
    self.len = self.len + chLen.toInt64();
    self
  }

  @pub fn append(value: String): StringBuffer {
    self.reserve(value.size());
    let mut i = 0i64;

    while i < value.size() {
      self.buf.set(self.len + i, value.getByte(i));
      i = i + 1i64;
    }

    self.len = self.len + value.size();
    self
  }

  @pub fn appendNewline(): StringBuffer {
    self.appendChar('\n')
  }

  @pub fn toString(): String {
    String::fromBytesPart(self.buf, 0i64, self.size()).getOrPanic()
  }

  @pub @static fn empty(): StringBuffer {
    StringBuffer::new()
  }
}

@pub class CodepointIterator(value: String, start: Int64)

impl CodepointIterator {
  @pub @static fn new(value: String): CodepointIterator {
    CodepointIterator(value, 0)
  }

  @pub fn next(): Option[Char] {
    if self.start < self.value.size() {
      Some[Char](self.readChar())
    } else {
      None[Char]
    }
  }

  fn readChar(): Char {
    let mut ch = self.value.getByte(self.start);

    if ch <= 0x7Fu8 {
      self.start = self.start + 1i64;
      return ch.toInt32().toCharUnchecked();
    }

    if ch <= 0xBFu8 {
      fatalError("unexpected continuation byte");
    }

    if ch <= 0xDFu8 {
      let cp = (ch.toInt32() & 0x1Fi32) << 6i32 | (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32);
      self.start = self.start + 2i64;
      return cp.toCharUnchecked();
    }

    if ch <= 0xEFu8 {
      let cp = (ch.toInt32() & 0xFi32) << 12i32 |
            (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32) << 6i32 |
            (self.value.getByte(self.start + 2i64).toInt32() & 0x3Fi32);
      self.start = self.start + 3i64;
      return cp.toCharUnchecked();
    }

    if ch <= 0xF7u8 {
      let cp = (ch.toInt32() & 0x03i32) << 18i32 |
            (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32) << 12i32 |
            (self.value.getByte(self.start + 2i64).toInt32() & 0x3Fi32) << 6i32 |
            (self.value.getByte(self.start + 3i64).toInt32() & 0x3Fi32);
      self.start = self.start + 4i64;
      return cp.toCharUnchecked();
    }

    fatalError("invalid utf8: " + ch.toInt32().toString());
    unreachable[Char]()
  }

  @pub fn peek(): Char {
    let mut ch = self.value.getByte(self.start);

    if ch <= 0x7Fu8 {
      return ch.toInt32().toCharUnchecked();
    }

    if ch <= 0xBFu8 {
      fatalError("unexpected continuation byte");
    }

    if ch <= 0xDFu8 {
      let cp = (ch.toInt32() & 0x1Fi32) << 6i32 | (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32);
      return cp.toCharUnchecked();
    }

    if ch <= 0xEFu8 {
      let cp = (ch.toInt32() & 0xFi32) << 12i32 |
            (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32) << 6i32 |
            (self.value.getByte(self.start + 2i64).toInt32() & 0x3Fi32);
      return cp.toCharUnchecked();
    }

    if ch <= 0xF7u8 {
      let cp = (ch.toInt32() & 0x03i32) << 18i32 |
            (self.value.getByte(self.start + 1i64).toInt32() & 0x3Fi32) << 12i32 |
            (self.value.getByte(self.start + 2i64).toInt32() & 0x3Fi32) << 6i32 |
            (self.value.getByte(self.start + 3i64).toInt32() & 0x3Fi32);
      return cp.toCharUnchecked();
    }

    fatalError("invalid utf8: " + ch.toInt32().toString());
    return '\0';
  }

  @pub fn size(): Int64 {
    let mut i = 0;

    while self.next().isSome() {
      i = i + 1;
    }

    return i;
  }

  @pub fn toString(): String {
    String::fromStringPart(self.value, self.start, self.value.size() - self.start).getOrPanic()
  }
}
