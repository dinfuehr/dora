@pub class Thread {
    native_ptr: Int64,
    id: Int64,
}

impl Thread {
    @pub fn id(): Int64 {
        self.id
    }

    @pub @static @internal fn current(): Thread;

    @pub @internal fn join();
}

@internal @pub fn spawn(action: (): ()): Thread;

@pub class AtomicInt32(value: Int32)

impl AtomicInt32 {
    @pub @static fn new(value: Int32): AtomicInt32 {
        AtomicInt32(value)
    }

    @pub @internal fn get(): Int32;
    @pub @internal fn set(value: Int32);
    @pub @internal fn exchange(value: Int32): Int32;
    @pub @internal fn compareExchange(expected: Int32, value: Int32): Int32;
    @pub @internal fn fetchAdd(value: Int32): Int32;
}

@pub class AtomicInt64(value: Int64)

impl AtomicInt64 {
    @pub @static fn new(value: Int64): AtomicInt64 {
        AtomicInt64(value)
    }

    @pub @internal fn get(): Int64;
    @pub @internal fn set(value: Int64);
    @pub @internal fn exchange(value: Int64): Int64;
    @pub @internal fn compareExchange(expected: Int64, value: Int64): Int64;
    @pub @internal fn fetchAdd(value: Int64): Int64;
}

const UNLOCKED: Int32 = 0i32;
const LOCKED: Int32 = 1i32;
const LOCKED_CONTENDED: Int32 = 2i32;

@pub class Mutex {
    data: AtomicInt32,
    owner_thread_id: Int64,
}

impl Mutex {
    @pub @static fn new(): Mutex {
        Mutex(AtomicInt32::new(UNLOCKED), 0)
    }

    @pub fn lock[T](fct: (): T): T {
        self.lockOp();
        let result = fct();
        self.unlockOp();
        result
    }

    fn lockOp() {
        let previous = self.data.compareExchange(UNLOCKED, LOCKED);

        if previous != UNLOCKED {
            assert(previous == LOCKED || previous == LOCKED_CONTENDED);
            self.lockSlow();
        }

        assert(self.owner_thread_id == 0);
        self.owner_thread_id = Thread::current().id();
    }

    fn lockSlow() {
        let mut locked = false;

        while !locked {
            if self.transitionToLockedContended() {
                self.wait(LOCKED_CONTENDED);
            }

            // Queue might still be non-empty, so transition to LOCKED_CONTENDED
            // instead of LOCKED.
            let previous = self.data.compareExchange(UNLOCKED, LOCKED_CONTENDED);
            locked = previous == UNLOCKED;
        }
    }

    fn transitionToLockedContended(): Bool {
        self.data.compareExchange(LOCKED, LOCKED_CONTENDED) != UNLOCKED
    }

    fn unlockOp() {
        assert(self.owner_thread_id == Thread::current().id());
        self.owner_thread_id = 0;

        let previous = self.data.exchange(UNLOCKED);

        if previous != LOCKED {
            self.unlockSlow(previous);
        }
    }

    fn unlockSlow(previous: Int32) {
        assert(previous == LOCKED_CONTENDED);
        self.notify();
    }

    @internal fn wait(status: Int32);
    @internal fn notify();
}

@pub class Condition {
    waiters: AtomicInt32,
}

impl Condition {
    @pub @static fn new(): Condition {
        Condition(AtomicInt32::new(0i32))
    }

    @pub fn wait(mtx: Mutex) {
        self.enqueue();
        mtx.unlockOp();
        self.block();
        mtx.lockOp();
    }

    @pub fn notifyOne() {
        if self.waiters.get() == 0i32 {
            return;
        }

        self.wakeupOne();
    }

    @pub fn notifyAll() {
        if self.waiters.get() == 0i32 {
            return;
        }

        self.waiters.set(0i32);
        self.wakeupAll();
    }

    @internal fn enqueue();
    @internal fn block();

    @internal fn wakeupOne();
    @internal fn wakeupAll();
}
