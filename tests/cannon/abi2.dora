fun main() {
    assert(abi_1(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 1I);
    assert(abi_2(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 2I);
    assert(abi_3(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 3I);
    assert(abi_4(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 4I);
    assert(abi_5(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 5I);
    assert(abi_6(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 6I);
    assert(abi_7(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 7I);
    assert(abi_8(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 8I);
    assert(abi_9(1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I) == 9I);
}

fun abi_1(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = x;
fun abi_2(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = y;
fun abi_3(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = z;
fun abi_4(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = a;
fun abi_5(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = b;
fun abi_6(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = c;
fun abi_7(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = i;
fun abi_8(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = j;
fun abi_9(x: Int32, y: Int32, z: Int32, a: Int32, b: Int32, c: Int32, i: Int32, j: Int32, k: Int32): Int32 = k;
