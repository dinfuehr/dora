fun main() {
    assert(abi_1(1, 2, 3, 4, 5, 6, 7, 8, 9) == 1);
    assert(abi_2(1, 2, 3, 4, 5, 6, 7, 8, 9) == 2);
    assert(abi_3(1, 2, 3, 4, 5, 6, 7, 8, 9) == 3);
    assert(abi_4(1, 2, 3, 4, 5, 6, 7, 8, 9) == 4);
    assert(abi_5(1, 2, 3, 4, 5, 6, 7, 8, 9) == 5);
    assert(abi_6(1, 2, 3, 4, 5, 6, 7, 8, 9) == 6);
    assert(abi_7(1, 2, 3, 4, 5, 6, 7, 8, 9) == 7);
    assert(abi_8(1, 2, 3, 4, 5, 6, 7, 8, 9) == 8);
    assert(abi_9(1, 2, 3, 4, 5, 6, 7, 8, 9) == 9);
}

@cannon fun abi_1(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return x;
}

@cannon fun abi_2(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return y;
}

@cannon fun abi_3(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return z;
}

@cannon fun abi_4(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return a;
}

@cannon fun abi_5(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return b;
}

@cannon fun abi_6(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return c;
}

@cannon fun abi_7(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return i;
}

@cannon fun abi_8(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return j;
}

@cannon fun abi_9(x: Int, y: Int, z: Int, a: Int, b: Int, c: Int, i: Int, j: Int, k: Int) -> Int {
    return k;
}