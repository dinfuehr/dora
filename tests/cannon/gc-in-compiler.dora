//= vm-args "--gc=copy --gc-stress-in-lazy-compile"

class Foo {
    x: Int64,
    y: Int64,
}

struct MyPair {
    x: Int64,
    y: Int64,
}

fn main() {
    let foo = Foo(3, 107);
    assert(test1(foo) == 110);
    assert(test2(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, foo) == 110);
    assert(test3(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, Some[Foo](foo)) == 110);

    let pair = test4(foo);
    assert(pair.x + pair.y == 110);

    let mut escaped = 1;
    let lambda = |increment: Int64| { escaped = escaped + increment; };
    lambda(10);
    assert(escaped == 11);
    lambda(2);
    assert(escaped == 13);
}

fn test1(f: Foo): Int64 {
    f.x + f.y
}

fn test2(arg1: Int64, arg2: Int64, arg3: Int64, arg4: Int64, arg5: Int64, arg6: Int64, arg7: Int64, arg8: Int64, arg9: Int64, arg10: Int64, f: Foo): Int64 {
    assert(arg1 == 1);
    assert(arg2 == 2);
    assert(arg3 == 3);
    assert(arg4 == 4);
    assert(arg5 == 5);
    assert(arg6 == 6);
    assert(arg7 == 7);
    assert(arg8 == 8);
    assert(arg9 == 9);
    assert(arg10 == 10);

    f.x + f.y
}

fn test3(arg1: Int64, arg2: Int64, arg3: Int64, arg4: Int64, arg5: Int64, arg6: Int64, arg7: Int64, arg8: Int64, arg9: Int64, arg10: Int64, f: Option[Foo]): Int64 {
    assert(arg1 == 1);
    assert(arg2 == 2);
    assert(arg3 == 3);
    assert(arg4 == 4);
    assert(arg5 == 5);
    assert(arg6 == 6);
    assert(arg7 == 7);
    assert(arg8 == 8);
    assert(arg9 == 9);
    assert(arg10 == 10);

    let f = f.getOrPanic();
    f.x + f.y
}

fn test4(f: Foo): MyPair {
    MyPair(f.x, f.y)
}
