fun main() {
    assert(loadBool(FooBool(true)) == true);
    assert(loadByte(FooByte(1Y)) == 1Y);
    assert(loadChar(FooChar('1')) == '1');
    assert(loadInt32(FooInt32(23)) == 23);
    assert(loadInt64(FooInt64(1L)) == 1L);
    assert(loadFloat32(FooFloat32(1F)) == 1F);
    assert(loadFloat64(FooFloat64(1D)) == 1D);
    assert(loadString(FooString("1")) == "1");

    let ptr = FooInt32(1);
    let fooPtr = FooPtr(ptr);
    assert(loadPtr(fooPtr) === ptr);
    assert(loadPtr(fooPtr).y == 1);
}

@cannon fun loadBool(x: FooBool) -> Bool {
    return x.y;
}
@cannon fun loadByte(x: FooByte) -> UInt8 {
    return x.y;
}
@cannon fun loadChar(x: FooChar) -> Char {
    return x.y;
}
@cannon fun loadInt32(x: FooInt32) -> Int32 {
    return x.y;
}
@cannon fun loadInt64(x: FooInt64) -> Int64 {
    return x.y;
}
@cannon fun loadFloat32(x: FooFloat32) -> Float32 {
    return x.y;
}
@cannon fun loadFloat64(x: FooFloat64) -> Float64 {
    return x.y;
}
@cannon fun loadString(x: FooString) -> String {
    return x.y;
}
@cannon fun loadPtr(x: FooPtr) -> FooInt32 {
    return x.y;
}

class FooBool(let y: Bool)
class FooByte(let y: UInt8)
class FooChar(let y: Char)
class FooInt32(let y: Int32)
class FooInt64(let y: Int64)
class FooFloat32(let y: Float32)
class FooFloat64(let y: Float64)
class FooString(let y: String)
class FooPtr(let y: FooInt32)