fun main() {
    let x = 0;
    assert(loadBool(FooBool(true)) == true);
    assert(loadByte(FooByte(1Y)) == 1Y);
    assert(loadChar(FooChar('1')) == '1');
    assert(loadInt(FooInt(23)) == 23);
    assert(loadLong(FooLong(1L)) == 1L);
    assert(loadFloat(FooFloat(1F)) == 1F);
    assert(loadDouble(FooDouble(1D)) == 1D);
    assert(loadString(FooString("1")) == "1");

    let ptr = FooInt(1);
    let fooPtr = FooPtr(ptr);
    assert(loadPtr(fooPtr) === ptr);
    assert(loadPtr(fooPtr).y == 1);
}

@cannon fun loadBool(x: FooBool) -> Bool {
    return x.y;
}
@cannon fun loadByte(x: FooByte) -> Byte {
    return x.y;
}
@cannon fun loadChar(x: FooChar) -> Char {
    return x.y;
}
@cannon fun loadInt(x: FooInt) -> Int {
    return x.y;
}
@cannon fun loadLong(x: FooLong) -> Long {
    return x.y;
}
@cannon fun loadFloat(x: FooFloat) -> Float {
    return x.y;
}
@cannon fun loadDouble(x: FooDouble) -> Double {
    return x.y;
}
@cannon fun loadString(x: FooString) -> String {
    return x.y;
}
@cannon fun loadPtr(x: FooPtr) -> FooInt {
    return x.y;
}

class FooBool(let y: Bool)
class FooByte(let y: Byte)
class FooChar(let y: Char)
class FooInt(let y: Int)
class FooLong(let y: Long)
class FooFloat(let y: Float)
class FooDouble(let y: Double)
class FooString(let y: String)
class FooPtr(let y: FooInt)