fn main() {
    assert(loadBool(FooBool(true)) == true);
    assert(loadByte(FooByte(1u8)) == 1u8);
    assert(loadChar(FooChar('1')) == '1');
    assert(loadInt32(FooInt32(23i32)) == 23i32);
    assert(loadInt64(FooInt64(1i64)) == 1i64);
    assert(loadFloat32(FooFloat32(1f32)) == 1f32);
    assert(loadFloat64(FooFloat64(1f64)) == 1f64);
    assert(loadString(FooString("1")) == "1");

    let ptr = FooInt32(1i32);
    let fooPtr = FooPtr(ptr);
    assert(loadPtr(fooPtr) === ptr);
    assert(loadPtr(fooPtr).y == 1i32);
}

fn loadBool(x: FooBool): Bool { x.y }

fn loadByte(x: FooByte): UInt8 { x.y }

fn loadChar(x: FooChar): Char { x.y }

fn loadInt32(x: FooInt32): Int32 { x.y }

fn loadInt64(x: FooInt64): Int64 { x.y }

fn loadFloat32(x: FooFloat32): Float32 { x.y }

fn loadFloat64(x: FooFloat64): Float64 { x.y }

fn loadString(x: FooString): String { x.y }

fn loadPtr(x: FooPtr): FooInt32 { x.y }

class FooBool { y: Bool }
class FooByte { y: UInt8 }
class FooChar { y: Char }
class FooInt32 { y: Int32 }
class FooInt64 { y: Int64 }
class FooFloat32 { y: Float32 }
class FooFloat64 { y: Float64 }
class FooString { y: String }
class FooPtr { y: FooInt32 }
