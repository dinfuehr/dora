fun main() {
  let foo = Foo();
  assert(foo.foo_bool() == false);
  assert(foo.foo_byte() == 6Y);
  assert(foo.foo_char() == '6');
  assert(foo.foo_int32() == 6);
  assert(foo.foo_int64() == 6L);
  assert(foo.foo_float() == 6F);
  assert(foo.foo_double() == 6D);
  assert(foo.foo_string() == "33");
}

class Foo {
  @cannon fun foo_bool(): Bool {
    return self.bar_bool(true);
  }
  fun bar_bool(a: Bool): Bool {
    assert(a == true);
    return !a;
  }

  @cannon fun foo_byte(): UInt8 {
    return self.bar_byte(3Y);
  }
  fun bar_byte(a: UInt8): UInt8 {
    assert(a == 3Y);
    return (3+a.toInt32()).toUInt8();
  }

  @cannon fun foo_char(): Char {
    return self.bar_char('3');
  }
  fun bar_char(a: Char): Char {
    assert(a == '3');
    return (3+a.toInt32()).toChar().unwrap();
  }

  @cannon fun foo_int32(): Int32 {
    return self.bar_int32(3);
  }
  fun bar_int32(a: Int32): Int32 {
    assert(a == 3);
    return 3+a;
  }

  @cannon fun foo_int64(): Int64 {
    return self.bar_int64(3L);
  }

  fun bar_int64(a: Int64): Int64 {
    assert(a == 3L);
    return 3L+a;
  }

  @cannon fun foo_float(): Float32 {
    return self.bar_float(3F);
  }

  fun bar_float(a: Float32): Float32 {
    assert(a == 3F);
    return 3F+a;
  }

  @cannon fun foo_double(): Float64 {
    return self.bar_double(3D);
  }

  fun bar_double(a: Float64): Float64 {
    assert(a == 3D);
    return 3D+a;
  }

  @cannon fun foo_string(): String {
    return self.bar_string("3");
  }

  fun bar_string(a: String): String {
    assert(a == "3");
    return "3"+a;
  }
}