fun main() {
    let fooBool = FooBool();
    let fooByte = FooByte();
    let fooChar = FooChar();
    let fooInt32 = FooInt32();
    let fooInt64 = FooInt64();
    let fooFloat32 = FooFloat32();
    let fooFloat64 = FooFloat64();
    let fooString = FooString();
    let fooPtr = FooPtr();

    storeBool(fooBool, true);
    storeByte(fooByte, 1Y);
    storeChar(fooChar, '1');
    storeInt32(fooInt32, 23I);
    storeInt64(fooInt64, 1L);
    storeFloat32(fooFloat32, 1F);
    storeFloat64(fooFloat64, 1D);
    storeString(fooString, "1");
    storePtr(fooPtr, fooInt32);

    assert(fooBool.y == true);
    assert(fooByte.y == 1Y);
    assert(fooChar.y == '1');
    assert(fooInt32.y == 23I);
    assert(fooInt64.y == 1L);
    assert(fooFloat32.y == 1F);
    assert(fooFloat64.y == 1D);
    assert(fooString.y == "1");
    assert(fooPtr.y === fooInt32);
    assert(fooPtr.y.y == 23I)
}

fun storeBool(x: FooBool, z: Bool) {
    x.y = z;
}

fun storeByte(x: FooByte, z: UInt8) {
    x.y = z;
}

fun storeChar(x: FooChar, z: Char) {
    x.y = z;
}

fun storeInt32(x: FooInt32, z: Int32) {
    x.y = z;
}

fun storeInt64(x: FooInt64, z: Int64) {
    x.y = z;
}

fun storeFloat32(x: FooFloat32, z: Float32) {
    x.y = z;
}

fun storeFloat64(x: FooFloat64, z: Float64) {
    x.y = z;
}

fun storeString(x: FooString, z: String) {
    x.y = z;
}

fun storePtr(x: FooPtr, z: FooInt32) {
    x.y = z;
}

class FooBool() {
    var y: Bool = false;
}
class FooByte() {
    var y: UInt8 = 0Y;
}
class FooChar() {
    var y: Char = '\0';
}
class FooInt32() {
    var y: Int32 = 0I;
}
class FooInt64() {
    var y: Int64 = 0L;
}
class FooFloat32() {
    var y: Float32 = 0.0F;
}
class FooFloat64() {
    var y: Float64 = 0.0;
}
class FooString() {
    var y: String = "";
}
class FooPtr() {
    var y: FooInt32 = FooInt32();
}
