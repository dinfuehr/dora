fn main() {
    let fooBool = FooBool::new();
    let fooByte = FooByte::new();
    let fooChar = FooChar::new();
    let fooInt32 = FooInt32::new();
    let fooInt64 = FooInt64::new();
    let fooFloat32 = FooFloat32::new();
    let fooFloat64 = FooFloat64::new();
    let fooString = FooString::new();
    let fooPtr = FooPtr::new();

    storeBool(fooBool, true);
    storeByte(fooByte, 1u8);
    storeChar(fooChar, '1');
    storeInt32(fooInt32, 23i32);
    storeInt64(fooInt64, 1i64);
    storeFloat32(fooFloat32, 1f32);
    storeFloat64(fooFloat64, 1f64);
    storeString(fooString, "1");
    storePtr(fooPtr, fooInt32);

    assert(fooBool.y == true);
    assert(fooByte.y == 1u8);
    assert(fooChar.y == '1');
    assert(fooInt32.y == 23i32);
    assert(fooInt64.y == 1i64);
    assert(fooFloat32.y == 1f32);
    assert(fooFloat64.y == 1f64);
    assert(fooString.y == "1");
    assert(fooPtr.y === fooInt32);
    assert(fooPtr.y.y == 23i32)
}

fn storeBool(x: FooBool, z: Bool) {
    x.y = z;
}

fn storeByte(x: FooByte, z: UInt8) {
    x.y = z;
}

fn storeChar(x: FooChar, z: Char) {
    x.y = z;
}

fn storeInt32(x: FooInt32, z: Int32) {
    x.y = z;
}

fn storeInt64(x: FooInt64, z: Int64) {
    x.y = z;
}

fn storeFloat32(x: FooFloat32, z: Float32) {
    x.y = z;
}

fn storeFloat64(x: FooFloat64, z: Float64) {
    x.y = z;
}

fn storeString(x: FooString, z: String) {
    x.y = z;
}

fn storePtr(x: FooPtr, z: FooInt32) {
    x.y = z;
}

class FooBool { y: Bool }
impl FooBool {
    static fn new(): FooBool {
        FooBool(false)
    }
}
class FooByte { y: UInt8 }
impl FooByte {
    static fn new(): FooByte {
        FooByte(0u8)
    }
}

class FooChar { y: Char }
impl FooChar {
    static fn new(): FooChar {
        FooChar('\0')
    }
}
class FooInt32 { y: Int32 }
impl FooInt32 {
    static fn new(): FooInt32 {
        FooInt32(0i32)
    }
}
class FooInt64 { y: Int64 }
impl FooInt64 {
    static fn new(): FooInt64 {
        FooInt64(0)
    }
}
class FooFloat32 { y: Float32 }
impl FooFloat32 {
    static fn new(): FooFloat32 {
        FooFloat32(0.0f32)
    }
}
class FooFloat64 { y: Float64 }
impl FooFloat64 {
    static fn new(): FooFloat64 {
        FooFloat64(0.0)
    }
}
class FooString { y: String }
impl FooString {
    static fn new(): FooString {
        FooString("")
    }
}
class FooPtr { y: FooInt32 } 
impl FooPtr {
    static fn new(): FooPtr {
        FooPtr(FooInt32(0i32))
    }
}
