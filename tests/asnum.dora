fun main() {
    let testBuggy = true;

    assert(0.0F.asInt() == 0);
    assert(1.4E-45F.asInt() == 1);
    assert(4.2E-45F.asInt() == 3);
    assert((-1F).asInt() == (-1082130432));
    assert((-0F).asInt() == (-2147483648));
    assert((0.0F/0.0F).asInt() == (-4194304));

    assert(0.0.asLong() == 0L);
    assert(1.4E-45.asLong() == 3936137728114922858L);
    assert(4.2E-45.asLong() == 3942895214107701263L);
    assert((-1.0).asLong() == (-4616189618054758400L));
    assert((-0.0).asLong() == (-9223372036854775808L));
    assert((0.0/0.0).asLong() == (-2251799813685248L));

    assert(0.0F == 0.asFloat());
    assert(1.4E-45F == 1.asFloat());
    assert(4.2E-45F == 3.asFloat());
    assert((-1).asFloat().isNan());
    assert((-0.0F) == int::min_value().asFloat());
    assert(int::max_value().asFloat().isNan());

    assert(0.0 == 0L.asDouble());
    assert(4.9E-324 == 1L.asDouble());
    assert(1.5E-323 == 3L.asDouble());
    assert((-1L).asDouble().isNan());
    assert(int::min_value().toLong().asDouble().isNan());
    assert(int::max_value().toLong().asDouble() == 1.060997895E-314);
    assert((-0.0) == long::min_value().asDouble());
    assert(long::max_value().asDouble().isNan());

    let x = 123456789;
    assert(x == x.asFloat().asInt());
    assert(x.toLong() == x.toLong().asDouble().asLong());
    assert(x.toFloat() == x.toFloat().asInt().asFloat());
    assert(x.toDouble() == x.toDouble().asLong().asDouble());
}