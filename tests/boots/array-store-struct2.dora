//= boots

fn main() {
    let arr = Array[Foo]::fill(100, Foo(0, Bar::A));
    std::forceCollect();

    f(arr, 47, Foo(3, Bar::C(10)));
    assert(arr(46).a == 0);
    match arr(46).b {
        Bar::A => {}
        _ => unreachable[()](),
    }

    assert(arr(47).a == 3);
    match arr(47).b {
        Bar::C(x) => assert(x == 10),
        _ => unreachable[()](),
    }

    assert(arr(48).a == 0);
    match arr(48).b {
        Bar::A => {}
        _ => unreachable[()](),
    }

    std::forceCollect();
}

struct Foo(a: Int64, b: Bar)
enum Bar { A, B, C(Int64) }

@Optimize fn f(x: Array[Foo], idx: Int64, foo: Foo) { x(idx) = foo; }
