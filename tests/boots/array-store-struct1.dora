//= boots

fn main() {
    let arr = Array[Foo]::fill(100, Foo(a = 0, b = Bar(1)));
    std::forceCollect();

    f(arr, 47, Foo(a = 3, b = Bar(4)));
    assert(arr(46).a == 0);
    assert(arr(46).b.value == 1);

    assert(arr(47).a == 3);
    assert(arr(47).b.value == 4);

    assert(arr(48).a == 0);
    assert(arr(48).b.value == 1);

    std::forceCollect();
}

struct Foo { a: Int64, b: Bar }
class Bar(value: Int64)

@Optimize fn f(x: Array[Foo], idx: Int64, foo: Foo) { x(idx) = foo; }
