fun main() {
  let x = Option::none[Int32]();
  assert(x.isNone());
  assert(!x.isSome());
  assert(!x.has(0));
  assert(!optionContains[Int32](x, 0));
  assert(optionEquals[Int32](x, Option::none[Int32]()));
  assert(!optionEquals[Int32](x, Option::some[Int32](0)));
  assert(optionToString[Int32](x) == "None");

  let x = Option::some[Int32](1);
  assert(x.isSome());
  assert(!x.isNone());
  assert(x.unwrap() == 1);
  assert(x.has(1));
  assert(optionContains[Int32](x, 1));
  assert(optionEquals[Int32](x, Option::some[Int32](1)));
  assert(!optionEquals[Int32](x, Option::some[Int32](2)));
  assert(!optionEquals[Int32](x, Option::none[Int32]()));
  assert(optionToString[Int32](x) == "Some(1)");
}
