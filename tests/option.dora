fun main() {
  let x = none[Int]();
  assert(x.isEmpty());
  assert(!x.has(0));
  assert(!x.contains(0));
  assert(x.equals(Option[Int](0, false)));
  assert(!x.equals(some[Int](0)));
  assert(x.toString() == "None");

  let x = some[Int](1);
  assert(x.value == 1);
  assert(x.isPresent);
  assert(!x.isEmpty());
  assert(x.has(1));
  assert(x.contains(1));
  assert(x.equals(some[Int](1)));
  assert(!x.equals(some[Int](2)));
  assert(x.toString() == "Some(1)");

  // this constructor should be private
  let x = Option[Int](1, true);
  assert(x.value == 1);
  assert(x.isPresent);
  assert(!x.isEmpty());
  assert(x.has(1));
  assert(x.contains(1));
  assert(x.equals(some[Int](1)));
  assert(!x.equals(some[Int](2)));
  assert(x.toString() == "Some(1)");

  // this constructor should be private
  let x = Option[Int](-1, false);
  assert(x.isEmpty());
  assert(!x.has(-1));
  assert(!x.contains(-1));
  assert(x.equals(Option[Int](-1, false)));
  assert(!x.equals(some[Int](2)));
  assert(x.toString() == "None");
}
