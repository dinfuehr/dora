trait Foo[T] {
    fn getter(): T;
}

impl[T] Foo[T] for T {
    fn getter(): T { self }
}

fn f(x: Int64): Foo[Int64] {
    x as Foo[Int64]
}

fn g(x: String): Foo[String] {
    x as Foo[String]
}

fn h(x: Bar): Foo[Bar] {
    x as Foo[Bar]
}

struct Bar { x: Int64, y: Int64 }

fn main() {
    let foo = f(10);
    assert(foo.getter() == 10);

    let foo = f(64);
    assert(foo.getter() == 64);

    let msg = "test";
    let foo = g(msg);
    assert(foo.getter() === msg);

    let foo = h(Bar(x = 17, y = 42));
    let result = foo.getter();
    assert(result.x == 17);
    assert(result.y == 42);
}
