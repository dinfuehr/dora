fn main() {
    assert("x${f[Bar]()}y${f[Baz]()}z" == "xBAR1yBAZ2z");
}

trait X {
    static fn foo(): Self;
}

fn f[T: X + std::Stringable](): String {
    T::foo().toString()
}

class Bar(x: Int32)

impl std::Stringable for Bar {
    fn toString(): String { "BAR${self.x}" }
}

impl X for Bar {
    static fn foo(): Bar { Bar(1i32) }
}

class Baz(x: Int32)

impl std::Stringable for Baz {
    fn toString(): String { "BAZ${self.x}" }
}

impl X for Baz {
    static fn foo(): Baz { Baz(2i32) }
}
