//= ignore

trait MyIterator {
    type Item;
    fn next(): Option[Self::Item];

    fn count(): Int64 {
        let mut result = 0;

        while self.next() is Some(_) {
            result += 1;
        }

        result
    }
}

class Range {
    value: Int
}

impl MyIterator for Range {
    fn next(): Option[Int] {
        if self.value <= 0 {
            None[Int]
        } else {
            let result = self.value;
            self.value -= 1;
            Some[Int](result)
        }
    }
}

fn main() {
    let r = Range(2);
    assert(r.next() is Some(x) && x == 2);
    assert(r.next() is Some(x) && x == 1);
    assert(r.next() is None);
}
