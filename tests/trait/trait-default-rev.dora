//= ignore

trait MyIterator {
    type Item;
    fn next(): Option[Self::Item];
}

trait MyDoubleEndedIterator: MyIterator {
    fn nextBack(): Option[Self::Item];
    fn rev(): Rev[Self];
}

class Range {
    value: Int,
    end: Int,
}

impl MyIterator for Range {
    type Item = Int;

    fn next(): Option[Int] {
        if self.value <= self.end {
            None[Int]
        } else {
            let result = self.value;
            self.value -= 1;
            Some[Int](result)
        }
    }
}

impl MyDoubleEndedIterator for Range {
    fn nextBack(): Option[Int] {
        if self.end < self.value {
            self.end += 1;
            Some[Int](self.end)
        } else {
            None[Int]
        }
    }
}

class Rev[T] {
    iter: T,
}

impl[T: MyDoubleEndedIterator] MyIterator for Rev[T] {
    type Item = [T as MyIterator]::Item;

    fn next(): Option[Self::Item] {
        self.iter().nextBack()
    }
}

fn main() {
    let r = Range(value = 4, end = 0);
    assert(r.nextBack() == Some[Int](1));
    assert(r.nextBack() == Some[Int](2));
    assert(r.next() == Some[Int](4));
    assert(r.nextBack() == Some[Int](3));
    assert(r.nextBack() == None[Int]);
    assert(r.next() == None[Int]);

}
