fn main() {
    assert("x${f[Bar]()}y${f[Baz]()}z" == "xBAR1yBAZ2z");
    assert("x${g[Bar]()}y${g[Baz]()}z" == "xBAR1yBAZ2z");
}

trait X {
    static fn foo(): Self;
    static fn makeString(x: Self): String;
}

fn f[T: X](): String {
    return T::makeString(T::foo());
}

fn g[T: X](): String {
    let value: T = T::foo();
    return T::makeString(value);
}

class Bar { x: Int32 }

impl X for Bar {
    static fn foo(): Bar { Bar(1i32) }
    static fn makeString(value: Bar): String { "BAR${value.x}" }
}

class Baz { x: Int32 }

impl X for Baz {
    static fn foo(): Baz { Baz(2i32) }
    static fn makeString(value: Baz): String { "BAZ${value.x}" }
}
