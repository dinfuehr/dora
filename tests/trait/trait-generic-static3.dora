fun main() {
    assert("x${f[Bar]()}y${f[Baz]()}z" == "xBAR1yBAZ2z");
    assert("x${g[Bar]()}y${g[Baz]()}z" == "xBAR1yBAZ2z");
}

trait X {
    @static fun foo(): Self;
    @static fun makeString(x: Self): String;
}

fun f[T: X](): String {
    return T::makeString(T::foo());
}

fun g[T: X](): String {
    let value: T = T::foo();
    return T::makeString(value);
}

class Bar(let x: Int32)

impl X for Bar {
    @static fun foo(): Bar {
        return Bar(1);
    }

    @static fun makeString(value: Bar): String {
        return "BAR${value.x}";
    }
}

class Baz(let x: Int32)

impl X for Baz {
    @static fun foo(): Baz {
        return Baz(2);
    }

    @static fun makeString(value: Baz): String {
        return "BAZ${value.x}";        
    }
}