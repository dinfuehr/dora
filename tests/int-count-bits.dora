fun main() {
  let x = 0.countZeroBits();
  assert(x == 32);
  let x = 1.countZeroBits();
  assert(x == 31);
  let x = 2.countZeroBits();
  assert(x == 31);
  let x = 35.countZeroBits();
  assert(x == 29);
  let x = 39.countZeroBits();
  assert(x == 28);
  let x = 1024.countZeroBits();
  assert(x == 31);
  let x = Int::maxValue().countZeroBits();
  assert(x == 1);
  let x = (-1).countZeroBits();
  assert(x == 0);
  let x = Int::minValue().countZeroBits();
  assert(x == 31);

  let x = 0.countOneBits();
  assert(x == 0);
  let x = 1.countOneBits();
  assert(x == 1);
  let x = 2.countOneBits();
  assert(x == 1);
  let x = 35.countOneBits();
  assert(x == 3);
  let x = 39.countOneBits();
  assert(x == 4);
  let x = 1024.countOneBits();
  assert(x == 1);
  let x = Int::maxValue().countOneBits();
  assert(x == 31);
  let x = (-1).countOneBits();
  assert(x == 32);
  let x = Int::minValue().countOneBits();
  assert(x == 1);


  let x = 0.countZeroBitsLeading();
  assert(x == 32);
  let x = 1.countZeroBitsLeading();
  assert(x == 31);
  let x = 2.countZeroBitsLeading();
  assert(x == 30);
  let x = 35.countZeroBitsLeading();
  assert(x == 26);
  let x = 39.countZeroBitsLeading();
  assert(x == 26);
  let x = 1024.countZeroBitsLeading();
  assert(x == 21);
  let x = Int::maxValue().countZeroBitsLeading();
  assert(x == 1);
  let x = (-1).countZeroBitsLeading();
  assert(x == 0);
  let x = Int::minValue().countZeroBitsLeading();
  assert(x == 0);

  let x = 0.countOneBitsLeading();
  assert(x == 0);
  let x = 1.countOneBitsLeading();
  assert(x == 0);
  let x = 2.countOneBitsLeading();
  assert(x == 0);
  let x = 35.countOneBitsLeading();
  assert(x == 0);
  let x = 39.countOneBitsLeading();
  assert(x == 0);
  let x = 1024.countOneBitsLeading();
  assert(x == 0);
  let x = Int::maxValue().countOneBitsLeading();
  assert(x == 0);
  let x = (-1).countOneBitsLeading();
  assert(x == 32);
  let x = Int::minValue().countOneBitsLeading();
  assert(x == 1);


  let x = 0.countZeroBitsTrailing();
  assert(x == 32);
  let x = 1.countZeroBitsTrailing();
  assert(x == 0);
  let x = 2.countZeroBitsTrailing();
  assert(x == 1);
  let x = 35.countZeroBitsTrailing();
  assert(x == 0);
  let x = 39.countZeroBitsTrailing();
  assert(x == 0);
  let x = 1024.countZeroBitsTrailing();
  assert(x == 10);
  let x = Int::maxValue().countZeroBitsTrailing();
  assert(x == 0);
  let x = (-1).countZeroBitsTrailing();
  assert(x == 0);
  let x = Int::minValue().countZeroBitsTrailing();
  assert(x == 31);

  let x = 0.countOneBitsTrailing();
  assert(x == 0);
  let x = 1.countOneBitsTrailing();
  assert(x == 1);
  let x = 2.countOneBitsTrailing();
  assert(x == 0);
  let x = 35.countOneBitsTrailing();
  assert(x == 2);
  let x = 39.countOneBitsTrailing();
  assert(x == 3);
  let x = 1024.countOneBitsTrailing();
  assert(x == 0);
  let x = Int::maxValue().countOneBitsTrailing();
  assert(x == 31);
  let x = (-1).countOneBitsTrailing();
  assert(x == 32);
  let x = Int::minValue().countOneBitsTrailing();
  assert(x == 0);
}
