fun main() {
  let x = 0I.countZeroBits();
  assert(x == 32I);
  let x = 1I.countZeroBits();
  assert(x == 31I);
  let x = 2I.countZeroBits();
  assert(x == 31I);
  let x = 35I.countZeroBits();
  assert(x == 29I);
  let x = 39I.countZeroBits();
  assert(x == 28I);
  let x = 1024I.countZeroBits();
  assert(x == 31I);
  let x = Int32::maxValue().countZeroBits();
  assert(x == 1I);
  let x = (-1).countZeroBits();
  assert(x == 0I);
  let x = Int32::minValue().countZeroBits();
  assert(x == 31I);

  let x = 0I.countOneBits();
  assert(x == 0I);
  let x = 1I.countOneBits();
  assert(x == 1I);
  let x = 2I.countOneBits();
  assert(x == 1I);
  let x = 35I.countOneBits();
  assert(x == 3I);
  let x = 39I.countOneBits();
  assert(x == 4I);
  let x = 1024I.countOneBits();
  assert(x == 1I);
  let x = Int32::maxValue().countOneBits();
  assert(x == 31I);
  let x = (-1I).countOneBits();
  assert(x == 32I);
  let x = Int32::minValue().countOneBits();
  assert(x == 1I);


  let x = 0I.countZeroBitsLeading();
  assert(x == 32I);
  let x = 1I.countZeroBitsLeading();
  assert(x == 31I);
  let x = 2I.countZeroBitsLeading();
  assert(x == 30I);
  let x = 35I.countZeroBitsLeading();
  assert(x == 26I);
  let x = 39I.countZeroBitsLeading();
  assert(x == 26I);
  let x = 1024I.countZeroBitsLeading();
  assert(x == 21I);
  let x = Int32::maxValue().countZeroBitsLeading();
  assert(x == 1I);
  let x = (-1I).countZeroBitsLeading();
  assert(x == 0I);
  let x = Int32::minValue().countZeroBitsLeading();
  assert(x == 0I);

  let x = 0I.countOneBitsLeading();
  assert(x == 0I);
  let x = 1I.countOneBitsLeading();
  assert(x == 0I);
  let x = 2I.countOneBitsLeading();
  assert(x == 0I);
  let x = 35I.countOneBitsLeading();
  assert(x == 0I);
  let x = 39I.countOneBitsLeading();
  assert(x == 0I);
  let x = 1024I.countOneBitsLeading();
  assert(x == 0I);
  let x = Int32::maxValue().countOneBitsLeading();
  assert(x == 0I);
  let x = (-1I).countOneBitsLeading();
  assert(x == 32I);
  let x = Int32::minValue().countOneBitsLeading();
  assert(x == 1I);


  let x = 0I.countZeroBitsTrailing();
  assert(x == 32I);
  let x = 1I.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 2I.countZeroBitsTrailing();
  assert(x == 1I);
  let x = 35I.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 39I.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 1024I.countZeroBitsTrailing();
  assert(x == 10I);
  let x = Int32::maxValue().countZeroBitsTrailing();
  assert(x == 0I);
  let x = (-1I).countZeroBitsTrailing();
  assert(x == 0I);
  let x = Int32::minValue().countZeroBitsTrailing();
  assert(x == 31I);

  let x = 0I.countOneBitsTrailing();
  assert(x == 0I);
  let x = 1I.countOneBitsTrailing();
  assert(x == 1I);
  let x = 2I.countOneBitsTrailing();
  assert(x == 0I);
  let x = 35I.countOneBitsTrailing();
  assert(x == 2I);
  let x = 39I.countOneBitsTrailing();
  assert(x == 3I);
  let x = 1024I.countOneBitsTrailing();
  assert(x == 0I);
  let x = Int32::maxValue().countOneBitsTrailing();
  assert(x == 31I);
  let x = (-1I).countOneBitsTrailing();
  assert(x == 32I);
  let x = Int32::minValue().countOneBitsTrailing();
  assert(x == 0I);
}
