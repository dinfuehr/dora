enum Foo {
    A(Int64, Int64, Int64),
    B,
}

fn main() {
    assert(fst(Foo::A(1, 3, 7)) == 1);
    assert(mid(Foo::A(1, 3, 7)) == 3);
    assert(lst(Foo::A(1, 3, 7)) == 7);

    assert(fst(Foo::A(7, 4, 1)) == 7);
    assert(mid(Foo::A(7, 4, 1)) == 4);
    assert(lst(Foo::A(7, 4, 1)) == 1);
}

fn fst(x: Foo): Int64 {
    let Foo::A(a, ..) = x;
    a
}

fn mid(x: Foo): Int64 {
    let Foo::A(.., a, _) = x;
    a
}

fn lst(x: Foo): Int64 {
    let Foo::A(.., a) = x;
    a
}
