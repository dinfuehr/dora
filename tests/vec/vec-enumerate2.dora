use std::traits::Iterator;

fn main() {
    iterateManually();
    iterateWithForIn();
}

fn iterateManually() {
    let it = Vec[String]::new("a", "b", "c").enumerate();
    let (idx, value) = it.next().getOrPanic();
    assert(idx == 0i64 && value == "a");
    let (idx, value) = it.next().getOrPanic();
    assert(idx == 1i64 && value == "b");
    let (idx, value) = it.next().getOrPanic();
    assert(idx == 2i64 && value == "c");
    it.next().unwrapNone();
}

fn iterateWithForIn() {
    for idx_and_value in Vec[String]::new("a", "b", "c").enumerate() {
        let (idx, value) = idx_and_value;

        if idx == 0i64 { assert(value == "a"); }
        else if idx == 1i64 { assert(value == "b"); }
        else if idx == 2i64 { assert(value == "c"); }
        else {
            unreachable[()]();
        }

    }
}

fn iterateWithForInPattern() {
    for (idx, value) in Vec[String]::new("a", "b", "c").enumerate() {
        if idx == 0i64 { assert(value == "a"); }
        else if idx == 1i64 { assert(value == "b"); }
        else if idx == 2i64 { assert(value == "c"); }
        else {
            unreachable[()]();
        }

    }
}
