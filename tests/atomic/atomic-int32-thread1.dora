use std::AtomicInt32;

const THREADS: Int32 = 4i32;
const ITERATIONS: Int32 = 100_000i32;

class MyThread { counter: AtomicInt32 }

impl MyThread {
   fn run() {
        let mut i = 0i32;
        while i < ITERATIONS {
            self.counter.fetchAdd(1i32);
            i = i + 1i32;
        }
    }
}

fn main() {
    let shared = AtomicInt32::new(0i32);
    let threads = Vec[std::Thread]::new();

    let mut i = 0i32;

    while i < THREADS {
        let thread = std::thread::spawn(|| {
            MyThread(shared).run();
        });
        threads.push(thread);
        i = i + 1i32;
    }

    for thread in threads {
        thread.join();
    }

    assert(shared.get() == THREADS * ITERATIONS);
}
