fun main() {
    test_multiple_ascii_chars();

    test_1byte();
    test_2bytes();
    test_3bytes();
    test_4bytes();

    test_invalid();
}

fun test_multiple_ascii_chars() {
    let bytes = Array::ofSizeUnsafe[UInt8](3L);
    bytes(0L) = 'a'.toInt32().toUInt8();
    bytes(1L) = 'b'.toInt32().toUInt8();
    bytes(2L) = 'c'.toInt32().toUInt8();

    let val = String::fromBytes(bytes).unwrap();
    let it = val.codePoints();

    assert(it.hasNext() == true);
    assert(it.next() == 'a');
    assert(it.hasNext() == true);
    assert(it.next() == 'b');
    assert(it.hasNext() == true);
    assert(it.next() == 'c');
    assert(it.hasNext() == false);
}

fun test_1byte() {
    let bytes = Array::ofSizeUnsafe[UInt8](1L);
    bytes(0L) = 0x24Y;

    let val = String::fromBytes(bytes).unwrap();
    let it = val.codePoints();

    assert(it.hasNext() == true);
    assert(it.next() == 0x24.toChar().unwrap());
    assert(it.hasNext() == false);
}

fun test_2bytes() {
    let bytes = Array::ofSizeUnsafe[UInt8](2L);
    bytes(0L) = 0xC2Y;
    bytes(1L) = 0xA2Y;

    let val = String::fromBytes(bytes).unwrap();
    let it = val.codePoints();

    assert(it.hasNext() == true);
    assert(it.next() == 0xA2.toChar().unwrap());
    assert(it.hasNext() == false);
}

fun test_3bytes() {
    let bytes = Array::ofSizeUnsafe[UInt8](3L);
    bytes(0L) = 0xE2Y;
    bytes(1L) = 0x82Y;
    bytes(2L) = 0xACY;

    let val = String::fromBytes(bytes).unwrap();
    let it = val.codePoints();

    assert(it.hasNext() == true);
    assert(it.next() == 0x20ACI.toChar().unwrap());
    assert(it.hasNext() == false);
}

fun test_4bytes() {
    let bytes = Array::ofSizeUnsafe[UInt8](4L);
    bytes(0L) = 0xF0Y;
    bytes(1L) = 0x90Y;
    bytes(2L) = 0x8DY;
    bytes(3L) = 0x88Y;

    let val = String::fromBytes(bytes).unwrap();
    let it = val.codePoints();

    assert(it.hasNext() == true);
    assert(it.next() == 0x10348.toChar().unwrap());
    assert(it.hasNext() == false);
}

fun test_invalid() {
    let bytes = Array::ofSizeUnsafe[UInt8](1L);
    bytes(0L) = 0x80Y;

    let fail = String::fromBytes(bytes);
    assert(fail.isNone());
}
