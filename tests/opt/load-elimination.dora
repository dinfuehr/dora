//= boots

class Foo {
    a: Int,
    b: Int,
}

class Bar {
    x: Foo,
}

fn main() {
    let x = Foo(a = 100, b = 300);
    assert(f1(x) == 200);

    let x = Foo(a = 100, b = 300);
    assert(f2(x, x) == 110);

    let x = Foo(a = 100, b = 300);
    assert(f3(x, x) == 200);

    let x = Foo(a = 100, b = 300);
    assert(f4(x, 12) == 12);

    let x = Foo(a = 10, b = 30);
    let b = Bar(x);
    let new_x = Foo(a = 121, b = 2);
    assert(f5(b, b, new_x) == 131);
}

@Optimize
fn f1(foo: Foo): Int {
    foo.a + foo.a
}

// CHECK: Function f1:
// CHECK: [[REG:%\d+]]: Load.Int64(8) %1
// CHECK: CheckedAdd.Int64 [[REG]], [[REG]]

@Optimize
fn f2(foo: Foo, foo2: Foo): Int {
    let x = foo.a;
    foo2.a = 10;
    x + foo.a
}

@Optimize
fn f3(foo: Foo, foo2: Foo): Int {
    let x = foo.a;
    foo2.b = 10;
    x + foo.a
}

@Optimize
fn f4(foo: Foo, value: Int): Int {
    let tmp = foo.a;
    foo.a = value;
    foo.a = value;
    foo.a
}

@Optimize
fn f5(foo: Bar, foo2: Bar, new_x: Foo): Int {
    let x = foo.x;
    foo2.x = new_x;
    x.a + foo.x.a
}
