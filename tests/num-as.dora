fn main() {
    let testBuggy = true;

    assert(0.0f32.asInt32() == 0i32);
    assert(1.4E-45f32.asInt32() == 1i32);
    assert(4.2E-45f32.asInt32() == 3i32);
    assert((-1f32).asInt32() == (-1082130432i32));
    assert((-0.0f32).asInt32() == (-2147483648i32));

    // x64 and AArch64 use different sign bits for the NaN returned
    // by 0.0f32/0.0f32, be more forgiving here and mask out the sign bit.
    assert((0.0f32/0.0f32).asInt32() & !(1i32 << 31i32) == 0x7FC0_0000i32);

    assert(0.0.asInt64() == 0i64);
    assert(1.4E-45.asInt64() == 3936137728114922858i64);
    assert(4.2E-45.asInt64() == 3942895214107701263i64);
    assert((-1.0).asInt64() == (-4616189618054758400i64));
    assert((-0.0).asInt64() == (-9223372036854775808i64));
    assert((0.0/0.0).asInt64() & !(1i64 << 63i32) == 0x7FF8_0000_0000_0000i64);

    assert(0.0f32 == 0i32.asFloat32());
    assert(1.4E-45f32 == 1i32.asFloat32());
    assert(4.2E-45f32 == 3i32.asFloat32());
    assert((-1i32).asFloat32().isNan());
    assert((-0.0f32) == Int32::minValue().asFloat32());
    assert(Int32::maxValue().asFloat32().isNan());

    assert(0.0 == 0i64.asFloat64());
    assert(4.9E-324 == 1i64.asFloat64());
    assert(1.5E-323 == 3i64.asFloat64());
    assert((-1i64).asFloat64().isNan());
    assert(Int32::minValue().toInt64().asFloat64().isNan());
    assert(Int32::maxValue().toInt64().asFloat64() == 1.060997895E-314);
    assert((-0.0) == Int64::minValue().asFloat64());
    assert(Int64::maxValue().asFloat64().isNan());

    let x = 123456789i32;
    assert(x == x.asFloat32().asInt32());
    assert(x.toInt64() == x.toInt64().asFloat64().asInt64());
    assert(x.toFloat32() == x.toFloat32().asInt32().asFloat32());
    assert(x.toFloat64() == x.toFloat64().asInt64().asFloat64());
}