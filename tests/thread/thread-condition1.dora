//= vm-args "--gc=copy"

use std::Queue;

const THREADS: Int32 = 10i32;
const ITERATIONS: Int32 = 10_000i32;
const QUEUE_SIZE: Int64 = 20i64;

class SharedQueue[T] {
    capacity: Int64,
    mtx: std::Mutex,
    conditionNonEmpty: std::Condition,
    conditionNonFull: std::Condition,
    queue: Queue[T],
}

impl[T] SharedQueue[T] {
    static fn new(capacity: Int64): SharedQueue[T] {
        SharedQueue[T](
            capacity,
            mtx = std::Mutex::new(),
            conditionNonEmpty = std::Condition::new(),
            conditionNonFull = std::Condition::new(),
            queue = Queue[T]::new(),
        )
    }

    fn enqueue(value: T) {
        self.mtx.lock[()](|| {
            while self.queue.size() == self.capacity {
                self.conditionNonFull.wait(self.mtx);
            }

            self.queue.enqueue(value);
        });

        self.conditionNonEmpty.notifyAll();
    }

    fn dequeue(): T {
        let value = self.mtx.lock[T](||: T {
            while self.queue.size() == 0 {
                self.conditionNonEmpty.wait(self.mtx);
            }

            self.queue.dequeue()
        });

        self.conditionNonFull.notifyAll();
        value
    }
}

class Producer {
    queue: SharedQueue[Int32],
    sum: Int32,
}

impl Producer {
    static fn new(queue: SharedQueue[Int32]): Producer {
        Producer(queue, sum = 0i32)
    }

    fn run() {
        let mut i = 0i32;

        while i < ITERATIONS {
            self.queue.enqueue(i);
            self.sum = self.sum + i;
            i = i + 1i32;
        }
    }
}

class Consumer {
    queue: SharedQueue[Int32],
    sum: Int32,
}

impl Consumer {
    static fn new(queue: SharedQueue[Int32]): Consumer {
        Consumer(
            queue,
            sum = 0i32,
        )
    }

    fn run() {
        while true {
            let value = self.queue.dequeue();

            if value == -1i32 {
                break;
            }

            self.sum = self.sum + value;
        }
    }
}

fn main() {
    let mut i = 0i32;
    let queue = SharedQueue[Int32]::new(QUEUE_SIZE);
    let producerThreads = Vec[std::Thread]::new();
    let producers = Vec[Producer]::new();

    while i < THREADS {
        let (producer, thread) = spawn_producer(queue);
        producers.push(producer);
        producerThreads.push(thread);
        i = i + 1i32;
    }

    let consumer = Consumer::new(queue);
    let consumerThread = std::thread::spawn(|| {
        consumer.run();
    });

    for producer in producerThreads {
        producer.join();
    }

    let mut producerSum = 0i32;

    for producer in producers {
        producerSum = producerSum + producer.sum;
    }

    queue.enqueue(-1i32);
    consumerThread.join();

    assert(consumer.sum == producerSum);
}

fn spawn_producer(queue: SharedQueue[Int32]): (Producer, std::Thread) {
    let producer = Producer::new(queue);
    let thread = std::thread::spawn(|| {
        producer.run();
    });

    (producer, thread)
}
