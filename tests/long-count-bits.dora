fun main() {
  let x = 0L.countZeroBits();
  assert(x == 64);
  let x = 1L.countZeroBits();
  assert(x == 63);
  let x = 2L.countZeroBits();
  assert(x == 63);
  let x = 35L.countZeroBits();
  assert(x == 61);
  let x = 39L.countZeroBits();
  assert(x == 60);
  let x = 1024L.countZeroBits();
  assert(x == 63);
  let x = Long::maxValue().countZeroBits();
  assert(x == 1);
  let x = (-1L).countZeroBits();
  assert(x == 0);
  let x = Long::minValue().countZeroBits();
  assert(x == 63);

  let x = 0L.countOneBits();
  assert(x == 0);
  let x = 1L.countOneBits();
  assert(x == 1);
  let x = 2L.countOneBits();
  assert(x == 1);
  let x = 35L.countOneBits();
  assert(x == 3);
  let x = 39L.countOneBits();
  assert(x == 4);
  let x = 1024L.countOneBits();
  assert(x == 1);
  let x = Long::maxValue().countOneBits();
  assert(x == 63);
  let x = (-1L).countOneBits();
  assert(x == 64);
  let x = Long::minValue().countOneBits();
  assert(x == 1);


  let x = 0L.countZeroBitsLeading();
  assert(x == 64);
  let x = 1L.countZeroBitsLeading();
  assert(x == 63);
  let x = 2L.countZeroBitsLeading();
  assert(x == 62);
  let x = 35L.countZeroBitsLeading();
  assert(x == 58);
  let x = 39L.countZeroBitsLeading();
  assert(x == 58);
  let x = 1024L.countZeroBitsLeading();
  assert(x == 53);
  let x = Long::maxValue().countZeroBitsLeading();
  assert(x == 1);
  let x = (-1L).countZeroBitsLeading();
  assert(x == 0);
  let x = Long::minValue().countZeroBitsLeading();
  assert(x == 0);

  let x = 0L.countOneBitsLeading();
  assert(x == 0);
  let x = 1L.countOneBitsLeading();
  assert(x == 0);
  let x = 2L.countOneBitsLeading();
  assert(x == 0);
  let x = 35L.countOneBitsLeading();
  assert(x == 0);
  let x = 39L.countOneBitsLeading();
  assert(x == 0);
  let x = 1024L.countOneBitsLeading();
  assert(x == 0);
  let x = Long::maxValue().countOneBitsLeading();
  assert(x == 0);
  let x = (-1L).countOneBitsLeading();
  assert(x == 64);
  let x = Long::minValue().countOneBitsLeading();
  assert(x == 1);


  let x = 0L.countZeroBitsTrailing();
  assert(x == 64);
  let x = 1L.countZeroBitsTrailing();
  assert(x == 0);
  let x = 2L.countZeroBitsTrailing();
  assert(x == 1);
  let x = 35L.countZeroBitsTrailing();
  assert(x == 0);
  let x = 39L.countZeroBitsTrailing();
  assert(x == 0);
  let x = 1024L.countZeroBitsTrailing();
  assert(x == 10);
  let x = Long::maxValue().countZeroBitsTrailing();
  assert(x == 0);
  let x = (-1L).countZeroBitsTrailing();
  assert(x == 0);
  let x = Long::minValue().countZeroBitsTrailing();
  assert(x == 63);

  let x = 0L.countOneBitsTrailing();
  assert(x == 0);
  let x = 1L.countOneBitsTrailing();
  assert(x == 1);
  let x = 2L.countOneBitsTrailing();
  assert(x == 0);
  let x = 35L.countOneBitsTrailing();
  assert(x == 2);
  let x = 39L.countOneBitsTrailing();
  assert(x == 3);
  let x = 1024L.countOneBitsTrailing();
  assert(x == 0);
  let x = Long::maxValue().countOneBitsTrailing();
  assert(x == 63);
  let x = (-1L).countOneBitsTrailing();
  assert(x == 64);
  let x = Long::minValue().countOneBitsTrailing();
  assert(x == 0);
}
