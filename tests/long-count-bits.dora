fun main() {
  let x = 0L.countZeroBits();
  assert(x == 64I);
  let x = 1L.countZeroBits();
  assert(x == 63I);
  let x = 2L.countZeroBits();
  assert(x == 63I);
  let x = 35L.countZeroBits();
  assert(x == 61I);
  let x = 39L.countZeroBits();
  assert(x == 60I);
  let x = 1024L.countZeroBits();
  assert(x == 63I);
  let x = Int64::maxValue().countZeroBits();
  assert(x == 1I);
  let x = (-1L).countZeroBits();
  assert(x == 0I);
  let x = Int64::minValue().countZeroBits();
  assert(x == 63I);

  let x = 0L.countOneBits();
  assert(x == 0I);
  let x = 1L.countOneBits();
  assert(x == 1I);
  let x = 2L.countOneBits();
  assert(x == 1I);
  let x = 35L.countOneBits();
  assert(x == 3I);
  let x = 39L.countOneBits();
  assert(x == 4I);
  let x = 1024L.countOneBits();
  assert(x == 1I);
  let x = Int64::maxValue().countOneBits();
  assert(x == 63I);
  let x = (-1L).countOneBits();
  assert(x == 64I);
  let x = Int64::minValue().countOneBits();
  assert(x == 1I);


  let x = 0L.countZeroBitsLeading();
  assert(x == 64I);
  let x = 1L.countZeroBitsLeading();
  assert(x == 63I);
  let x = 2L.countZeroBitsLeading();
  assert(x == 62I);
  let x = 35L.countZeroBitsLeading();
  assert(x == 58I);
  let x = 39L.countZeroBitsLeading();
  assert(x == 58I);
  let x = 1024L.countZeroBitsLeading();
  assert(x == 53I);
  let x = Int64::maxValue().countZeroBitsLeading();
  assert(x == 1I);
  let x = (-1L).countZeroBitsLeading();
  assert(x == 0I);
  let x = Int64::minValue().countZeroBitsLeading();
  assert(x == 0I);

  let x = 0L.countOneBitsLeading();
  assert(x == 0I);
  let x = 1L.countOneBitsLeading();
  assert(x == 0I);
  let x = 2L.countOneBitsLeading();
  assert(x == 0I);
  let x = 35L.countOneBitsLeading();
  assert(x == 0I);
  let x = 39L.countOneBitsLeading();
  assert(x == 0I);
  let x = 1024L.countOneBitsLeading();
  assert(x == 0I);
  let x = Int64::maxValue().countOneBitsLeading();
  assert(x == 0I);
  let x = (-1L).countOneBitsLeading();
  assert(x == 64I);
  let x = Int64::minValue().countOneBitsLeading();
  assert(x == 1I);


  let x = 0L.countZeroBitsTrailing();
  assert(x == 64I);
  let x = 1L.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 2L.countZeroBitsTrailing();
  assert(x == 1I);
  let x = 35L.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 39L.countZeroBitsTrailing();
  assert(x == 0I);
  let x = 1024L.countZeroBitsTrailing();
  assert(x == 10I);
  let x = Int64::maxValue().countZeroBitsTrailing();
  assert(x == 0I);
  let x = (-1L).countZeroBitsTrailing();
  assert(x == 0I);
  let x = Int64::minValue().countZeroBitsTrailing();
  assert(x == 63I);

  let x = 0L.countOneBitsTrailing();
  assert(x == 0I);
  let x = 1L.countOneBitsTrailing();
  assert(x == 1I);
  let x = 2L.countOneBitsTrailing();
  assert(x == 0I);
  let x = 35L.countOneBitsTrailing();
  assert(x == 2I);
  let x = 39L.countOneBitsTrailing();
  assert(x == 3I);
  let x = 1024L.countOneBitsTrailing();
  assert(x == 0I);
  let x = Int64::maxValue().countOneBitsTrailing();
  assert(x == 63I);
  let x = (-1L).countOneBitsTrailing();
  assert(x == 64I);
  let x = Int64::minValue().countOneBitsTrailing();
  assert(x == 0I);
}
