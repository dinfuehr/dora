fn main() {
  let x = 0i32.countZeroBits();
  assert(x == 32i32);
  let x = 1i32.countZeroBits();
  assert(x == 31i32);
  let x = 2i32.countZeroBits();
  assert(x == 31i32);
  let x = 35i32.countZeroBits();
  assert(x == 29i32);
  let x = 39i32.countZeroBits();
  assert(x == 28i32);
  let x = 1024i32.countZeroBits();
  assert(x == 31i32);
  let x = Int32::maxValue().countZeroBits();
  assert(x == 1i32);
  let x = (-1).countZeroBits();
  assert(x == 0i32);
  let x = Int32::minValue().countZeroBits();
  assert(x == 31i32);

  let x = 0i32.countOneBits();
  assert(x == 0i32);
  let x = 1i32.countOneBits();
  assert(x == 1i32);
  let x = 2i32.countOneBits();
  assert(x == 1i32);
  let x = 35i32.countOneBits();
  assert(x == 3i32);
  let x = 39i32.countOneBits();
  assert(x == 4i32);
  let x = 1024i32.countOneBits();
  assert(x == 1i32);
  let x = Int32::maxValue().countOneBits();
  assert(x == 31i32);
  let x = (-1i32).countOneBits();
  assert(x == 32i32);
  let x = Int32::minValue().countOneBits();
  assert(x == 1i32);


  let x = 0i32.countZeroBitsLeading();
  assert(x == 32i32);
  let x = 1i32.countZeroBitsLeading();
  assert(x == 31i32);
  let x = 2i32.countZeroBitsLeading();
  assert(x == 30i32);
  let x = 35i32.countZeroBitsLeading();
  assert(x == 26i32);
  let x = 39i32.countZeroBitsLeading();
  assert(x == 26i32);
  let x = 1024i32.countZeroBitsLeading();
  assert(x == 21i32);
  let x = Int32::maxValue().countZeroBitsLeading();
  assert(x == 1i32);
  let x = (-1i32).countZeroBitsLeading();
  assert(x == 0i32);
  let x = Int32::minValue().countZeroBitsLeading();
  assert(x == 0i32);

  let x = 0i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = 1i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = 2i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = 35i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = 39i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = 1024i32.countOneBitsLeading();
  assert(x == 0i32);
  let x = Int32::maxValue().countOneBitsLeading();
  assert(x == 0i32);
  let x = (-1i32).countOneBitsLeading();
  assert(x == 32i32);
  let x = Int32::minValue().countOneBitsLeading();
  assert(x == 1i32);


  let x = 0i32.countZeroBitsTrailing();
  assert(x == 32i32);
  let x = 1i32.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 2i32.countZeroBitsTrailing();
  assert(x == 1i32);
  let x = 35i32.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 39i32.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 1024i32.countZeroBitsTrailing();
  assert(x == 10i32);
  let x = Int32::maxValue().countZeroBitsTrailing();
  assert(x == 0i32);
  let x = (-1i32).countZeroBitsTrailing();
  assert(x == 0i32);
  let x = Int32::minValue().countZeroBitsTrailing();
  assert(x == 31i32);

  let x = 0i32.countOneBitsTrailing();
  assert(x == 0i32);
  let x = 1i32.countOneBitsTrailing();
  assert(x == 1i32);
  let x = 2i32.countOneBitsTrailing();
  assert(x == 0i32);
  let x = 35i32.countOneBitsTrailing();
  assert(x == 2i32);
  let x = 39i32.countOneBitsTrailing();
  assert(x == 3i32);
  let x = 1024i32.countOneBitsTrailing();
  assert(x == 0i32);
  let x = Int32::maxValue().countOneBitsTrailing();
  assert(x == 31i32);
  let x = (-1i32).countOneBitsTrailing();
  assert(x == 32i32);
  let x = Int32::minValue().countOneBitsTrailing();
  assert(x == 0i32);
}
