fn main() {
  let x = 0i64.countZeroBits();
  assert(x == 64i32);
  let x = 1i64.countZeroBits();
  assert(x == 63i32);
  let x = 2i64.countZeroBits();
  assert(x == 63i32);
  let x = 35i64.countZeroBits();
  assert(x == 61i32);
  let x = 39i64.countZeroBits();
  assert(x == 60i32);
  let x = 1024i64.countZeroBits();
  assert(x == 63i32);
  let x = Int64::maxValue().countZeroBits();
  assert(x == 1i32);
  let x = (-1i64).countZeroBits();
  assert(x == 0i32);
  let x = Int64::minValue().countZeroBits();
  assert(x == 63i32);

  let x = 0i64.countOneBits();
  assert(x == 0i32);
  let x = 1i64.countOneBits();
  assert(x == 1i32);
  let x = 2i64.countOneBits();
  assert(x == 1i32);
  let x = 35i64.countOneBits();
  assert(x == 3i32);
  let x = 39i64.countOneBits();
  assert(x == 4i32);
  let x = 1024i64.countOneBits();
  assert(x == 1i32);
  let x = Int64::maxValue().countOneBits();
  assert(x == 63i32);
  let x = (-1i64).countOneBits();
  assert(x == 64i32);
  let x = Int64::minValue().countOneBits();
  assert(x == 1i32);


  let x = 0i64.countZeroBitsLeading();
  assert(x == 64i32);
  let x = 1i64.countZeroBitsLeading();
  assert(x == 63i32);
  let x = 2i64.countZeroBitsLeading();
  assert(x == 62i32);
  let x = 35i64.countZeroBitsLeading();
  assert(x == 58i32);
  let x = 39i64.countZeroBitsLeading();
  assert(x == 58i32);
  let x = 1024i64.countZeroBitsLeading();
  assert(x == 53i32);
  let x = Int64::maxValue().countZeroBitsLeading();
  assert(x == 1i32);
  let x = (-1i64).countZeroBitsLeading();
  assert(x == 0i32);
  let x = Int64::minValue().countZeroBitsLeading();
  assert(x == 0i32);

  let x = 0i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = 1i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = 2i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = 35i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = 39i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = 1024i64.countOneBitsLeading();
  assert(x == 0i32);
  let x = Int64::maxValue().countOneBitsLeading();
  assert(x == 0i32);
  let x = (-1i64).countOneBitsLeading();
  assert(x == 64i32);
  let x = Int64::minValue().countOneBitsLeading();
  assert(x == 1i32);


  let x = 0i64.countZeroBitsTrailing();
  assert(x == 64i32);
  let x = 1i64.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 2i64.countZeroBitsTrailing();
  assert(x == 1i32);
  let x = 35i64.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 39i64.countZeroBitsTrailing();
  assert(x == 0i32);
  let x = 1024i64.countZeroBitsTrailing();
  assert(x == 10i32);
  let x = Int64::maxValue().countZeroBitsTrailing();
  assert(x == 0i32);
  let x = (-1i64).countZeroBitsTrailing();
  assert(x == 0i32);
  let x = Int64::minValue().countZeroBitsTrailing();
  assert(x == 63i32);

  let x = 0i64.countOneBitsTrailing();
  assert(x == 0i32);
  let x = 1i64.countOneBitsTrailing();
  assert(x == 1i32);
  let x = 2i64.countOneBitsTrailing();
  assert(x == 0i32);
  let x = 35i64.countOneBitsTrailing();
  assert(x == 2i32);
  let x = 39i64.countOneBitsTrailing();
  assert(x == 3i32);
  let x = 1024i64.countOneBitsTrailing();
  assert(x == 0i32);
  let x = Int64::maxValue().countOneBitsTrailing();
  assert(x == 63i32);
  let x = (-1i64).countOneBitsTrailing();
  assert(x == 64i32);
  let x = Int64::minValue().countOneBitsTrailing();
  assert(x == 0i32);
}
