fun main() {
    test_multiple_ascii_chars();

    test_1byte();
    test_2bytes();
    test_3bytes();
    test_4bytes();

    test_invalid();
}

fun test_multiple_ascii_chars() {
    let bytes = Array::<byte>(3);
    bytes[0] = 'a'.toInt().toByte();
    bytes[1] = 'b'.toInt().toByte();
    bytes[2] = 'c'.toInt().toByte();

    let val = try! String::fromBytes(bytes);
    assert(val == "abc");
}

fun test_1byte() {
    let bytes = Array::<byte>(1);
    bytes[0] = 0x24Y;

    try! String::fromBytes(bytes);
}

fun test_2bytes() {
    let bytes = Array::<byte>(2);
    bytes[0] = 0xC2Y;
    bytes[1] = 0xA2Y;

    try! String::fromBytes(bytes);
}

fun test_3bytes() {
    let bytes = Array::<byte>(3);
    bytes[0] = 0xE2Y;
    bytes[1] = 0x82Y;
    bytes[2] = 0xACY;

    try! String::fromBytes(bytes);
}

fun test_4bytes() {
    let bytes = Array::<byte>(4);
    bytes[0] = 0xF0Y;
    bytes[1] = 0x90Y;
    bytes[2] = 0x8DY;
    bytes[3] = 0x88Y;

    try! String::fromBytes(bytes);
}

fun test_invalid() {
    let bytes = Array::<byte>(1);
    bytes[0] = 0x80Y;

    do {
        try String::fromBytes(bytes);
        assert(false);
    } catch x: String {
        assert(true);
    }
}
