fun main() {
  int32();
  int64();
  float64();
}

fun int32() {
  let x = Array[Int32](2, 3, 0, 4);
  Array[Int32]::sortStable(x);
  assert(x == Array[Int32](0, 2, 3, 4));
}

fun int64() {
  let x = Array[Int64](5L, 1L, 4L, 2L, 8L);
  Array[Int64]::sortStable(x);
  assert(x == Array[Int64](1L, 2L, 4L, 5L, 8L));
}

fun float64() {
  // as x86 returns a negative NaN for 0.0/0.0, but Arm&RiscV return a positive NaN,
  // we need to make extra efforts to ensure the NaNs we are using have the desired signs.

  // expected order
  let nNaN = -(0.0/0.0).abs();
  let nInf = -1.0/0.0;
  let nOne = -1.0;
  let nZero = -0.0;
  let pZero = 0.0;
  let pOne = 1.0;
  let pInf= 1.0/0.0;
  let pNaN = (0.0/0.0).abs();

  let x = Array[Float64](pOne, pInf, nInf, pNaN, nNaN, nZero, pZero, nOne);
  Array[Float64]::sortStable(x);
  assert(x(0L) === nNaN);
  assert(x(1L) === nInf);
  assert(x(2L) === nOne);
  assert(x(3L) === nZero);
  assert(x(4L) === pZero);
  assert(x(5L) === pOne);
  assert(x(6L) === pInf);
  assert(x(7L) === pNaN);
}
