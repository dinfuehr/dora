fn main() {
  let x = Array[Int32]::fill(2i64, 100i32);
  int32_array_set(x, 1i64, 200i32);
  assert(x(0i64) == 100i32);
  assert(x(1i64) == 200i32);

  let x = Array[Int64]::fill(2i64, 200i64);
  int64_array_set(x, 1i64, 100i64);
  assert(x(0i64) == 200i64);
  assert(x(1i64) == 100i64);

  let x = Array[Float32]::fill(2i64, 1.0f32);
  float_array_set(x, 1i64, 2.0f32);
  assert(x(0i64) == 1.0f32);
  assert(x(1i64) == 2.0f32);

  let x = Array[Float64]::fill(2i64, 2.0);
  double_array_set(x, 1i64, 1.0);
  assert(x(0i64) == 2.0);
  assert(x(1i64) == 1.0);

  let x = Array[String]::fill(2i64, "hello");
  str_array_set(x, 1i64, "abc");
  assert(x(0i64) == "hello");
  assert(x(1i64) == "abc");

  let x = Array[Foo]::fill(2i64, Foo(1i32));
  foo_array_set(x, 1i64, Foo(2i32));
  assert(x(0i64).y == 1i32);
  assert(x(1i64).y == 2i32);
}

fn int32_array_set(x: Array[Int32], idx: Int64, val: Int32) {
  x(idx) = val;
}

fn int64_array_set(x: Array[Int64], idx: Int64, val: Int64) {
  x(idx) = val;
}

fn float_array_set(x: Array[Float32], idx: Int64, val: Float32) {
  x(idx) = val;
}

fn double_array_set(x: Array[Float64], idx: Int64, val: Float64) {
  x(idx) = val;
}

fn str_array_set(x: Array[String], idx: Int64, val: String) {
  x(idx) = val;
}

fn foo_array_set(x: Array[Foo], idx: Int64, val: Foo) {
  x(idx) = val;
}

class Foo { y: Int32 }
