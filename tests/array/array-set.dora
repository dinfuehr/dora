fun main() {
  let x = Array[Int32]::fill(2L, 100I);
  int32_array_set(x, 1L, 200I);
  assert(x(0L) == 100I);
  assert(x(1L) == 200I);

  let x = Array[Int64]::fill(2L, 200L);
  int64_array_set(x, 1L, 100L);
  assert(x(0L) == 200L);
  assert(x(1L) == 100L);

  let x = Array[Float32]::fill(2L, 1.0F);
  float_array_set(x, 1L, 2.0F);
  assert(x(0L) == 1.0F);
  assert(x(1L) == 2.0F);

  let x = Array[Float64]::fill(2L, 2.0);
  double_array_set(x, 1L, 1.0);
  assert(x(0L) == 2.0);
  assert(x(1L) == 1.0);

  let x = Array[String]::fill(2L, "hello");
  str_array_set(x, 1L, "abc");
  assert(x(0L) == "hello");
  assert(x(1L) == "abc");

  let x = Array[Foo]::fill(2L, Foo(1I));
  foo_array_set(x, 1L, Foo(2I));
  assert(x(0L).y == 1I);
  assert(x(1L).y == 2I);
}

fun int32_array_set(x: Array[Int32], idx: Int64, val: Int32) {
  x(idx) = val;
}

fun int64_array_set(x: Array[Int64], idx: Int64, val: Int64) {
  x(idx) = val;
}

fun float_array_set(x: Array[Float32], idx: Int64, val: Float32) {
  x(idx) = val;
}

fun double_array_set(x: Array[Float64], idx: Int64, val: Float64) {
  x(idx) = val;
}

fun str_array_set(x: Array[String], idx: Int64, val: String) {
  x(idx) = val;
}

fun foo_array_set(x: Array[Foo], idx: Int64, val: Foo) {
  x(idx) = val;
}

class Foo(let y: Int32)
