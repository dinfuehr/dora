fn main() {
  let x = Array[Int32]::fill(5i64, 100i32);
  assert(x(0i64) == 100i32);
  assert(int32_array_get(x, 4i64) == 100i32);

  let x = Array[Int64]::fill(7i64, 200i64);
  assert(x(6i64) == 200i64);
  assert(int64_array_get(x, 0i64) == 200i64);

  let x = Array[Float32]::fill(6i64, 1.0f32);
  assert(x(0i64) == 1.0f32);
  assert(float_array_get(x, 5i64) == 1.0f32);

  let x = Array[Float64]::fill(4i64, 2.0);
  assert(x(0i64) == 2.0);
  assert(double_array_get(x, 3i64) == 2.0);

  let x = Array[String]::fill(3i64, "hello");
  assert(x(0i64) == "hello");
  assert(str_array_get(x, 2i64) == "hello");

  let x = Array[Foo]::fill(1i64, Foo(1i32));
  assert(x(0i64).y == 1i32);
  assert(foo_array_get(x, 0i64).y == 1i32);
}

fn int32_array_get(x: Array[Int32], idx: Int64): Int32 {
  return x(idx);
}

fn int64_array_get(x: Array[Int64], idx: Int64): Int64 {
  return x(idx);
}

fn float_array_get(x: Array[Float32], idx: Int64): Float32 {
  return x(idx);
}

fn double_array_get(x: Array[Float64], idx: Int64): Float64 {
  return x(idx);
}

fn str_array_get(x: Array[String], idx: Int64): String {
  return x(idx);
}

fn foo_array_get(x: Array[Foo], idx: Int64): Foo {
  return x(idx);
}

class Foo { y: Int32 }
