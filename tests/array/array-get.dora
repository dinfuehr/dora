fun main() {
  let x = Array[Int32]::fill(5L, 100I);
  assert(x(0L) == 100I);
  assert(int32_array_get(x, 4L) == 100I);

  let x = Array[Int64]::fill(7L, 200L);
  assert(x(6L) == 200L);
  assert(int64_array_get(x, 0L) == 200L);

  let x = Array[Float32]::fill(6L, 1.0F);
  assert(x(0L) == 1.0F);
  assert(float_array_get(x, 5L) == 1.0F);

  let x = Array[Float64]::fill(4L, 2.0);
  assert(x(0L) == 2.0);
  assert(double_array_get(x, 3L) == 2.0);

  let x = Array[String]::fill(3L, "hello");
  assert(x(0L) == "hello");
  assert(str_array_get(x, 2L) == "hello");

  let x = Array[Foo]::fill(1L, Foo(1I));
  assert(x(0L).y == 1I);
  assert(foo_array_get(x, 0L).y == 1I);
}

fun int32_array_get(x: Array[Int32], idx: Int64): Int32 {
  return x(idx);
}

fun int64_array_get(x: Array[Int64], idx: Int64): Int64 {
  return x(idx);
}

fun float_array_get(x: Array[Float32], idx: Int64): Float32 {
  return x(idx);
}

fun double_array_get(x: Array[Float64], idx: Int64): Float64 {
  return x(idx);
}

fun str_array_get(x: Array[String], idx: Int64): String {
  return x(idx);
}

fun foo_array_get(x: Array[Foo], idx: Int64): Foo {
  return x(idx);
}

class Foo(let y: Int32)
