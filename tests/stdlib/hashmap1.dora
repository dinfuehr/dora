use std::BitSet;
use std::HashMap;
use std::traits::Not;

fn main() {
    let map = HashMap[Int32, String]::new();
    map.insert(1i32, "a");
    map.insert(10000i32, "b");
    map.insert(7i32, "c");

    check_iterator1(map);

    assert(map.get(1i32).getOrPanic() == "a");
    assert(map.get(10000i32).getOrPanic() == "b");
    assert(map.get(7i32).getOrPanic() == "c");
    assert(map.get(2i32).isNone());
    assert(map.size() == 3i64);
    assert(map.isEmpty().not());

    assert(map.contains(1i32));
    assert(map.contains(10000i32));
    assert(map.contains(7i32));
    assert(!map.contains(2i32));

    map.remove(10000i32);

    assert(map.get(1i32).getOrPanic() == "a");
    assert(map.get(10000i32).isNone());
    assert(map.get(7i32).getOrPanic() == "c");
    assert(map.get(2i32).isNone());
    assert(map.size() == 2i64);
    assert(map.isEmpty().not());

    assert(map.contains(1i32));
    assert(!map.contains(10000i32));
    assert(map.contains(7i32));

    check_iterator2(map);
}

fn check_iterator1(map: HashMap[Int32, String]) {
    let set = BitSet::new(3i64);

    for (key, value) in map {
        if key == 1i32 {
            assert(value == "a");
            assert(!set.contains(0i64));
            set.insert(0i64);
        } else if key == 10000i32 {
            assert(value == "b");
            assert(!set.contains(1i64));
            set.insert(1i64);
        } else if key == 7i32 {
            assert(value == "c");
            assert(!set.contains(2i64));
            set.insert(2i64);
        } else {
            unreachable[()]();
        }
    }

    assert(set.contains(0i64));
    assert(set.contains(1i64));
    assert(set.contains(2i64));
}

fn check_iterator2(map: HashMap[Int32, String]) {
    let set = BitSet::new(3i64);

    for (key, value) in map {
        if key == 1i32 {
            assert(value == "a");
            assert(!set.contains(0i64));
            set.insert(0i64);
        } else if key == 7i32 {
            assert(value == "c");
            assert(!set.contains(1i64));
            set.insert(1i64);
        } else {
            unreachable[()]();
        }
    }

    assert(set.contains(0i64));
    assert(set.contains(1i64));
}