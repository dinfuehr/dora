fun main() {
    let map = HashMap[Int32, String]();
    map.insert(1, "a");
    map.insert(10000, "b");
    map.insert(7, "c");

    check_iterator1(map);

    assert(map.get(1).unwrap() == "a");
    assert(map.get(10000).unwrap() == "b");
    assert(map.get(7).unwrap() == "c");
    assert(map.get(2).isNone());
    assert(map.size() == 3L);
    assert(map.isEmpty().not());

    assert(map.contains(1));
    assert(map.contains(10000));
    assert(map.contains(7));
    assert(!map.contains(2));

    map.remove(10000);

    assert(map.get(1).unwrap() == "a");
    assert(map.get(10000).isNone());
    assert(map.get(7).unwrap() == "c");
    assert(map.get(2).isNone());
    assert(map.size() == 2L);
    assert(map.isEmpty().not());

    assert(map.contains(1));
    assert(!map.contains(10000));
    assert(map.contains(7));

    check_iterator2(map);
}

fun check_iterator1(map: HashMap[Int32, String]) {
    let it = map.makeIterator();
    let set = BitSet(3L);

    while it.hasNext() {
        let key_and_value = it.next();
        let key = key_and_value.0;
        let value = key_and_value.1;

        if key == 1 {
            assert(value == "a");
            assert(!set.contains(0L));
            set.insert(0L);
        } else if key == 10000 {
            assert(value == "b");
            assert(!set.contains(1L));
            set.insert(1L);
        } else if key == 7 {
            assert(value == "c");
            assert(!set.contains(2L));
            set.insert(2L);
        } else {
            unreachable();
        }
    }

    assert(set.contains(0L));
    assert(set.contains(1L));
    assert(set.contains(2L));
}

fun check_iterator2(map: HashMap[Int32, String]) {
    let it = map.makeIterator();
    let set = BitSet(3L);

    while it.hasNext() {
        let key_and_value = it.next();
        let key = key_and_value.0;
        let value = key_and_value.1;

        if key == 1 {
            assert(value == "a");
            assert(!set.contains(0L));
            set.insert(0L);
        } else if key == 7 {
            assert(value == "c");
            assert(!set.contains(1L));
            set.insert(1L);
        } else {
            unreachable();
        }
    }

    assert(set.contains(0L));
    assert(set.contains(1L));
}