use std::traits::{Add, BitAnd, BitOr, BitXor, Div, Mod, Mul, Neg, Not, Sub};

fn main() {
    let x = 1i32.neg();
    assert(x == (-1i32));

    let x = 1i32.add(2i32);
    assert(x == 3i32);

    let x = 1i32 + 2i32;
    assert(x == 3i32);

    let x = 5i32.sub(2i32);
    assert(x == 3i32);

    let x = 5i32 - 2i32;
    assert(x == 3i32);

    let x = 3i32.mul(4i32);
    assert(x == 12i32);

    let x = 3i32 * 4i32;
    assert(x == 12i32);

    let x = 9i32.div(8i32);
    assert(x == 1i32);

    let x = 9i32 / 8i32;
    assert(x == 1i32);

    let x = 10i32.modulo(8i32);
    assert(x == 2i32);

    let x = 10i32 % 8i32;
    assert(x == 2i32);

    let x = 1i32.bitor(2i32);
    assert(x == 3i32);

    let x = 1i32 | 2i32;
    assert(x == 3i32);

    let x = 5i32.bitand(6i32);
    assert(x == 4i32);

    let x = 5i32 & 6i32;
    assert(x == 4i32);

    let x = 1i32.bitxor(3i32);
    assert(x == 2i32);

    let x = 1i32 ^ 3i32;
    assert(x == 2i32);

    let x = 1i32.not();
    assert(x == (-2i32));

    let x = !1i32;
    assert(x == (-2i32));

    assert(2i32 != 3i32);
    assert(5i32 == 5i32);
    assert(2i32 > 1i32);
    assert(2i32 >= 1i32);
    assert(3i32 < 4i32);
    assert(3i32 <= 4i32);
}
