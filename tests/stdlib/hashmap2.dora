use std::HashMap;
use std::string::Stringable;
use std::traits::Not;

fn main() {
    let map = HashMap[Int32, String]::new();
    assert(map.isEmpty());

    let mut i = 0i32;

    while i < 1000i32 {
        map.insert(i, i.toString());
        i = i + 1i32;
    }

    assert(map.size() == 1000i64);
    assert(map.isEmpty().not());
    assert(map.capacity() == 2048i64);
    assert(!map.contains(-1i32));
    assert(!map.contains(1000i32));

    i = 0i32;

    while i < 1000i32 {
        assert(map.get(i).getOrPanic() == i.toString());
        assert(map.contains(i));
        i = i + 1i32;
    }

    i = 900i32;

    while i < 1000i32 {
        map.remove(i);
        assert(!map.contains(i));
        i = i + 1i32;
    }

    assert(map.size() == 900i64);
    assert(map.isEmpty().not());
    assert(map.capacity() == 2048i64);

    i = 0i32;

    while i < 900i32 {
        assert(map.get(i).getOrPanic() == i.toString());
        assert(map.contains(i));
        i = i + 1i32;
    }

    i = 300i32;

    while i < 900i32 {
        map.remove(i);
        assert(!map.contains(i));
        i = i + 1i32;
    }

    assert(map.size() == 300i64);
    assert(map.isEmpty().not());
    assert(map.capacity() == 1024i64);
}
