//= vm-args "--gc=swiper --gc-verify"

class Foo(x: Int32)

fn main() {
    let a = Array[Int64]::fill(70i64, 0i64);
    let f1 = Foo(3i32);
    let x = CardSpanningObject::new(f1);
    std::forceMinorCollect();
    assert(x.field0 === f1);
    assert(x.field64 === f1);

    x.field0 = Foo(1i32);
    std::forceMinorCollect();
    assert(x.field0.x == 1i32);
    assert(x.field64 === f1);

    std::forceMinorCollect();
    assert(x.field0.x == 1i32);
    assert(x.field64 === f1);
}

class CardSpanningObject {
    field0: Foo,
    field1: Foo,
    field2: Foo,
    field3: Foo,
    field4: Foo,
    field5: Foo,
    field6: Foo,
    field7: Foo,
    field8: Foo,
    field9: Foo,
    field10: Foo,
    field11: Foo,
    field12: Foo,
    field13: Foo,
    field14: Foo,
    field15: Foo,
    field16: Foo,
    field17: Foo,
    field18: Foo,
    field19: Foo,
    field20: Foo,
    field21: Foo,
    field22: Foo,
    field23: Foo,
    field24: Foo,
    field25: Foo,
    field26: Foo,
    field27: Foo,
    field28: Foo,
    field29: Foo,
    field30: Foo,
    field31: Foo,
    field32: Foo,
    field33: Foo,
    field34: Foo,
    field35: Foo,
    field36: Foo,
    field37: Foo,
    field38: Foo,
    field39: Foo,
    field40: Foo,
    field41: Foo,
    field42: Foo,
    field43: Foo,
    field44: Foo,
    field45: Foo,
    field46: Foo,
    field47: Foo,
    field48: Foo,
    field49: Foo,
    field50: Foo,
    field51: Foo,
    field52: Foo,
    field53: Foo,
    field54: Foo,
    field55: Foo,
    field56: Foo,
    field57: Foo,
    field58: Foo,
    field59: Foo,
    field60: Foo,
    field61: Foo,
    field62: Foo,
    field63: Foo,
    field64: Foo,
}

impl CardSpanningObject {
    static fn new(f: Foo): CardSpanningObject {
        CardSpanningObject(
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
            f,
        )
    }
}