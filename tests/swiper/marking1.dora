//= ignore

fn main() {
    let arr = Vec[Foo]::new();

    let mut i = 0;
    while i < 10 {
        arr.push(tree(9));
        i = i + 1;
    }

    std::forceCollect();
    std::forceCollect();
    std::forceCollect();
    std::forceCollect();
    std::forceCollect();
}

fn tree(depth: Int64): Foo {
    if depth == 0 {
        return Foo(
            a = None[Foo],
            b = None[Foo],
            c = None[Foo],
            d = None[Foo],
            e = None[Foo],
        );
    }

    return Foo(
        a = Some[Foo](tree(depth-1)),
        b = Some[Foo](tree(depth-1)),
        c = Some[Foo](tree(depth-1)),
        d = Some[Foo](tree(depth-1)),
        e = Some[Foo](tree(depth-1)),
    );
}

class Foo {
    a: Option[Foo],
    b: Option[Foo],
    c: Option[Foo],
    d: Option[Foo],
    e: Option[Foo],
}
