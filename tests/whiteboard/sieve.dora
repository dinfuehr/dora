//= stdout file

fn main() {
    let primes = sieve(100);
    let mut i = 0;

    while i < primes.size() {
        println(primes(i).toString());
        i = i + 1;
    }
}

fn sieve(limit: Int64): Vec[Int64] {
    let primes = Vec[Int64]::new();

    if limit >= 2 {
        let numbers = Array[Bool]::fill(limit + 1, true);
        let sqrtLimit = limit.toFloat64().sqrt().toInt64();

        let mut factor = 2;

        while factor <= sqrtLimit {
            if numbers(factor) {
                let mut multiple = factor * factor;

                while multiple <= limit {
                    numbers(multiple) = false;
                    multiple = multiple + factor;
                }
            }

            factor = factor + 1;
        }

        let mut i = 0;

        while i <= limit {
            if i >= 2 && numbers(i) {
                primes.push(i);
            }

            i = i + 1;
        }
    }

    return primes;
}
