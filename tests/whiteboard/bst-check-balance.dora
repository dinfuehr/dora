class Node(let val: Int32, var left: Node, var right: Node) {}

module Node {
  fun val(val: Int32): Node = Node(val, nil, nil);
}

fun main() {
  let root = Node(5,
                  Node(10,
                       Node::val(20),
                       Node::val(25)),
                  Node(15,
                       Node::val(30),
                       Node::val(35)));

  dumpTree(root, 0);
  println(isBalanced(root).toString());

  root.right.right.right = Node(40, nil, Node::val(45));

  dumpTree(root, 0);
  println(isBalanced(root).toString());
}

fun dumpTree(root: Node, depth: Int32) {
  if root === nil {
    if depth == 0 {
      println("nil");
    }

    return;
  }

  dumpTree(root.right, depth+1);

  var i = 0;

  while i < depth {
    print("\t");
    i = i + 1;
  }

  println(root.val.toString());

  dumpTree(root.left, depth+1);
}

fun isBalanced(root: Node): Bool {
  return height(root) >= 0;
}

fun height(node: Node): Int32 {
  if node === nil {
    return 0;
  }

  let l = height(node.left);
  let r = height(node.right);

  let diff = (l - r).abs();

  if diff > 1 {
    return -1;
  } else {
    return max(l, r) + 1;
  }
}

fun max(left: Int32, right: Int32): Int32 {
  if left >= right {
    return left;
  } else {
    return right;
  }
}
