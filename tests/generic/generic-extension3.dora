//= stdout "self=Foo:1 another=Int32:101\nself=Int32:2 another=Float32:102\n"

class MyClass[T] { value: Int32 }
class Foo

impl[X: TypeDescriptor] MyClass[X] {
    fn do[T: TypeDescriptor](another: MyClass[T]) {
        println("self=${X::name()}:${self.value} another=${T::name()}:${another.value}");
    }
}

trait TypeDescriptor {
    static fn name(): String;
}

impl TypeDescriptor for Foo {
    static fn name(): String { "Foo" }
}

impl TypeDescriptor for Int32 {
    static fn name(): String { "Int32" }
}

impl TypeDescriptor for Float32 {
    static fn name(): String { "Float32" }
}

fn f() {
    MyClass[Foo](1i32).do[Int32](MyClass[Int32](101i32));
    MyClass[Int32](2i32).do[Float32](MyClass[Float32](102i32));
}

fn main() {
    f();
}
