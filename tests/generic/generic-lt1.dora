use std::traits::Comparable;

fn main() {
    assert(!lt[Int64](10, 10));
    assert(lt[Int64](10, 12));

    assert(!lt[Int32](10i32, 10i32));
    assert(lt[Int32](10i32, 12i32));

    assert(!lt[Wrapper](Wrapper(10), Wrapper(10)));
    assert(lt[Wrapper](Wrapper(10), Wrapper(12)));

    assert(!lt[Float64](10.0f64, 10.0f64));
    assert(lt[Float64](10.0f64, 12.0f64));

    assert(!lt[Float32](10.0f32, 10.0f32));
    assert(lt[Float32](10.0f32, 12.0f32));
}

fn lt[T: std::traits::Comparable](lhs: T, rhs: T): Bool {
    lhs < rhs
}

struct Wrapper(Int64)

impl std::traits::Comparable for Wrapper {
    fn cmp(rhs: Wrapper): std::traits::Ordering {
        self.0.cmp(rhs.0)
    }
}
