class HashMap[K: Hash + Equals, V] {
    // BitSet.size == capacity * 2
    // [bit 0: inserted; bit 1: deleted] * capacity
    var inserted_and_deleted: BitSet = BitSet(0L);
    var keys: Array[K] = Array::empty[K]();
    var values: Array[V] = Array::empty[V]();
    var size: Int64 = 0L;
    var cap: Int64 = 0L;

    fun insert(key: K, value: V) {
        self.ensureCapacity(1L);
        assert(self.size < self.cap);

        var hash = key.hash();
        var idx = hash.toInt64() & (self.cap - 1L);

        while true {
            if self.isLive(idx) {
                let current_key = self.keys.get(idx);

                if current_key.hash() == hash && current_key.equals(key) {
                    self.values.set(idx, value);
                    return;
                }

            } else {
                self.inserted_and_deleted.insert(2L * idx);
                self.inserted_and_deleted.remove(2L * idx + 1L);

                self.keys.set(idx, key);
                self.values.set(idx, value);

                self.size = self.size + 1L;
                return;
            }

            idx = (idx + 1L) & (self.cap - 1L);
        }
    }

    fun contains(key: K) -> Bool {
        assert(self.size <= self.cap);

        if self.size == 0L {
            return false;
        }

        var hash = key.hash();
        var idx = hash.toInt64() & (self.cap - 1L);

        while true {
            if self.isLive(idx) {
                let current_key = self.keys.get(idx);

                if current_key.hash() == hash && current_key.equals(key) {
                    return true;
                }
            } else {
                break;
            }

            idx = (idx + 1L) & (self.cap - 1L);
        }

        false
    }

    fun get(key: K) -> Option[V] {
        assert(self.size <= self.cap);

        if self.size == 0L {
            return Option::none[V]();
        }

        var hash = key.hash();
        var idx = hash.toInt64() & (self.cap - 1L);

        while true {
            if self.isLive(idx) {
                let current_key = self.keys.get(idx);

                if current_key.hash() == hash && current_key.equals(key) {
                    return Option::some[V](self.values.get(idx));
                }
            } else {
                break;
            }

            idx = (idx + 1L) & (self.cap - 1L);
        }

        return Option::none[V]();
    }

    fun remove(key: K) -> V {
        self.shrink();

        var hash = key.hash();
        var idx = hash.toInt64() & (self.cap - 1L);

        while true {
            if self.isLive(idx) {
                let current_key = self.keys.get(idx);

                if current_key.hash() == hash && current_key.equals(key) {
                    let value = self.values.get(idx);
                    self.inserted_and_deleted.insert(2L * idx + 1L);

                    self.keys.set(idx, defaultValue[K]());
                    self.values.set(idx, defaultValue[V]());

                    self.size = self.size - 1L;
                    return value;
                }
            } else {
                break;
            }

            idx = (idx + 1L) & (self.cap - 1L);
        }

        return defaultValue[V]();
    }

    fun ensureCapacity(elements_to_add: Int64) {
        if self.size + elements_to_add < self.cap {
            if self.size <= (self.cap - (self.cap / 4L)) {
                return;
            }
        }

        var new_capacity = 4L;
        let old_capacity = self.cap;

        if old_capacity > 0L {
            new_capacity = old_capacity * 2L;
        }

        assert(self.size + elements_to_add < new_capacity);

        self.rehash(new_capacity);
    }

    fun shrink() {
        if self.size > (self.cap / 4L) {
            return;
        }

        let new_capacity = self.cap / 2L;

        if new_capacity < 4L {
            return;
        }

        assert(self.size < new_capacity);

        self.rehash(new_capacity);
    }

    fun rehash(new_capacity: Int64) {
        let old_capacity = self.cap;

        let new_map = HashMap[K, V]();
        new_map.inserted_and_deleted = BitSet(2L * new_capacity);
        new_map.keys = Array[K](new_capacity);
        new_map.values = Array[V](new_capacity);
        new_map.size = 0L;
        new_map.cap = new_capacity;

        var idx = 0L;

        while idx < old_capacity {
            if self.isLive(idx) {
                let key = self.keys.get(idx);
                let value = self.values.get(idx);

                new_map.insert(key, value);
            }

            idx = idx + 1L;
        }

        self.inserted_and_deleted = new_map.inserted_and_deleted;
        self.keys = new_map.keys;
        self.values = new_map.values;
        self.size = new_map.size;
        self.cap = new_capacity;
    }

    fun isLive(idx: Int64) -> Bool {
        return self.inserted_and_deleted.contains(2L * idx) &&
               !self.inserted_and_deleted.contains(2L * idx + 1L);
    }

    fun length() -> Int64 {
        return self.size;
    }

    fun isEmpty() -> Bool {
        return self.size == 0L;
    }

    fun capacity() -> Int64 {
        return self.cap;
    }

    fun makeIterator() -> HashMapIter[K, V] {
        HashMapIter[K, V](self)
    }
}

class HashMapIter[K: Hash + Equals, V](let map: HashMap[K, V]) {
    var idx: Int64 = 0L;

    fun hasNext() -> Bool {
        while self.idx < self.map.capacity() {
            if self.map.isLive(self.idx) {
                return true;
            }

            self.idx = self.idx + 1L;
        }

        false
    }

    fun next() -> (K, V) {
        assert(self.map.isLive(self.idx));
        let key = self.map.keys.get(self.idx);
        let value = self.map.values.get(self.idx);
        self.idx = self.idx + 1L;
        (key, value)
    }
}

fun hashMap[K: Hash + Equals, V](entries: (K, V)...) -> HashMap[K, V] {
    let result = HashMap[K, V]();
    for entry in entries {
        result.insert(entry.0, entry.1);
    }
    result
}
