class Queue[T] {
  var elements: Array[T] = Array[T](4L);
  var front: Int64 = 0L;
  var count: Int64 = 0L;

  @pub fun enqueue(value: T) {
    if self.count == self.elements.size() {
      // copy into larger array
      let newelements = Array[T](self.elements.size() * 2L);
      let len = self.elements.size() - self.front;
      Array::copy[T](self.elements, self.front, newelements, 0L, len);

      if len < self.count {
        Array::copy[T](self.elements, 0L, newelements, len, self.count - len);
      }

      self.front = 0L;
      // self.count stays the same
      self.elements = newelements;
    }

    let end = self.getEnd();
    self.elements.set(end, value);
    self.count = self.count + 1L;
  }

  @pub fun dequeue() -> T {
    assert(self.count > 0L);

    let value = self.elements.get(self.front);
    self.elements.set(self.front, defaultValue[T]());

    self.moveFront();
    self.count = self.count - 1L;

    return value;
  }

  fun moveFront() -> Int64 {
    self.front = self.front + 1L;

    if self.front == self.elements.size() {
      self.front = 0L;
    }

    return self.front;
  }

  fun getEnd() -> Int64 {
    let end = self.front + self.count;

    if end < self.elements.size() {
      return end;
    } else {
      return end - self.elements.size();
    }
  }

  @pub fun size() -> Int64 {
    return self.count;
  }

  @pub fun isEmpty() -> Bool {
    return self.count == 0L;
  }
}
