@internal class String {
  fun equals(rhs: String) -> Bool {
    var i = 0L;

    if self.size() != rhs.size() {
        return false;
    }

    let len = self.size();

    while i < len {
        if self.getByte(i) != rhs.getByte(i) {
            return false;
        }

        i = i + 1L;
    }

    return true;
  }

  fun toString() -> String = self;

  @internal fun compareTo(rhs: String) -> Int32;

  @internal fun size() -> Int64;

  @internal fun toInt32Success() -> Bool;
  @internal fun toInt64Success() -> Bool;

  @internal fun toInt32OrZero() -> Int32;
  @internal fun toInt64OrZero() -> Int64;

  fun toInt32() -> Option[Int32] {
    if self.toInt32Success() {
      Option::some[Int32](self.toInt32OrZero())
    } else {
      Option::none[Int32]()
    }
  }

  fun toInt64() -> Option[Int64] {
    if self.toInt64Success() {
      Option::some[Int64](self.toInt64OrZero())
    } else {
      Option::none[Int64]()
    }
  }

  @internal fun plus(rhs: String) -> String;

  @internal fun getByte(idx: Int64) -> UInt8;
  @internal fun clone() -> String;

  fun isEmpty() -> Bool = self.size() == 0L;

  fun codePoints() -> CodepointIterator = CodepointIterator(self, 0L);
}

module String {
  @internal fun fromBytesPartOrNull(val: Array[UInt8], offset: Int64, len: Int64) -> String;
  @internal fun fromStringPartOrNull(val: String, offset: Int64, len: Int64) -> String;

  fun fromBytesPart(val: Array[UInt8], offset: Int64, len: Int64) -> Option[String] {
    let value = String::fromBytesPartOrNull(val, offset, len);

    if value === nil {
      Option::none[String]()
    } else {
      Option::some[String](value)
    }
  }

  fun fromBytes(val: Array[UInt8]) -> Option[String] {
    let value = String::fromBytesPartOrNull(val, 0L, val.size());
  
    if value === nil {
      Option::none[String]()
    } else {
      Option::some[String](value)
    }
  }

  fun fromStringPart(val: String, offset: Int64, len: Int64) -> Option[String] {
    let value = String::fromStringPartOrNull(val, offset, len);

    if value === nil {
      Option::none[String]()
    } else {
      Option::some[String](value)
    }
  }

  fun fromString(val: String) -> String = val.clone();

  fun binary(data: Int64) -> String {
    var data = data;
    if data == 0L { return "0"; }
    let array = Array::zero[UInt8](64L);
    var at = array.size();
    while data != 0L {
      array(at - 1L) = ('0'.toInt64() + (data & 1L)).toUInt8();
      data = data.shiftRight(1);
      at = at - 1L;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1L).unwrap();
  }

  fun hex(data: Int64) -> String {
    var data = data;
    if data == 0L { return "0"; }
    let array = Array::zero[UInt8](16L);
    var at = array.size();
    while data != 0L {
      let digit = (data & 0xFL).toInt32();

      if digit < 10 {
        array(at - 1L) = ('0'.toInt32() + digit).toUInt8();
      } else {
        array(at - 1L) = ('A'.toInt32() + digit - 10).toUInt8();
      }

      data = data.shiftRight(4);
      at = at - 1L;
    }
    return String::fromBytesPart(array, at, array.size() - at + 1L).unwrap();
  }
}
