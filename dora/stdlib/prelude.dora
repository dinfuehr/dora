@internal fun fatalError(msg: String);
@internal fun abort();
@internal fun exit(status: Int32);
fun unreachable() {
  fatalError("unreachable code");
}

fun unimplemented() = fatalError("not yet implemented");

@internal fun print(text: String);
@internal fun println(text: String);
@internal fun assert(val: Bool);
@internal fun debug();
@internal fun argc(): Int32;
@internal fun argv(idx: Int32): String;
@internal fun forceCollect();
@internal fun forceMinorCollect();

@internal fun call(fct: String);

@internal fun timestamp(): Int64;

class Object

fun bubbleSort[T: Comparable](array: Array[T]) {
  let len = array.size();
  var swapped = true;

  while swapped {
    swapped = false;

    var i = 1L;

    while i < len {
      if array.get(i-1L).compareTo(array.get(i)) > 0 {
        let temp = array.get(i-1L);
        array.set(i-1L, array.get(i));
        array.set(i, temp);

        swapped = true;
      }

      i = i + 1L;
    }
  }
}

fun isValidUtf8(data: Array[UInt8]): Bool {
  var i = 0L;

  while i < data.size() {
    let by = data.get(i).toInt32();
    var codePoint = 0;
    var nextUInt8s = 0;
    var min = 0;
    var max = 0;

    if by & 0x80 == 0 {
      nextUInt8s = 0;
      i = i + 1L;
      continue;

    } else if by & 0xC0 == 0x80 {
      return false;

    } else if by & 0xE0 == 0xC0 {
      codePoint = by & 0x1FI;
      nextUInt8s = 1;
      min = 0x80;
      max = 0x7FFI;

    } else if by & 0xF0 == 0xE0 {
      codePoint = by & 0xFI;
      nextUInt8s = 2;
      min = 0x800;
      max = 0xFFFFI;

    } else if by & 0xF8 == 0xF0 {
      codePoint = by & 0x7;
      nextUInt8s = 3;
      min = 0x10000;
      max = 0x10FFFFI;
    }

    while nextUInt8s > 0 {
      nextUInt8s = nextUInt8s - 1;
      i = i + 1L;

      if i >= data.size() {
        return false;
      }

      let by = data.get(i).toInt32();

      if by & 0xC0 != 0x80 {
        return false;
      }

      codePoint = (codePoint << 6) | (by & 0x3FI);
    }

    if codePoint < min || codePoint > max {
      return false;
    }

    i = i + 1L;
  }

  return true;
}

@internal fun defaultValue[T](): T;

@internal fun sleep(seconds: Int32);
