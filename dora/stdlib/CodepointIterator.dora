class CodepointIterator(let value: String, var start: Int64) {
    fun hasNext() -> Bool = self.start < self.value.size();

    fun next() -> Char {
        var ch = self.value.getByte(self.start);

        if ch <= 0x7FY {
            self.start = self.start + 1L;
            return ch.toInt32().toCharUnchecked();
        }

        if ch <= 0xBFY {
            fatalError("unexpected continuation byte");
        }

        if ch <= 0xDFY {
            let cp = (ch.toInt32() & 0x1FI) << 6 | (self.value.getByte(self.start + 1L).toInt32() & 0x3FI);
            self.start = self.start + 2L;
            return cp.toCharUnchecked();
        }

        if ch <= 0xEFY {
            let cp = (ch.toInt32() & 0xFI) << 12 |
                 (self.value.getByte(self.start + 1L).toInt32() & 0x3FI) << 6 |
                 (self.value.getByte(self.start + 2L).toInt32() & 0x3FI);
            self.start = self.start + 3L;
            return cp.toCharUnchecked();
        }

        if ch <= 0xF7Y {
            let cp = (ch.toInt32() & 0x3) << 18 |
                 (self.value.getByte(self.start + 1L).toInt32() & 0x3FI) << 12 |
                 (self.value.getByte(self.start + 2L).toInt32() & 0x3FI) << 6 |
                 (self.value.getByte(self.start + 3L).toInt32() & 0x3FI);
            self.start = self.start + 4L;
            return cp.toCharUnchecked();
        }

        fatalError("invalid utf8: " + ch.toInt32().toString());
        return '\0';
    }

    fun peek() -> Char {
        var ch = self.value.getByte(self.start);

        if ch <= 0x7FY {
            return ch.toInt32().toCharUnchecked();
        }

        if ch <= 0xBFY {
            fatalError("unexpected continuation byte");
        }

        if ch <= 0xDFY {
            let cp = (ch.toInt32() & 0x1FI) << 6 | (self.value.getByte(self.start + 1L).toInt32() & 0x3FI);
            return cp.toCharUnchecked();
        }

        if ch <= 0xEFY {
            let cp = (ch.toInt32() & 0xFI) << 12 |
                 (self.value.getByte(self.start + 1L).toInt32() & 0x3FI) << 6 |
                 (self.value.getByte(self.start + 2L).toInt32() & 0x3FI);
            return cp.toCharUnchecked();
        }

        if ch <= 0xF7Y {
            let cp = (ch.toInt32() & 0x3) << 18 |
                 (self.value.getByte(self.start + 1L).toInt32() & 0x3FI) << 12 |
                 (self.value.getByte(self.start + 2L).toInt32() & 0x3FI) << 6 |
                 (self.value.getByte(self.start + 3L).toInt32() & 0x3FI);
            return cp.toCharUnchecked();
        }

        fatalError("invalid utf8: " + ch.toInt32().toString());
        return '\0';
    }

    fun size() -> Int64 {
        var i = 0L;

        while self.hasNext() {
            i = i + 1L;
            self.next();
        }

        return i;
    }

    fun toString() -> String = String::fromStringPart(self.value, self.start, self.value.size() - self.start).unwrap();
}
