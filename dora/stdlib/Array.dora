@internal class Array[T](values: T...) {

  @internal fun size() -> Int64;
  @internal fun get(idx: Int64) -> T;
  @internal fun set(idx: Int64, val: T);

  fun isEmpty() -> Bool = self.size() == 0L;

}

// The next two functions should be instance functions, but we cannot properly encode the fact that they put additional
// constraints on the existing class-level `T` of `Array`, not introduce a new function-level `T` on `contains`:
// fun contains[T : Identity + Equals](value: T) -> Bool /// wrong
// Some languages use the workaround to define a "fake" new generic parameter that subtypes the old one, like
// `[S <: T : Identity + Equals]`. I hope that a better solution can be found.

fun arrayContains[T : Identity + Equals](array: Array[T], value: T) -> Bool {
  var i = 0L;

  while i < array.size() {
    let x = array.get(i);
    if x.identicalTo(value) || x.equals(value) {
      return true;
    }
    i = i + 1L;
  }

  return false;
}

fun arrayHas[T : Identity](array: Array[T], value: T) -> Bool {
  var i = 0L;

  while i < array.size() {
    if array.get(i).identicalTo(value) {
      return true;
    }
    i = i + 1L;
  }

  return false;
}

module Array {
  fun empty[T]() -> Array[T] = Array::ofSizeUnsafe[T](0L);

  @internal
  fun ofSizeUnsafe[T](size: Int64) -> Array[T];

  fun fill[T](len: Int64, value: T) -> Array[T] {
    let array = Array::ofSizeUnsafe[T](len);
    var i = 0L;

    while i < len {
      array(i) = value;
      i = i + 1L;
    }

    return array;
  }

  fun new[T: Default](len: Int64) -> Array[T] {
    let array = Array::ofSizeUnsafe[T](len);
    var i = 0L;
    let value = T::default();

    while i < len {
      array.set(i, value);
      i = i + 1L;
    }

    return array;
  }

  fun zero[T: Zero](len: Int64) -> Array[T] = return Array::ofSizeUnsafe[T](len);

  fun copy[T](src: Array[T], srcPos: Int64, dest: Array[T], destPos: Int64, len: Int64) {
    var i = 0L;

    while i < len {
      dest.set(destPos+i, src.get(srcPos+i));
      i = i + 1L;
    }
  }
}
