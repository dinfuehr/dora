@internal class Char {
  @internal fun toInt32(): Int32;
  @internal fun toInt64(): Int64;
  @internal fun toString(): String;

  @internal fun equals(rhs: Char): Bool;
  @internal fun compareTo(rhs: Char): Int32;

  fun hash(): Int32 = self.toInt32();

  fun encodeUtf8(bytes: Array[UInt8], offset: Int64) {
    let val = self.toInt32();

    if val < 0x80 {
      bytes.set(offset, val.toUInt8());
    } else if val < 0x800 {
      bytes.set(offset, (0xC0 | ((val >> 6) & 0x1FI)).toUInt8());
      bytes.set(offset+1L, (0x80 | (val & 0x3FI)).toUInt8());
    } else if val < 0x10000 {
      bytes.set(offset, (0xE0 | ((val >> 12) & 0x0FI)).toUInt8());
      bytes.set(offset+1L, (0x80 | ((val >> 6) & 0x3FI)).toUInt8());
      bytes.set(offset+2L, (0x80 | (val & 0x3FI)).toUInt8());
    } else {
      bytes.set(offset, (0xF0 | ((val >> 18) & 0x07)).toUInt8());
      bytes.set(offset+1L, (0x80 | ((val >> 12) & 0x3FI)).toUInt8());
      bytes.set(offset+2L, (0x80 | ((val >> 6) & 0x3FI)).toUInt8());
      bytes.set(offset+3L, (0x80 | (val & 0x3FI)).toUInt8());
    }
  }

  fun lenUtf8(): Int32 {
    let val = self.toInt32();

    if val < 0x80 {
      return 1;
    } else if val < 0x800 {
      return 2;
    } else if val < 0x10000 {
      return 3;
    } else {
      return 4;
    }
  }
}
