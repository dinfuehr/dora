const RANDOM_MULTIPLIER: Int64 = 25214903917L;
const RANDOM_INCREMENT: Int64 = 11L;
const RANDOM_MASK: Int64 = 0xFF_FF_FF_FF_FF_FFL;

@pub class Random(var seed: Int64) {
  self.seed = (seed ^ RANDOM_MULTIPLIER) & RANDOM_MASK;

  @pub fun nextInt32WithBound(bound: Int32): Int32 {
    assert(bound > 0I);
    let bound_minus_1 = bound - 1I;

    if (bound & bound_minus_1) == 0I {
      let num = self.nextInt31().toInt64();
      return ((bound.toInt64().wrappingMul(num)) >>> 31I).toInt32();
    }

    var mod = 0I;

    while true {
      let num = self.nextInt31();
      mod = num % bound;

      if num - mod + bound_minus_1 >= 0I {
        break;
      }
    }

    return mod;
  }

  @pub fun nextInt32(): Int32 {
    self.seed = self.seed.wrappingMul(RANDOM_MULTIPLIER).wrappingAdd(RANDOM_INCREMENT) & RANDOM_MASK;
    return (self.seed >>> 16I).toInt32();
  }

  @pub fun nextInt31(): Int32 {
    return self.nextInt32() & 0x7F_FF_FF_FFI;
  }

  @pub fun nextInt64(): Int64 {
    let w1 = self.nextInt32();
    let w2 = self.nextInt32();

    return (w1.toInt64() << 32I) | w2.toInt64();
  }
}
