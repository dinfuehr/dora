@internal class Float {
  @internal fun toInt32() -> Int32;
  @internal fun toInt64() -> Int64;
  @internal fun toDouble() -> Double;
  @internal fun toString() -> String;

  @internal fun asInt32() -> Int32;

  @internal fun equals(rhs: Float) -> Bool;
  @internal fun compareTo(rhs: Float) -> Int32;
  fun sortsAs(rhs: Float) -> Int32 {
    var ix = self.asInt32();
    var iy = rhs.asInt32();

    let sx = ix.shiftRightSigned(31).shiftRight(1);
    let sy = iy.shiftRightSigned(31).shiftRight(1);

    ix = ix.bitwiseXor(sx);
    iy = iy.bitwiseXor(sy);

    if ix < iy { return -1; }
    if ix == iy { return 0; }
    return 1;
  }
  @internal fun plus(rhs: Float) -> Float;
  @internal fun minus(rhs: Float) -> Float;
  @internal fun times(rhs: Float) -> Float;
  @internal fun div(rhs: Float) -> Float;

  @internal fun unaryPlus() -> Float;
  @internal fun unaryMinus() -> Float;

  @internal fun isNan() -> Bool;
  @internal fun sqrt() -> Float;

  fun hash() -> Int32 = self.asInt32();
}

module Float {
  fun bits() -> Int32 = 32;
  fun bytes() -> Int32 = 4;
}
