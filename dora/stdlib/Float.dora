@internal class Float {
  @internal fun toInt() -> Int;
  @internal fun toLong() -> Long;
  @internal fun toDouble() -> Double;
  @internal fun toString() -> String;

  fun toStringBinary() -> String = String::toStringBinary(self.asInt().toLong(), Float::bits());

  @internal fun asInt() -> Int;

  @internal fun equals(rhs: Float) -> Bool;
  @internal fun compareTo(rhs: Float) -> Int;
  fun sortsAs(rhs: Float) -> Int {
    var ix = self.asInt();
    var iy = rhs.asInt();

    let sx = ix.shiftRightSigned(31).shiftRight(1);
    let sy = iy.shiftRightSigned(31).shiftRight(1);

    ix = ix.bitwiseXor(sx);
    iy = iy.bitwiseXor(sy);

    if ix < iy { return -1; }
    if ix == iy { return 0; }
    return 1;
  }
  @internal fun plus(rhs: Float) -> Float;
  @internal fun minus(rhs: Float) -> Float;
  @internal fun times(rhs: Float) -> Float;
  @internal fun div(rhs: Float) -> Float;

  @internal fun unaryPlus() -> Float;
  @internal fun unaryMinus() -> Float;

  @internal fun isNan() -> Bool;
  @internal fun sqrt() -> Float;

  fun hash() -> Int = self.asInt();

  @static fun bits() -> Int = 32;
  @static fun bytes() -> Int = 4;
}
