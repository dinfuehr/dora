class Vec[T](values: T...) {
  var array: Array[T] = values;
  var len: Int64 = values.size();

  fun get(idx: Int64) -> T {
    if idx < 0L || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    return self.array.get(idx);
  }

  fun set(idx: Int64, val: T) {
    if idx < 0L || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    self.array.set(idx, val);
  }

  fun reserve(newcap: Int64) {
    assert(newcap >= 0L);

    if self.capacity() >= newcap {
      return;
    }

    let newarray = Array::ofSizeUnsafe[T](newcap);
    Array::copy[T](self.array, 0L, newarray, 0L, self.len);
    self.array = newarray;
  }

  fun push(val: T) {
    var newcap = self.capacity();

    if self.len == newcap {
      if newcap == 0L {
        newcap = 4L;
      } else {
        newcap = newcap * 2L;
      }

      let newarray = Array::ofSizeUnsafe[T](newcap);
      Array::copy[T](self.array, 0L, newarray, 0L, self.len);
      self.array = newarray;
    }

    self.array.set(self.len, val);
    self.len = self.len + 1L;
  }

  fun toArray() -> Array[T] {
    let newarray = Array::ofSizeUnsafe[T](self.len);
    Array::copy[T](self.array, 0L, newarray, 0L, self.len);
    newarray
  }

  fun pop() -> T {
    if self.len == 0L {
      fatalError("no element left to pop");
    }

    let newlength = self.len - 1L;
    let temp = self.array.get(newlength);

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    self.array.set(newlength, defaultValue[T]());

    self.len = newlength;
    temp
  }

  fun trimToLen() {
    if self.len != self.capacity() {
      if self.len == 0L {
        self.array = Array::empty[T]();
      } else {
        let newarray = Array::ofSizeUnsafe[T](self.len);
        Array::copy[T](self.array, 0L, newarray, 0L, self.len);
        self.array = newarray;
      }
    }
  }

  fun removeAt(ind: Int64) -> T {
    var ind = ind;
    assert(ind < self.len);
    let temp = self.get(ind);
    let len = self.len;

    while ind < len - 1L {
      self.set(ind, self.get(ind+1L));
      ind = ind + 1L;
    }

    self.set(ind, defaultValue[T]());
    self.len = ind;

    temp
  }

  fun size() -> Int64 {
    return self.len;
  }

  fun isEmpty() -> Bool {
    self.len == 0L
  }

  fun capacity() -> Int64 {
    self.array.size()
  }

  fun first() -> Option[T] {
    if self.len == 0L {
      Option::none[T]()
    } else {
      Option::some[T](self.array.get(0L))
    }
  }

  fun last() -> Option[T] {
    if self.len == 0L {
      Option::none[T]()
    } else {
      Option::some[T](self.array.get(self.len - 1L))
    }
  }

  fun makeIterator() -> VecIter[T] {
    VecIter[T](self)
  }

  fun makeReverseIterator() -> ReverseVecIter[T] {
    ReverseVecIter[T](self)
  }
}

class VecIter[T](let data: Vec[T]) {
  var idx: Int64 = 0L;

  fun hasNext() -> Bool {
    self.idx < self.data.size()
  }

  fun next() -> T {
    let result = self.data.get(self.idx);
    self.idx = self.idx + 1L;
    result
  }
}

class ReverseVecIter[T](let data: Vec[T]) {
  var idx: Int64 = data.size() - 1L;

  fun hasNext() -> Bool {
    self.idx != -1L
  }

  fun next() -> T {
    let result = self.data.get(self.idx);
    self.idx = self.idx - 1L;
    result
  }
}

fun removeItem[T: Equals](vec: Vec[T], elem: T) {
  var i = 0L;

  while i < vec.size() {
    if vec.get(i).equals(elem) {
      vec.removeAt(i);
    } else {
      i = i + 1L;
    }
  }
}
