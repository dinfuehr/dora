class Vec[T] {
  var array: Array[T] = arrayEmpty[T]();
  var len: Int = 0;

  fun get(idx: Int) -> T {
    if idx < 0 || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    return self.array.get(idx);
  }

  fun set(idx: Int, val: T) {
    if idx < 0 || idx >= self.len {
      fatalError("index out of bounds for vector");
    }

    self.array.set(idx, val);
  }

  fun push(val: T) {
    var newcap = self.capacity();

    if self.len == newcap {
      if newcap == 0 {
        newcap = 4;
      } else {
        newcap = newcap * 2;
      }

      let newarray = Array[T](newcap);
      arrayCopy[T](self.array, 0, newarray, 0, self.len);
      self.array = newarray;
    }

    self.array.set(self.len, val);
    self.len = self.len + 1;
  }

  fun toArray() -> Array[T] {
    let newarray = Array[T](self.len);
    arrayCopy[T](self.array, 0, newarray, 0, self.len);
    newarray
  }

  fun pop() -> T {
    if self.len == 0 {
      fatalError("no element left to pop");
    }

    let newlength = self.len - 1;
    let temp = self.array.get(newlength);

    // set popped element to nil so that GC can collect object
    // not necessary for primitive types
    self.array.set(newlength, defaultValue[T]());

    self.len = newlength;

    return temp;
  }

  fun trimToLen() {
    if self.len != self.capacity() {
      if self.len == 0 {
        self.array = arrayEmpty[T]();
      } else {
        let newarray = Array[T](self.len);
        arrayCopy[T](self.array, 0, newarray, 0, self.len);
        self.array = newarray;
      }
    }
  }

  fun removeAt(var ind: Int) -> T {
    assert(ind < self.len);
    let temp = self.get(ind);
    let len = self.len;

    while ind < len - 1 {
      self.set(ind, self.get(ind+1));
      ind = ind + 1;
    }

    self.set(ind, defaultValue[T]());
    self.len = ind;

    return temp;
  }

  fun length() -> Int {
    return self.len;
  }

  fun isEmpty() -> Bool {
    self.len == 0
  }

  fun capacity() -> Int {
    return self.array.length();
  }

  fun first() -> T {
    assert(self.len > 0);
    return self.array.get(0);
  }

  fun last() -> T {
    let len = self.len;
    assert(len > 0);
    return self.array.get(len-1);
  }
}

fun removeItem[T: Equals](vec: Vec[T], elem: T) {
  var i = 0;

  while i < vec.length() {
    if vec.get(i).equals(elem) {
      vec.removeAt(i);
    } else {
      i = i + 1;
    }
  }
}
