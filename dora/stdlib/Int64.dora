@pub @internal struct Int64

impl Int64 {
  @pub @internal fun toUInt8(): UInt8;
  @pub fun toChar(): Option[Char] {
    if self >= 0L && self <= 0x10FFFFL && (self < 0xD800L || self > 0xDFFFL) {
      Option[Char]::Some(self.toCharUnchecked())
    } else {
      Option[Char]::None
    }
  }
  @pub @internal fun toCharUnchecked(): Char;
  @pub @internal fun toInt32(): Int32;
  @pub @internal fun toString(): String;
  @pub fun toStringHex(): String { String::hex(self) }

  @pub fun toStringBinary(): String = String::binary(self);

  @pub @internal fun toFloat32(): Float32;
  @pub @internal fun toFloat64(): Float64;

  @pub @internal fun asFloat64(): Float64;

  @pub @internal fun equals(rhs: Int64): Bool;
  @pub @internal fun compareTo(rhs: Int64): Int32;

  @pub @internal fun plus(rhs: Int64): Int64;
  @pub @internal fun minus(rhs: Int64): Int64;
  @pub @internal fun times(rhs: Int64): Int64;
  @pub @internal fun div(rhs: Int64): Int64;
  @pub @internal fun mod(rhs: Int64): Int64;

  @pub @internal fun bitwiseOr(rhs: Int64): Int64;
  @pub @internal fun bitwiseAnd(rhs: Int64): Int64;
  @pub @internal fun bitwiseXor(rhs: Int64): Int64;

  @pub @internal fun shiftLeft(by: Int32): Int64;
  @pub @internal fun shiftRightSigned(by: Int32): Int64;
  @pub @internal fun shiftRight(by: Int32): Int64;

  @pub @internal fun rotateLeft(by: Int32): Int64;
  @pub @internal fun rotateRight(by: Int32): Int64;

  @pub @internal fun unaryPlus(): Int64;
  @pub @internal fun unaryMinus(): Int64;
  @pub @internal fun not(): Int64;

  @pub @internal fun countZeroBits(): Int32 = self.not().countOneBits();
  @pub @internal fun countOneBits(): Int32 {
    var x = self;
    var c = 0;
    while (x != 0L) {
      c = c + 1;
      x = x.bitwiseAnd(x - 1L);
    }
    return c;
  }
  @pub @internal fun countZeroBitsLeading(): Int32 {
    if self == 0L {
      return Int64::bits();
    }
    var t = 1L.shiftLeft(Int64::bits() - 1);
    var r = 0;
    while (self.bitwiseAnd(t)) == 0L {
      t = t.shiftRight(1);
      r = r + 1;
    }
    return r;
  }
  @pub @internal fun countOneBitsLeading(): Int32 = self.not().countZeroBitsLeading();
  @pub @internal fun countZeroBitsTrailing(): Int32 {
    if self == 0L {
      return Int64::bits();
    }
    var t = 1L;
    var r = 0;
    while (self.bitwiseAnd(t)) == 0L {
      t = t.shiftLeft(1);
      r = r + 1
    }
    return r;
  }
  @pub @internal fun countOneBitsTrailing(): Int32 = self.not().countZeroBitsTrailing();

  @pub fun hash(): Int32 = self.toInt32();

  @pub fun abs(): Int64 = if self >= 0L { self } else { -self };

  @pub @static fun bits(): Int32 = 64;
  @pub @static fun bytes(): Int32 = 8;

  @pub @static fun maxValue(): Int64 = 9223372036854775807L;
  @pub @static fun minValue(): Int64 = -9223372036854775808L;

  @pub @static fun min(lhs: Int64, rhs: Int64): Int64 = if lhs < rhs { lhs } else { rhs };
  @pub @static fun max(lhs: Int64, rhs: Int64): Int64 = if lhs < rhs { rhs } else { lhs };
}
