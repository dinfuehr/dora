@pub @internal struct Float32

impl Float32 {
  @pub @internal fun toInt32(): Int32;
  @pub @internal fun toInt64(): Int64;
  @pub @internal fun toFloat64(): Float64;
  @pub @internal fun toString(): String;

  @pub @internal fun asInt32(): Int32;

  @pub @internal fun equals(rhs: Float32): Bool;
  @pub @internal fun compareTo(rhs: Float32): Int32;
  @pub fun sortsAs(rhs: Float32): Int32 {
    var ix = self.asInt32();
    var iy = rhs.asInt32();

    let sx = ix.shiftRightSigned(31I).shiftRight(1I);
    let sy = iy.shiftRightSigned(31I).shiftRight(1I);

    ix = ix.bitwiseXor(sx);
    iy = iy.bitwiseXor(sy);

    if ix < iy { return -1I; }
    if ix == iy { return 0I; }
    return 1I;
  }

  @pub @internal fun plus(rhs: Float32): Float32;
  @pub @internal fun minus(rhs: Float32): Float32;
  @pub @internal fun times(rhs: Float32): Float32;
  @pub @internal fun div(rhs: Float32): Float32;

  @pub @internal fun unaryPlus(): Float32;
  @pub @internal fun unaryMinus(): Float32;
  @pub @internal fun abs(): Float32;

  @pub @internal fun isNan(): Bool;
  @pub @internal fun sqrt(): Float32;

  @pub fun hash(): Int32 = self.asInt32();

  // should be lets, not funs
  @pub @static fun bits(): Int32 = 32I;
  @pub @static fun bytes(): Int32 = 4I;
  @pub @static fun infinityPositive(): Float32 = 0x7f800000I.asFloat32();
  @pub @static fun infinityNegative(): Float32 = 0xff800000I.asFloat32();
  @pub @static fun notANumber(): Float32 = 0x7fC00000I.asFloat32();
}
