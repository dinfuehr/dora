@pub @internal struct Float64

impl Float64 {
  @pub @internal fun toInt32(): Int32;
  @pub @internal fun toInt64(): Int64;
  @pub @internal fun toFloat32(): Float32;
  @pub @internal fun toString(): String;

  @pub @internal fun asInt64(): Int64;

  @pub @internal fun equals(rhs: Float64): Bool;
  @pub @internal fun compareTo(rhs: Float64): Int32;
  @pub fun sortsAs(rhs: Float64): Int32 {
    var ix = self.asInt64();
    var iy = rhs.asInt64();

    let sx = ix.shiftRightSigned(63).shiftRight(1);
    let sy = iy.shiftRightSigned(63).shiftRight(1);

    ix = ix.bitwiseXor(sx);
    iy = iy.bitwiseXor(sy);

    if ix < iy { return -1; }
    if ix == iy { return 0; }
    return 1;
  }

  @pub @internal fun plus(rhs: Float64): Float64;
  @pub @internal fun minus(rhs: Float64): Float64;
  @pub @internal fun times(rhs: Float64): Float64;
  @pub @internal fun div(rhs: Float64): Float64;

  @pub @internal fun unaryPlus(): Float64;
  @pub @internal fun unaryMinus(): Float64;
  @pub fun abs(): Float64 {
    return self.asInt64().bitwiseAnd(0x7fffffffffffffffL).asFloat64();
  }

  @pub @internal fun isNan(): Bool;
  @pub @internal fun sqrt(): Float64;

  @pub fun hash(): Int32 = self.asInt64().toInt32();

  // should be lets, not funs
  @pub @static fun bits(): Int32 = 64;
  @pub @static fun bytes(): Int32 = 8;
  @pub @static fun infinityPositive(): Float64 = 0x7ff0000000000000L.asFloat64();
  @pub @static fun infinityNegative(): Float64 = 0xfff0000000000000L.asFloat64();
  @pub @static fun notANumber(): Float64 = 0x7ff8000000000000L.asFloat64();
}
