class StringBuffer() {
  var buf: Array[UInt8] = Array::empty[UInt8]();
  var len: Int64 = 0L;

  fun length() -> Int64 {
    return self.len;
  }

  fun capacity() -> Int64 {
    return self.buf.length();
  }

  // reserve `elements` bytes
  // (capacity - length >= elements)
  fun reserve(elements: Int64) {
    if self.capacity() - self.length() >= elements {
      return;
    }

    let newcap = self.newCapacity(elements);
    let newbuf = Array[UInt8](newcap);
    var i = 0L;

    while i < self.buf.length() {
      newbuf.set(i, self.buf.get(i));
      i = i + 1L;
    }

    self.buf = newbuf;
  }

  fun newCapacity(reserve: Int64) -> Int64 {
    var len = self.len;

    if len == 0L {
      len = 4L;
    }

    let c1 = (len + reserve + 7L) & !7L;
    let c2 = len * 2L;

    if c1 > c2 {
      c1
    } else if c2 - c1 > 32L {
      c1
    } else {
      c2
    }
  }

  fun appendChar(ch: Char) -> StringBuffer {
    let chLen = ch.lenUtf8();
    self.reserve(chLen.toInt64());
    ch.encodeUtf8(self.buf, self.len);
    self.len = self.len + chLen.toInt64();
    self
  }

  fun append(value: String) -> StringBuffer {
    self.reserve(value.length());
    var i = 0L;

    while i < value.length() {
      self.buf.set(self.len + i, value.getByte(i));
      i = i + 1L;
    }

    self.len = self.len + value.length();
    self
  }

  fun appendNewline() -> StringBuffer {
    self.appendChar('\n')
  }

  fun toString() -> String = String::fromBytesPart(self.buf, 0L, self.length()).unwrap();
}

module StringBuffer {
  fun empty() -> StringBuffer = StringBuffer();
}
