@internal class Long {
  @internal fun toByte() -> Byte;
  fun toChar() throws -> Char {
    if self >= 0L && self <= 0x10FFFFL && (self < 0xD800L || self > 0xDFFFL) {
      return self.toCharUnchecked();
    } else {
      throw "invalid code point";
    }
  }
  @internal fun toCharUnchecked() -> Char;
  @internal fun toInt() -> Int;
  @internal fun toString() -> String;

  fun toStringBinary() -> String = String::toStringBinary(self, Long::bits());

  @internal fun toFloat() -> Float;
  @internal fun toDouble() -> Double;

  @internal fun asDouble() -> Double;

  @internal fun equals(rhs: Long) -> Bool;
  @internal fun compareTo(rhs: Long) -> Int;

  @internal fun plus(rhs: Long) -> Long;
  @internal fun minus(rhs: Long) -> Long;
  @internal fun times(rhs: Long) -> Long;
  @internal fun div(rhs: Long) -> Long;
  @internal fun mod(rhs: Long) -> Long;

  @internal fun bitwiseOr(rhs: Long) -> Long;
  @internal fun bitwiseAnd(rhs: Long) -> Long;
  @internal fun bitwiseXor(rhs: Long) -> Long;

  @internal fun shiftLeft(by: Int) -> Long;
  @internal fun shiftRightSigned(by: Int) -> Long;
  @internal fun shiftRight(by: Int) -> Long;

  @internal fun rotateLeft(by: Int) -> Long;
  @internal fun rotateRight(by: Int) -> Long;

  @internal fun unaryPlus() -> Long;
  @internal fun unaryMinus() -> Long;
  @internal fun not() -> Long;

  @internal fun countZeroBits() -> Int = self.not().countOneBits();
  @internal fun countOneBits() -> Int {
    var x = self;
    var c = 0;
    while (x != 0L) {
      c = c + 1;
      x = x.bitwiseAnd(x - 1L);
    }
    return c;
  }
  @internal fun countZeroBitsLeading() -> Int {
    if self == 0L {
      return Long::bits();
    }
    var t = 1L.shiftLeft(Long::bits() - 1);
    var r = 0;
    while (self.bitwiseAnd(t)) == 0L {
      t = t.shiftRight(1);
      r = r + 1;
    }
    return r;
  }
  @internal fun countOneBitsLeading() -> Int = self.not().countZeroBitsLeading();
  @internal fun countZeroBitsTrailing() -> Int {
    if self == 0L {
      return Long::bits();
    }
    var t = 1L;
    var r = 0;
    while (self.bitwiseAnd(t)) == 0L {
      t = t.shiftLeft(1);
      r = r + 1
    }
    return r;
  }
  @internal fun countOneBitsTrailing() -> Int = self.not().countZeroBitsTrailing();

  fun hash() -> Int = self.toInt();

  @static fun bits() -> Int = 64;
  @static fun bytes() -> Int = 8;

  @static fun maxValue() -> Long = 9223372036854775807L;
  @static fun minValue() -> Long = -9223372036854775808L;

  @static fun min(lhs: Long, rhs: Long) -> Long = if lhs < rhs { lhs } else { rhs };
  @static fun max(lhs: Long, rhs: Long) -> Long = if lhs < rhs { rhs } else { lhs };
}
