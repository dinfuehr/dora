@internal class Double {
  @internal fun toInt() -> Int;
  @internal fun toLong() -> Long;
  @internal fun toFloat() -> Float;
  @internal fun toString() -> String;

  @internal fun asLong() -> Long;

  @internal fun equals(rhs: Double) -> Bool;
  @internal fun compareTo(rhs: Double) -> Int;
  fun sortsAs(rhs: Double) -> Int {
    var ix = self.asLong();
    var iy = rhs.asLong();

    let sx = ix.shiftRight(63L).unsignedShiftRight(1L);
    let sy = iy.shiftRight(63L).unsignedShiftRight(1L);

    ix = ix.bitwiseXor(sx);
    iy = iy.bitwiseXor(sy);

    if ix < iy { return -1; }
    if ix == iy { return 0; }
    return 1;
  }

  @internal fun plus(rhs: Double) -> Double;
  @internal fun minus(rhs: Double) -> Double;
  @internal fun times(rhs: Double) -> Double;
  @internal fun div(rhs: Double) -> Double;

  @internal fun unaryPlus() -> Double;
  @internal fun unaryMinus() -> Double;

  @internal fun isNan() -> Bool;
  @internal fun sqrt() -> Double;

  fun hash() -> Int = self.asLong().toInt();
}
